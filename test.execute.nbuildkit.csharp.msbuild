<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="11.0"
         DefaultTargets="nBuildKit_Test_Execute_CSharp_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsTestPrepareWorkspace>true</ExistsTestPrepareWorkspace>

        <!-- The full path to the settings file that contains all the settings for the build process -->
        <SharedPropertyFile Condition=" '$(SharedPropertyFile)' == '' ">UNDEFINED</SharedPropertyFile>

        <!--
            Define the DirWorkspace before importing the SharedPropertyFile so that it is defined and can be used by
            the properties in the SharedPropertyFile. Note that we can't define it in the SharedPropertyFile because that
            is imported which means there is no way to get the path of the file.
        -->
        <DirWorkspace Condition=" '$(DirWorkspace)' == '' ">$([System.IO.Path]::GetDirectoryName('$(SharedPropertyFile)'))</DirWorkspace>
    </PropertyGroup>

    <Import Project="$(DirNBuildKitMsBuildShared)\shared.importtestsharedsettings.props"
            Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importtestsharedsettings.props') AND '$(ExistsSharedImportTestSharedSettings)' != 'true' " />

    <Import Project="$(DirNBuildKitMsBuildExtensions)\GetSemanticVersionFromFile.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\GetSemanticVersionFromFile.msbuild') AND '$(ExistsExtensionsGetSemanticVersionFromFile)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\NuGetInstall.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\NuGetInstall.msbuild') AND '$(ExistsExtensionsNuGetInstall)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\InvokePesterOnFile.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\InvokePesterOnFile.msbuild') AND '$(ExistsExtensionsInvokePesterOnFile)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\SearchPackagesDirectoryForToolDirectory.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\SearchPackagesDirectoryForToolDirectory.msbuild') AND '$(ExistsExtensionsSearchPackagesDirectoryForToolDirectory)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\TemplateText.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\TemplateText.msbuild') AND '$(ExistsExtensionsTemplateText)' != 'true' " />

    <Target Name="nBuildKit_Test_Execute_CSharp_Run"
            DependsOnTargets="_nBuildKit_Test_Execute_CSharp_DisplayInfo">
        <CallTarget Targets="nBuildKit_Test_Execute_CSharp_Latest_Run" />
        <CallTarget Targets="nBuildKit_Test_Execute_CSharp_Oldest_Run" />
    </Target>

    <Target Name="_nBuildKit_Test_Execute_CSharp_DebugLog"
            Condition="$(ShouldDisplayDebugLog)">
        <Message Text="Configuration values:"
                 Importance="low"/>
        <Message Text="ShouldClean:             $(ShouldClean)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>

        <Message Text="Project directory structure:"
                 Importance="low"/>
        <Message Text="The workspace is located at:                                       $(DirWorkspace)"
                 Importance="low"/>
        <Message Text="The directory containing the build output is located at:           $(DirBuild)"
                 Importance="low"/>
        <Message Text="The directory containing the deliverables is located at:           $(DirBuildDeploy)"
                 Importance="low"/>
        <Message Text="The directory containing the build logs is located at:             $(DirBuildLogs)"
                 Importance="low"/>
        <Message Text="The directory containing the temporary build files is located at:  $(DirBuildTemp)"
                 Importance="low"/>
        <Message Text="The directory containing the C# test files is located at:          $(DirBuildTestLatestCSharp)"
                 Importance="low"/>
        <Message Text="The directory containing the NuGet packages is located at:         $(DirPackages)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit files is located at:        $(DirNBuildKitMsBuild)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit scripts is located at:      $(DirNBuildKitMsBuildExtensions)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit templates is located at:    $(DirNBuildKitMsBuildTemplates)"
                 Importance="low"/>
    </Target>

    <!-- Display info -->
    <Target Name="_nBuildKit_Test_Execute_CSharp_DisplayInfo"
            DependsOnTargets="_nBuildKit_Test_Execute_CSharp_DebugLog">
        <Message Text="Testing C# packages ..."
                 Importance="normal"/>
    </Target>

    <Target Name="_nBuildKit_Test_Execute_CSharp_GetToolPaths">
        <NuGetInstall NuGetPath="$(ToolsExternalNuGetPath)"
                      PackageName="Pester"
                      PackageVersion="$(ToolsExternalPesterVersion)"
                      PackageDirectory="$(DirPackages)"
                      Sources="@(NuGetSources)"
                      Condition=" '$(ToolsExternalPesterPath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' "/>
        <SearchPackagesDirectoryForToolDirectory PackagesDir="$(DirPackages)"
                                                 FileToLocate="Pester.psm1"
                                                 Condition=" '$(ToolsExternalPesterPath)' == 'UNDEFINED' AND  '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="Path" PropertyName="ToolsExternalPesterPath" />
        </SearchPackagesDirectoryForToolDirectory>
        <Message Text="The Pester module was found at: $(ToolsExternalPesterPath)"
                 Condition="Exists('$(ToolsExternalPesterPath)') AND '$(ShouldExecute)' == 'true' " />
        <Error Text="Could not locate the Pester module path. Cannot execute pester tests."
               Condition="!Exists('$(ToolsExternalPesterPath)') AND '$(ShouldExecute)' == 'true' "/>
    </Target>

    <Target Name="_nBuildKit_Test_Execute_CSharp_GetPrerequisites">
        <GetSemanticVersionFromFile VersionFile="$(FileSemanticVersion)"
                                    Condition="Exists('$(FileSemanticVersion)')">
            <Output TaskParameter="VersionMajorNext" PropertyName="VersionMajorNext" />
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
        </GetSemanticVersionFromFile>
    </Target>

    <Target Name="nBuildKit_Test_Execute_CSharp_Latest_Run"
            DependsOnTargets="_nBuildKit_Test_Execute_CSharp_GetToolPaths;_nBuildKit_Test_Execute_CSharp_GetPrerequisites">
        <TemplateText Template="$(FileReportVerificationLatestBuildCSharp)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FileReportPesterXmlExpanded" />
        </TemplateText>

        <ItemGroup>
            <VerifyLatestCSharpBuildArguments Include="nbuildkitminimumversion">
                <Value>$(VersionSemantic)</Value>
            </VerifyLatestCSharpBuildArguments>
            <VerifyLatestCSharpBuildArguments Include="nbuildkitmaximumversion">
                <Value>$(VersionMajorNext).0.0</Value>
            </VerifyLatestCSharpBuildArguments>
            <VerifyLatestCSharpBuildArguments Include="projectworkspaceLocation">
                <Value>$(DirWorkspace)</Value>
            </VerifyLatestCSharpBuildArguments>
            <VerifyLatestCSharpBuildArguments Include="testOutputLocation">
                <Value>$(DirBuildTemp)</Value>
            </VerifyLatestCSharpBuildArguments>
            <VerifyLatestCSharpBuildArguments Include="testworkspaceLocation">
                <Value>$(DirBuildTestLatestCSharp)</Value>
            </VerifyLatestCSharpBuildArguments>
        </ItemGroup>
        <InvokePesterOnFile PowershellExePath="$(ToolsExternalPowershellPath)"
                            PesterModulePath="$(ToolsExternalPesterPath)"
                            TestFile="$(DirTest)\latest.csharp.tests.ps1"
                            TestArguments="@(VerifyLatestCSharpBuildArguments)"
                            ReportFile="$(FileReportPesterXmlExpanded)"
                            TempDirectory="$(DirBuildTemp)"
                            IgnoreErrors="false"
                            IgnoreExitCode="false" />
    </Target>

    <Target Name="nBuildKit_Test_Execute_CSharp_Oldest_Run"
            DependsOnTargets="_nBuildKit_Test_Execute_CSharp_GetToolPaths;_nBuildKit_Test_Execute_CSharp_GetPrerequisites">
        <TemplateText Template="$(FileReportVerificationOldestBuildCSharp)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FileReportPesterXmlExpanded" />
        </TemplateText>

        <ItemGroup>
            <VerifyOldestCSharpBuildArguments Include="nbuildkitminimumversion">
                <Value>$(VersionNBuildKitOldestSupported)</Value>
            </VerifyOldestCSharpBuildArguments>
            <VerifyOldestCSharpBuildArguments Include="nbuildkitmaximumversion">
                <Value>$(VersionMajorNext).0.0</Value>
            </VerifyOldestCSharpBuildArguments>
            <VerifyOldestCSharpBuildArguments Include="projectworkspaceLocation">
                <Value>$(DirWorkspace)</Value>
            </VerifyOldestCSharpBuildArguments>
            <VerifyOldestCSharpBuildArguments Include="testOutputLocation">
                <Value>$(DirBuildTemp)</Value>
            </VerifyOldestCSharpBuildArguments>
            <VerifyOldestCSharpBuildArguments Include="testworkspaceLocation">
                <Value>$(DirBuildTestOldestCSharp)</Value>
            </VerifyOldestCSharpBuildArguments>
        </ItemGroup>
        <InvokePesterOnFile PowershellExePath="$(ToolsExternalPowershellPath)"
                            PesterModulePath="$(ToolsExternalPesterPath)"
                            TestFile="$(DirTest)\oldest.csharp.tests.ps1"
                            TestArguments="@(VerifyOldestCSharpBuildArguments)"
                            ReportFile="$(FileReportPesterXmlExpanded)"
                            TempDirectory="$(DirBuildTemp)"
                            IgnoreErrors="false"
                            IgnoreExitCode="false" />
    </Target>
 </Project>