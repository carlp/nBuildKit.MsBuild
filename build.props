<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!-- Overrides for the project specific properties -->
    <PropertyGroup>
        <ProjectName Condition=" '$(ProjectName)' == '' ">nBuildKit</ProjectName>
    </PropertyGroup>
    
    <!-- Overrides for the global properties -->
    <PropertyGroup>
        <!-- 
            Uncomment to override any of the default settings. The default values are the ones
            that the example properties are set to in this file.
        -->
        <!--<ShouldClean Condition=" '$(ShouldClean)' == ''">true</ShouldClean>-->
    </PropertyGroup>
    
    <!-- Overrides for the build configuration -->
    <PropertyGroup>
        <!-- Uncomment to override any of the default configurations -->
        
        <!-- The build configuration (debug / release / ...) that will be used to run all the unit tests and the static verification on -->
        <!-- <TestConfiguration Condition=" '$(TestConfiguration)' == '' ">release</TestConfiguration> -->
        
        <!-- The build configuration (debug / release / ..) that will be used for packaging of the binaries -->
        <!-- <ProductionConfiguration Condition=" '$(ProductionConfiguration)' == '' ">deploy</ProductionConfiguration> -->

        <!-- The platform for which the binaries will be build -->
        <!-- <Platform Condition=" '$(Platform)' == '' ">Any CPU</Platform> -->
    </PropertyGroup>
    
    <!-- Overrides for directories -->
    <PropertyGroup>
        <!-- Uncomment to override any of the default directory paths -->
        <!-- NOTE: The 'DirWorkspace' property is always set to the top-level directory of the workspace / repository -->
        
        <!-- The directory that will contain all the files generated during the build process -->
        <!-- <DirBuild Condition=" '$(DirBuild)' == '' ">$(DirWorkspace)\build</DirBuild> -->
        
        <!-- The directory that will contain all the generated artifacts during the build process -->
        <!-- <DirBuildDeploy Condition=" '$(DirBuildDeploy)' == '' ">$(DirBuild)\deploy</DirBuildDeploy> -->
        
        <!-- The directory that will contain all the generated build logs during the build process -->
        <!-- <DirBuildLogs Condition=" '$(DirBuildLogs)' == '' ">$(DirBuild)\logs</DirBuildLogs> -->
        
        <!-- The directory that will contain the reports generated by OpenCover and ReportGenerator describing the coverage of the unit tests. -->
        <!-- <DirReportGeneratorOutput Condition=" '$(DirReportGeneratorOutput)' == '' ">$(DirBuildLogs)\coverage</DirReportGeneratorOutput> -->
        
        <!-- The directory that will contain all the temporary files needed during the build process -->
        <!-- <DirBuildTemp Condition=" '$(DirBuildTemp)' == '' ">$(DirBuild)\temp</DirBuildTemp> -->
        
        <!-- The directory that contains all the NuGet packages for the project -->
        <!-- <DirPackages Condition=" '$(DirPackages)' == '' ">$(DirWorkspace)\packages</DirPackages> -->
        
        <!-- The directory that contains the source files for the project -->
        <!-- <DirSrc Condition=" '$(DirSrc)' == '' ">$(DirWorkspace)\src</DirSrc> -->
        
        <!-- The directory that contains the template files for the project -->
        <!-- <DirTemplates Condition=" '$(DirTemplates)' == '' ">$(DirWorkspace)\templates</DirTemplates> -->
    </PropertyGroup>

    <!-- Overrides for files -->    
    <PropertyGroup>
        <!-- Uncomment to override any of the default file paths -->
        
        <!-- The full path to the file that is used to store the version information during the build -->
        <!-- <FileSemanticVersion Condition=" '$(FileSemanticVersion)' == '' ">$(DirBuildTemp)\semantic_version.json</FileSemanticVersion> -->
        
        <!-- The full path to the file that is used to store the release notes for the current release during the build -->
        <!-- <FileReleaseNotesShort Condition=" '$(FileReleaseNotesShort)' == '' ">$(DirBuildTemp)\releasenotes_short.md</FileReleaseNotesShort> -->
        
        <!-- The full path to the file that is used to store the release notes for all the releases during the build -->
        <!-- <FileReleaseNotesFull Condition=" '$(FileReleaseNotesFull)' == '' ">$(DirBuildTemp)\releasenotes_full.md</FileReleaseNotesFull> -->
        
        <!-- The solution file -->
        <FileSln Condition=" '$(FileSln)' == '' ">$(DirSrc)\nuclei.sln</FileSln>

        <!-- The XML report file that is generated by OpenCover upon completion of the unit test execution -->
        <!-- <FileReportOpenCoverXml Condition=" '$(FileReportOpenCoverXml)' == '' ">$(DirBuildLogs)\opencover.xml</FileReportOpenCoverXml> -->
        
        <!-- The CSV report file that is generated by OpenCover upon completion of the unit test execution -->
        <!-- <FileReportOpenCoverCsv Condition=" '$(FileReportOpenCoverCsv)' == '' ">$(DirBuildLogs)\coverage.csv</FileReportOpenCoverCsv> -->
        
        <!-- The XML summary report file that is generated by ReportGenerator upon completion of the unit test execution -->
        <!-- <FileReportReportGeneratorXmlSummary Condition=" '$(FileReportReportGeneratorXmlSummary)' == '' ">$(DirReportGeneratorOutput)\Summary.xml</FileReportReportGeneratorXmlSummary> -->

        <!-- The MsTest report file -->
        <!-- <FileReportMsTest Condition=" '$(FileReportMsTest)' == '' ">$(DirBuildLogs)\mstest.trx</FileReportMsTest> -->
    </PropertyGroup>

    <!-- Overrides for the tools paths -->    
    <PropertyGroup>
        <!-- Uncomment to override any of the default tools paths -->
        
        <!-- The full path to the NuGet command line executable. Normally expected to be found via the PATH environment variable. -->
        <!-- <ToolsExternalNuGetExe Condition=" '$(ToolsExternalNuGetExe)' == '' "></ToolsExternalNuGetExe> -->
    </PropertyGroup>
    
    <!--
        Define the steps taken during the build process. Available steps and their sub-steps are provided by the following properties:
        $(BuildTargetPrepare)               - Performs preparation of workspace: deleting existing files, restoring nuget packages, generating version number files and release notes.
            $(BuildStepsPrepareRestoreNuGet)       - Restores the NuGet packages for the project.
            $(BuildStepsPrepareVersion)            - Gathers the version number and stores it for later use during the build process
            $(BuildStepsPrepareReleaseNotes)       - Gathers the release notes and stores them for later use during the build process
        $(BuildTargetAnalyzeSource)         - Performs static analysis of the source files through CCM and SourceMonitor.
            $(BuildStepsAnalyzeSourceCcm)          - Analyzes the source code files with CCM
            $(BuildStepsAnalyzeSourceSouceMonitor) - Analyzes the source code files with SourceMonitor
        $(BuildTargetBuildBinaries)         - Builds the binaries from a given Visual Studio solution.
        $(BuildTargetExecuteUnitTests)      - Executes the unit tests with either NUnit or MsTest while calculating unit test coverage with OpenCover.
            $(BuildStepsUnitTestNUnit)             - Executes the unit tests with NUnit
            $(BuildStepsUnitTestMsTest)            - Executes the unit tests with MsTest
        $(BuildTargetAnalyzeBinaries)       - Performs static analysis of the binary files through Moma and FxCop.
            $(BuildStepsAnalyzeBinariesMoma)       - Analyzes the binary files with Moma (Mono Migration Analyzer)
            $(BuildStepsAnalyzeBinariesFxCop)      - Analyzes the binary files with FxCop
        $(BuildTargetBuildApiDocumentation) - Builds the API documentation with SandCastle from the inline XML documentation comments.
        $(BuildTargetPackage)               - Packages the binaries with NuGet and via ZIP files
            $(BuildStepsPackNuGet)                 - Generates the NuGet packages
            $(BuildStepsPackZip)                   - Generates one or more ZIP archives
        
        The order in which items are defined is irrelevant given that the build script will sort the steps in the right order.
    -->
    <ItemGroup>
        <BuildStepsToExecute Include="$(BuildTargetPackage)">
            <Steps>$(BuildStepsPackNuGet)</Steps>
            <!-- <PreInvokeScripts></PreInvokeScripts> -->
            <!-- <PostInvokeScripts></PostInvokeScripts> -->
        </BuildStepsToExecute>
        <BuildStepsToExecute Include="$(BuildTargetPrepare)">
            <Steps>$(BuildStepsPrepareRestoreNuGet);$(BuildStepsPrepareVersion);$(BuildStepsPrepareReleaseNotes)</Steps>
            <!-- <PreInvokeScripts></PreInvokeScripts> -->
            <!-- <PostInvokeScripts></PostInvokeScripts> -->
        </BuildStepsToExecute>
    </ItemGroup>

    <!-- Overrides for the unit test properties -->
    <PropertyGroup>
        <!-- Uncomment to override the default settings -->
        
        <!-- The assembly name prefix for the assemblies containing the unit tests -->
        <!-- <UnitTestAssemblyNamePrefix Condition=" '$(UnitTestAssemblyNamePrefix)' == '' " >Test.Unit</UnitTestAssemblyNamePrefix> -->
    </PropertyGroup>
    
    <!-- The item group defining the selections necessary for the unit tests. -->
    <ItemGroup>
        <!-- Uncomment to override the default settings -->
        
        <!-- The files that contain the unit test cases -->
        <!-- <UnitTestAssemblies Include="$(DirBuildBin)\**\$(UnitTestAssemblyNamePrefix)*.dll" /> -->
        
        <!-- Defines the attributes that indicate code that should be ignored by OpenCover -->
        <!-- 
        <OpenCoverIgnoreAttributes Include="System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute" />
        <OpenCoverIgnoreAttributes Include="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
        -->
        
        <!-- Defines the filters used by OpenCover -->
        <!-- NOTE: Use the hexadecimal value for * (%2A) to avoid MsBuild trying to make sense out of the text -->
        <!-- 
        <OpenCoverFilters Include="+[$(ProjectName)]%2A" />
        <OpenCoverFilters Include="+[$(ProjectName).%2A]%2A" />
        <OpenCoverFilters Include="-[%2A$(UnitTestAssemblyNamePrefix)%2A]%2A" />
        <OpenCoverFilters Include="-[NUnit]%2A" />
        <OpenCoverFilters Include="-[NUnit.%2A]%2A" />
        -->
    </ItemGroup>
    
    <!-- 
        The item group defining the location and contents of the NuGet packages that are generated during the build 
        
        The IncludedDependencies and the ExcludedDependencies are actually lists of packages.config files that
        should be included (or excluded) in the list of dependencies. Each entry is separated by a semi-colon(;).
        
        NOTE: 
        Note that it is important to replace the asterisk (*) with the hexadecimal value for that character, i.e. %2A
    -->
    <ItemGroup>
        <NuGetPackageSpecs Include="$(DirBuildTemp)\nbuildkit.msbuild.nuspec">
            <Template>$(DirTemplates)\nbuildkit.msbuild.nuspec.in</Template>
            <ShouldBuildSymbols>false</ShouldBuildSymbols>
        </NuGetPackageSpecs>
        <NuGetPackageSpecs Include="$(DirBuildTemp)\nbuildkit.msbuild.scaffolding.nuspec">
            <Template>$(DirTemplates)\nbuildkit.msbuild.scaffolding.nuspec.in</Template>
            <ShouldBuildSymbols>false</ShouldBuildSymbols>
        </NuGetPackageSpecs>
    </ItemGroup>
    
    <!--
        Define the steps taken during the deploy process. Available steps and their sub-steps are provided by the following properties:
        $(DeployTargetPushTo) - Pushes the artifacts to one or more locations
            $(DeployStepsPushToNuget)     - Pushes one or more artifacts to a NuGet feed
            $(DeployStepsPushToDirectory) - Pushes one or more artifacts to a directory
        $(DeployTargetTag)    - Adds one or more tags to the VCS
            $(DeployStepsTagGit)          - Tags a revision in a GIT repository
            $(DeployStepsTagTfs)          - Tags a revision in a TFS repository
        
        The order in which items are defined is irrelevant given that the build script will sort the steps in the right order.
    -->
    <ItemGroup>
        <DeployStepsToExecute Include="$(DeployTargetPushTo)">
            <Steps>$(DeployStepsPushToNuget)</Steps>
            <!-- <PreInvokeScripts></PreInvokeScripts> -->
            <!-- <PostInvokeScripts></PostInvokeScripts> -->
        </DeployStepsToExecute>
        <DeployStepsToExecute Include="$(DeployTargetTag)">
            <Steps>$(DeployStepsTagGit)</Steps>
            <!-- <PreInvokeScripts></PreInvokeScripts> -->
            <!-- <PostInvokeScripts></PostInvokeScripts> -->
        </DeployStepsToExecute>
    </ItemGroup>
</Project>