<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="11.0"
         DefaultTargets="nBuildKit_Test_Execute_VbNet_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsTestPrepareWorkspace>true</ExistsTestPrepareWorkspace>
    </PropertyGroup>

    <Import Project="$(DirNBuildKitMsBuildShared)\shared.importtestsharedsettings.props"
            Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importtestsharedsettings.props') AND '$(ExistsSharedImportTestSharedSettings)' != 'true' " />

    <Import Project="$(DirNBuildKitMsBuildExtensions)\GetSemanticVersionFromFile.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\GetSemanticVersionFromFile.msbuild') AND '$(ExistsExtensionsGetSemanticVersionFromFile)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\NuGetInstall.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\NuGetInstall.msbuild') AND '$(ExistsExtensionsNuGetInstall)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\InvokePesterOnFile.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\InvokePesterOnFile.msbuild') AND '$(ExistsExtensionsInvokePesterOnFile)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\SearchPackagesDirectoryForToolDirectory.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\SearchPackagesDirectoryForToolDirectory.msbuild') AND '$(ExistsExtensionsSearchPackagesDirectoryForToolDirectory)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\TemplateText.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\TemplateText.msbuild') AND '$(ExistsExtensionsTemplateText)' != 'true' " />

    <Target Name="nBuildKit_Test_Execute_VbNet_Run"
            DependsOnTargets="_nBuildKit_Test_Execute_VbNet_DisplayInfo">
        <CallTarget Targets="nBuildKit_Test_Execute_VbNet_Latest_Run" />
        <CallTarget Targets="nBuildKit_Test_Execute_VbNet_Oldest_Run" />
    </Target>

    <Target Name="_nBuildKit_Test_Execute_VbNet_DebugLog"
            Condition="$(ShouldDisplayDebugLog)">
        <Message Text="Configuration values:"
                 Importance="low"/>
        <Message Text="ShouldClean:             $(ShouldClean)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>

        <Message Text="Project directory structure:"
                 Importance="low"/>
        <Message Text="The workspace is located at:                                       $(DirWorkspace)"
                 Importance="low"/>
        <Message Text="The directory containing the build output is located at:           $(DirBuild)"
                 Importance="low"/>
        <Message Text="The directory containing the deliverables is located at:           $(DirBuildDeploy)"
                 Importance="low"/>
        <Message Text="The directory containing the build logs is located at:             $(DirBuildLogs)"
                 Importance="low"/>
        <Message Text="The directory containing the temporary build files is located at:  $(DirBuildTemp)"
                 Importance="low"/>
        <Message Text="The directory containing the C# test files is located at:          $(DirBuildTestLatestVbNet)"
                 Importance="low"/>
        <Message Text="The directory containing the NuGet packages is located at:         $(DirPackages)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit files is located at:        $(DirNBuildKitMsBuild)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit scripts is located at:      $(DirNBuildKitMsBuildExtensions)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit templates is located at:    $(DirNBuildKitMsBuildTemplates)"
                 Importance="low"/>
    </Target>

    <!-- Display info -->
    <Target Name="_nBuildKit_Test_Execute_VbNet_DisplayInfo"
            DependsOnTargets="_nBuildKit_Test_Execute_VbNet_DebugLog">
        <Message Text="Testing C# packages ..."
                 Importance="normal"/>
    </Target>

    <Target Name="_nBuildKit_Test_Execute_VbNet_GetToolPaths">
        <NuGetInstall NuGetPath="$(ToolsExternalNuGetPath)"
                      PackageName="Pester"
                      PackageVersion="$(ToolsExternalPesterVersion)"
                      PackageDirectory="$(DirPackages)"
                      Sources="@(NuGetSources)"
                      Condition=" '$(ToolsExternalPesterPath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' "/>
        <SearchPackagesDirectoryForToolDirectory PackagesDir="$(DirPackages)"
                                                 FileToLocate="Pester.psm1"
                                                 Condition=" '$(ToolsExternalPesterPath)' == 'UNDEFINED' AND  '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="Path" PropertyName="ToolsExternalPesterPath" />
        </SearchPackagesDirectoryForToolDirectory>
        <Message Text="The Pester module was found at: $(ToolsExternalPesterPath)"
                 Condition="Exists('$(ToolsExternalPesterPath)') AND '$(ShouldExecute)' == 'true' " />
        <Error Text="Could not locate the Pester module path. Cannot execute pester tests."
               Condition="!Exists('$(ToolsExternalPesterPath)') AND '$(ShouldExecute)' == 'true' "/>
    </Target>

    <Target Name="_nBuildKit_Test_Execute_VbNet_GetPrerequisites">
        <GetSemanticVersionFromFile VersionFile="$(FileSemanticVersion)"
                                    Condition="Exists('$(FileSemanticVersion)')">
            <Output TaskParameter="VersionMajorNext" PropertyName="VersionMajorNext" />
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
        </GetSemanticVersionFromFile>
    </Target>

    <Target Name="nBuildKit_Test_Execute_VbNet_Latest_Run"
            DependsOnTargets="_nBuildKit_Test_Execute_VbNet_GetToolPaths;_nBuildKit_Test_Execute_VbNet_GetPrerequisites">
        <MakeDir Directories="$(DirBuildTempTestLatestVbNet)"
                 Condition="!Exists('$(DirBuildTempTestLatestVbNet)')" />
        <MakeDir Directories="$(DirBuildTempTestLatestVbNet)\artifacts"
                 Condition="!Exists('$(DirBuildTempTestLatestVbNet)\artifacts')" />
        <MakeDir Directories="$(DirBuildTempTestLatestVbNet)\nuget"
                 Condition="!Exists('$(DirBuildTempTestLatestVbNet)\nuget')" />
        <MakeDir Directories="$(DirBuildTempTestLatestVbNet)\symbols"
                 Condition="!Exists('$(DirBuildTempTestLatestVbNet)\symbols')" />

        <TemplateText Template="$(FileReportVerificationLatestBuildVbNet)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FileReportPesterXmlExpanded" />
        </TemplateText>

        <ItemGroup>
            <VerifyLatestVbNetBuildArguments Include="nbuildkitminimumversion">
                <Value>$(VersionSemantic)</Value>
            </VerifyLatestVbNetBuildArguments>
            <VerifyLatestVbNetBuildArguments Include="nbuildkitmaximumversion">
                <Value>$(VersionMajorNext).0.0</Value>
            </VerifyLatestVbNetBuildArguments>
            <VerifyLatestVbNetBuildArguments Include="projectworkspaceLocation">
                <Value>$(DirWorkspace)</Value>
            </VerifyLatestVbNetBuildArguments>
            <VerifyLatestVbNetBuildArguments Include="testOutputLocation">
                <Value>$(DirBuildTemp)</Value>
            </VerifyLatestVbNetBuildArguments>
            <VerifyLatestVbNetBuildArguments Include="testworkspaceLocation">
                <Value>$(DirBuildTestLatestVbNet)</Value>
            </VerifyLatestVbNetBuildArguments>
        </ItemGroup>
        <InvokePesterOnFile PowershellExePath="$(ToolsExternalPowershellPath)"
                            PesterModulePath="$(ToolsExternalPesterPath)"
                            TestFile="$(DirTest)\latest.vbnet.tests.ps1"
                            TestArguments="@(VerifyLatestVbNetBuildArguments)"
                            ReportFile="$(FileReportPesterXmlExpanded)"
                            TempDirectory="$(DirBuildTemp)"
                            IgnoreErrors="false"
                            IgnoreExitCode="false" />
    </Target>

    <Target Name="nBuildKit_Test_Execute_VbNet_Oldest_Run"
            DependsOnTargets="_nBuildKit_Test_Execute_VbNet_GetToolPaths;_nBuildKit_Test_Execute_VbNet_GetPrerequisites">
        <MakeDir Directories="$(DirBuildTempTestOldestVbNet)"
                 Condition="!Exists('$(DirBuildTempTestOldestVbNet)')" />
        <MakeDir Directories="$(DirBuildTempTestOldestVbNet)\artifacts"
                 Condition="!Exists('$(DirBuildTempTestOldestVbNet)\artifacts')" />
        <MakeDir Directories="$(DirBuildTempTestOldestVbNet)\nuget"
                 Condition="!Exists('$(DirBuildTempTestOldestVbNet)\nuget')" />
        <MakeDir Directories="$(DirBuildTempTestOldestVbNet)\symbols"
                 Condition="!Exists('$(DirBuildTempTestOldestVbNet)\symbols')" />

        <TemplateText Template="$(FileReportVerificationOldestBuildVbNet)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FileReportPesterXmlExpanded" />
        </TemplateText>

        <ItemGroup>
            <VerifyOldestVbNetBuildArguments Include="nbuildkitminimumversion">
                <Value>$(VersionNBuildKitOldestSupported)</Value>
            </VerifyOldestVbNetBuildArguments>
            <VerifyOldestVbNetBuildArguments Include="nbuildkitmaximumversion">
                <Value>$(VersionMajorNext).0.0.0</Value>
            </VerifyOldestVbNetBuildArguments>
            <VerifyOldestVbNetBuildArguments Include="projectworkspaceLocation">
                <Value>$(DirWorkspace)</Value>
            </VerifyOldestVbNetBuildArguments>
            <VerifyOldestVbNetBuildArguments Include="testOutputLocation">
                <Value>$(DirBuildTemp)</Value>
            </VerifyOldestVbNetBuildArguments>
            <VerifyOldestVbNetBuildArguments Include="testworkspaceLocation">
                <Value>$(DirBuildTestOldestVbNet)</Value>
            </VerifyOldestVbNetBuildArguments>
        </ItemGroup>
        <InvokePesterOnFile PowershellExePath="$(ToolsExternalPowershellPath)"
                            PesterModulePath="$(ToolsExternalPesterPath)"
                            TestFile="$(DirTest)\oldest.vbnet.tests.ps1"
                            TestArguments="@(VerifyOldestVbNetBuildArguments)"
                            ReportFile="$(FileReportPesterXmlExpanded)"
                            TempDirectory="$(DirBuildTemp)"
                            IgnoreErrors="false"
                            IgnoreExitCode="false" />
    </Target>
 </Project>