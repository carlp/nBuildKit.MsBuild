<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="nBuildKit_Deploy_PushTo_GitHubRelease_Run"
    ToolsVersion="14.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsDeployPushToGitHubRelease>true</ExistsDeployPushToGitHubRelease>
    </PropertyGroup>
    <PropertyGroup>
        <ShouldLoadPushToGitHubReleaseSpecs>true</ShouldLoadPushToGitHubReleaseSpecs>
        <ShouldLoadTemplateTokens>true</ShouldLoadTemplateTokens>
        <ShouldLoadTemplateVersion>true</ShouldLoadTemplateVersion>
        <ShouldLoadSystemTemplateVersion>true</ShouldLoadSystemTemplateVersion>
    </PropertyGroup>

    <Import
        Condition="Exists('$(FileImports)') AND '$(ExistsFileImports)' != 'true' "
        Project="$(FileImports)" />

    <Target
        DependsOnTargets="_nBuildKit_Deploy_PushTo_GitHubRelease_Push"
        Name="nBuildKit_Deploy_PushTo_GitHubRelease_Run">
    </Target>

    <Target Name="_nBuildKit_Deploy_PushTo_GitHubRelease_GetVersion">
        <GetSemanticVersionFromFile
            Condition="Exists('$(FileSemanticVersion)') "
            ErrorInformation="@(ErrorInformation)"
            VersionFile="$(FileSemanticVersion)">
            <Output
                PropertyName="VersionSemantic"
                TaskParameter="VersionSemantic" />
        </GetSemanticVersionFromFile>
    </Target>

    <Target Name="_nBuildKit_Deploy_PushTo_GitHubRelease_GetToolPaths">
        <Error
            Code="$(NBuildKitErrorCodePackagesDirectoryNotFound)"
            Condition="!Exists('$(DirPackages)')"
            HelpKeyword="$(NBuildKitErrorIdPackagesDirectoryNotFound)"
            Text="The packages directory does not exist. Cannot search for the github-release executable." />

        <NuGetInstall
            Condition=" '$(ToolsExternalGitHubReleasePath)' == 'UNDEFINED' "
            ErrorInformation="@(ErrorInformation)"
            ExcludeVersion="$(ShouldRestoreNuGetPackagesWithoutVersionInPath)"
            NuGetExecutablePath="$(ToolsExternalNuGetPath)"
            PackagesDirectory="$(DirPackages)"
            PackageName="Github-Release.Windows.x64"
            PackageVersion="$(ToolsExternalGitHubReleaseVersion)"
            Sources="@(NuGetSources)"
            WorkingDirectory="$(DirWorkspace)" />
        <SearchPackagesDirectoryForToolPath
            Condition=" '$(ToolsExternalGitHubReleasePath)' == 'UNDEFINED' "
            ErrorInformation="@(ErrorInformation)"
            FileToLocate="github-release.exe"
            PackagesDirectory="$(DirPackages)">
            <Output
                PropertyName="ToolsExternalGitHubReleasePath"
                TaskParameter="Path" />
        </SearchPackagesDirectoryForToolPath>
        <GetToolFullPath
            Condition=" '$(ToolsExternalGitHubReleasePath)' != 'UNDEFINED' "
            ErrorInformation="@(ErrorInformation)"
            Tool="$(ToolsExternalGitHubReleasePath)">
            <Output
                PropertyName="ToolsExternalGitHubReleasePath"
                TaskParameter="Path" />
        </GetToolFullPath>
        <Message
            Condition="Exists('$(ToolsExternalGitHubReleasePath)')"
            Importance="low"
            Text="The github-release executable was found at: $(ToolsExternalGitHubReleasePath)" />
        <Error
            Code="$(NBuildKitErrorCodeToolFileNotFound)"
            HelpKeyword="$(NBuildKitErrorIdToolFileNotFound)"
            Condition="!Exists('$(ToolsExternalGitHubReleasePath)')"
            Text="Could not locate the github-release executable path. Cannot publish release on GitHub." />
    </Target>

    <Target
        Condition=" '@(PushToGitHubReleaseSpecs)' != ''"
        DependsOnTargets="_nBuildKit_Deploy_PushTo_GitHubRelease_GetVersion;_nBuildKit_Deploy_PushTo_GitHubRelease_GetToolPaths"
        Name="_nBuildKit_Deploy_PushTo_GitHubRelease_Push"
        Outputs="%(PushToGitHubReleaseSpecs.Identity)">
        <Error
            Code="$(NBuildKitErrorCodeToolFileNotFound)"
            Condition=" ('$(ToolsExternalGitHubReleasePath)' == '' OR '$(ToolsExternalGitHubReleasePath)' == 'UNDEFINED') "
            HelpKeyword="$(NBuildKitErrorIdToolFileNotFound)"
            Text="No GitHub-Release executable defined. Will not be able to push a release to GitHub." />
        <Error
            Code="$(NBuildKitErrorCodeDeployPushToGithubNoUserName)"
            Condition=" ('$(GitHubUserName)' == '' OR '$(GitHubUserName)' == 'UNDEFINED' ) "
            HelpKeyword="$(NBuildKitErrorIdDeployPushToGithubNoUserName)"
            Text="No GitHub user name specified. Will not be able to push a release to GitHub." />

        <!-- Process the build templates in the name -->
        <Message
            Importance="low"
            Text="Translating the release name. Currently at: %(PushToGitHubReleaseSpecs.Identity)" />
        <TemplateText
            Condition=" '%(PushToGitHubReleaseSpecs.Identity)' != '' "
            ErrorInformation="@(ErrorInformation)"
            Template="%(PushToGitHubReleaseSpecs.Identity)"
            Tokens="@(TemplateTokens)">
            <Output
                PropertyName="GitHubReleaseName"
                TaskParameter="Result" />
        </TemplateText>

        <!-- Process the build templates in the included files -->
        <Message
            Importance="low"
            Text="Translating the included files. Currently at: %(PushToGitHubReleaseSpecs.IncludedFiles)" />
        <TemplateText
            Condition=" '%(PushToGitHubReleaseSpecs.IncludedFiles)' != '' "
            ErrorInformation="@(ErrorInformation)"
            Template="%(PushToGitHubReleaseSpecs.IncludedFiles)"
            Tokens="@(TemplateTokens)">
            <Output
                PropertyName="GitHubReleaseIncludedFiles"
                TaskParameter="Result" />
        </TemplateText>

        <!-- Process the build templates in the excluded files -->
        <Message
            Importance="low"
            Text="Translating the excluded files. Currently at: %(PushToGitHubReleaseSpecs.ExcludedFiles)" />
        <TemplateText
            Condition=" '%(PushToGitHubReleaseSpecs.ExcludedFiles)' != '' "
            ErrorInformation="@(ErrorInformation)"
            Template="%(PushToGitHubReleaseSpecs.ExcludedFiles)"
            Tokens="@(TemplateTokens)">
            <Output
                PropertyName="GitHubReleaseExcludedFiles"
                TaskParameter="Result" />
        </TemplateText>

        <!-- Process the build templates in the description -->
        <Message
            Importance="low"
            Text="Translating the description. Currently at: %(PushToGitHubReleaseSpecs.Description)" />
        <TemplateText
            Condition=" '%(PushToGitHubReleaseSpecs.Description)' != '' "
            ErrorInformation="@(ErrorInformation)"
            Template="%(PushToGitHubReleaseSpecs.Description)"
            Tokens="@(TemplateTokens)">
            <Output
                PropertyName="GitHubReleaseDescription"
                TaskParameter="Result" />
        </TemplateText>
        <Error
            Code="$(NBuildKitErrorCodeDeployPushToGithubNoReleaseDescription)"
            Condition=" '$(GitHubReleaseDescription)' == '' "
            HelpKeyword="$(NBuildKitErrorIdDeployPushToGithubNoReleaseDescription)"
            Text="No release description specified. Will not be able to push a release to GitHub." />

        <!--
            Create the ItemGroup dynamically because creating an ItemGroup in the target with the dynamically
            created properties doesn't work because the wildcards are not always expanded for some reason.
        -->
        <CreateItem
            Include="$(GitHubReleaseExcludedFiles.Split(';'))">
            <Output
                ItemName="FilesToExcludeFromGitHubRelease"
                TaskParameter="Include" />
        </CreateItem>
        <CreateItem
            Exclude="@(FilesToExcludeFromGitHubRelease -> '%(FullPath)')"
            Include="$(GitHubReleaseIncludedFiles.Split(';'))">
            <Output
                ItemName="GitHubReleaseFiles"
                TaskParameter="Include" />
        </CreateItem>

        <CreateProperty Value="%(PushToGitHubReleaseSpecs.Repository)">
            <Output
                PropertyName="GitHubReleaseRepository"
                TaskParameter="Value" />
        </CreateProperty>
        <Error
            Code="$(NBuildKitErrorCodeDeployPushToGithubNoRepository)"
            Condition=" '$(GitHubReleaseRepository)' == '' "
            HelpKeyword="$(NBuildKitErrorIdDeployPushToGithubNoRepository)"
            Text="No GitHub repository specified. Will not be able to push a release to GitHub." />

        <!-- Create the release -->
        <Message
            Importance="low"
            Text="Creating a release on GitHub with: " />
        <Message
            Importance="low"
            Text="Repository:  $(GitHubUserName)/$(GitHubReleaseRepository)" />
        <Message
            Importance="low"
            Text="Tag:         $(VersionSemantic)" />
        <Message
            Importance="low"
            Text="Name:        $(GitHubReleaseName)" />
        <Message
            Importance="low"
            Text="Description: $(GitHubReleaseDescription)" />
        <GitHubReleaseCreate
            ErrorInformation="@(ErrorInformation)"
            GitHubReleasePath="$(ToolsExternalGitHubReleasePath)"
            ReleaseDescription="$(GitHubReleaseDescription)"
            ReleaseName="$(GitHubReleaseName)"
            Repository="$(GitHubReleaseRepository)"
            Tag="$(VersionSemantic)"
            UserName="$(GitHubUserName)"
            WorkingDirectory="$(DirWorkspace)" />

        <!-- Upload the files -->
        <Message
            Importance="low"
            Text="Uploading files to release $(GitHubReleaseName) " />
        <Message
            Importance="low"
            Text="%(GitHubReleaseFiles.FullPath)" />
        <GitHubReleaseUpload
            Condition=" '@(GitHubReleaseFiles)' != '' "
            ErrorInformation="@(ErrorInformation)"
            FileName="%(GitHubReleaseFiles.Filename)%(GitHubReleaseFiles.Extension)"
            FilePath="%(GitHubReleaseFiles.FullPath)"
            GitHubReleasePath="$(ToolsExternalGitHubReleasePath)"
            Repository="$(GitHubReleaseRepository)"
            Tag="$(VersionSemantic)"
            UserName="$(GitHubUserName)"
            WorkingDirectory="$(DirWorkspace)" />
    </Target>
</Project>
