<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="Run"
    ToolsVersion="11.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!--
        **** DEPLOY STEPS ****
    -->
    <ItemGroup Condition=" '@(DeployPreStepsToExecute)' == '' ">
        <!--
        <DeployPreStepsToExecute Include="">
            <Properties>
            </Properties>
        </DeployPreStepsToExecute>
        -->
    </ItemGroup>
    <ItemGroup Condition=" '@(DeployPostStepsToExecute)' == '' ">
        <!--
        <DeployPostStepsToExecute Include="">
            <Properties>
            </Properties>
        </DeployPostStepsToExecute>
        -->
    </ItemGroup>
    <ItemGroup Condition=" '@(DeployStepsToExecute)' == '' ">
        <DeployStepsToExecute Include="$(DeployStepsShowHelp)">
            <Properties>
                HelpFilePathSharedSettings=$(DirNBuildKitMsBuildActions)\shared.importdeploysharedsettings.props;
                HelpFileSettings=deploy.settings.props;
                HelpProcess=deploy;
                HelpStepGroup=DeployStepsToExecute;
            </Properties>
            <Groups>
                Help;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </DeployStepsToExecute>
    </ItemGroup>

    <!--
        Define the scripts that should be executed when any one of the deploy steps fails.

        Steps can be defined by providing the path to the MsBuild script that should be executed
        for that step, e.g. adding a deploy step that points to the 'c:\stuff\MyCoolScript.msbuild' will execute
        that script.

        Any properties defined by the 'Properties' section are pushed up.
    -->
    <ItemGroup Condition=" '@(DeployFailureStepsToExecute)' == '' ">
        <!--
        <DeployFailureStepsToExecute Include="">
            <Properties>
            </Properties>
        </DeployFailureStepsToExecute>
        -->
    </ItemGroup>


    <!--
        **** PUSHTO - DIRECTORY / FILESERVER ****
    -->
    <!--
        The ItemGroup defining the files that should be pushed to a given deployment directory.

        The IncludedFiles and the ExcludedFiles are lists of files that
        should be included (or excluded) in the list of files to deploy. Each entry is separated by a semi-colon(;).

        The PushToDirectorySpecs, IncludedFiles and ExcludedFiles all allow the insertion of build templates,
        e.g. \\MyServer\${ProductNameInFilePath}\${VersionSemantic}
    -->
    <ItemGroup Condition=" '@(PushToDirectorySpecs)' == '' ">
        <!--
        <PushToDirectorySpecs Include="\\MyServer\${ProductNameInFilePath}\${VersionSemantic}">
            <IncludedFiles>
                $(DirBuildDeploy)\myfile.zip
            </IncludedFiles>
            <ExcludedFiles>
            </ExcludedFiles>
        </PushToDirectorySpecs>
        -->
    </ItemGroup>


    <!--
        **** PUSHTO - NUGET ****
    -->
    <!--
        The ItemGroup defining which packages should be pushed up to the NuGet package source.
        Allows build templates, e.g. $(DirBuildDeploy)\${VersionSemantic}\*.nupkg.
    -->
    <ItemGroup Condition=" '@(NuGetPackagesToPush)' == '' ">
        <NuGetPackagesToPush
            Exclude="$(DirBuildDeploy)\*.symbols.nupkg"
            Include="$(DirBuildDeploy)\*.nupkg" />
    </ItemGroup>


    <!--
        **** PUSHTO - SYMBOL SERVER ****
    -->
    <!--
        The ItemGroup defining which symbol packages should be pushed up to the symbol server.
        Allows build templates, e.g. $(DirBuildDeploy)\${VersionSemantic}\*.symbols.nupkg.
    -->
    <ItemGroup Condition=" '@(SymbolPackagesToPush)' == '' ">
        <SymbolPackagesToPush Include="$(DirBuildDeploy)\*.symbols.nupkg" />
    </ItemGroup>


    <!--
        **** PUSHTO - GITHUB RELEASE ****
    -->
    <!--
        The ItemGroup defining the files that should be pushed to a GitHub release. All properties
        except for the Repository allow the use of build templates, e.g. $(DirBuildDeploy)\myarchive-${VersionSemantic}.zip
    -->
    <ItemGroup Condition=" '@(PushToGitHubReleaseSpecs)' == '' ">
        <!--
        <PushToGitHubReleaseSpecs Include="${VersionSemantic} - My release">
             <Repository>MyCoolProject</Repository>
             <Description>${ReleaseNotes}</Description>
             <IncludedFiles>
                $(DirBuildDeploy)\myarchive-${VersionSemantic}.zip
             </IncludedFiles>
             <ExcludedFiles>
             </ExcludedFiles>
        </PushToGitHubReleaseSpecs>
        -->
    </ItemGroup>


    <!--
        **** PUSHTO - GIT BRANCH ****
    -->
    <!--
        The ItemGroup defining the files that should be pushed to a GIT branch. All properties
        allow the use of build templates, e.g. $(DirBuildDeploy)\myarchive-${VersionSemantic}.zip
    -->
    <ItemGroup Condition=" '@(PushToGitBranchSpecs)' == '' ">
        <!--
        <PushToGitBranchSpecs Include="$(DirBuildDeploy)\myarchive-${VersionSemantic}.zip">
             <Repository>$(GitRemoteRepository)</Repository>
             <Branch>master</Branch>
             <ExtractZipFiles>true</ExtractZipFiles>
             <CommitMessage>New changes</CommitMessage>
        </PushToGitBranchSpecs>
        -->
    </ItemGroup>


    <!--
        **** PUSHTO - GIT REPOSITORY ****
    -->
    <!--
        The ItemGroup defining the zip files containing a git workspace that should be pushed to a GIT repository.
        All properties allow the use of build templates, e.g. $(DirBuildDeploy)\myarchive-${VersionSemantic}.zip
    -->
    <ItemGroup Condition=" '@(PushToGitRepositorySpecs)' == '' ">
        <!--
        <PushToGitRepositorySpecs Include="$(DirBuildDeploy)\myarchive-${VersionSemantic}.zip">
             <Repository>$(GitRemoteRepository)</Repository>
        </PushToGitRepositorySpecs>
        -->
    </ItemGroup>





    <!--
        *****************************************
        *                                       *
        *     NBUILDKIT SPECIFIC SETTINGS       *
        *                                       *
        *****************************************
    -->

    <PropertyGroup>
        <StageSpecificNuGetPackageFilesToRestore>$(DirNBuildKitMsBuildActions)\deploy\packages.config</StageSpecificNuGetPackageFilesToRestore>

        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsDeployPostUserSharedSettings>true</ExistsDeployPostUserSharedSettings>
    </PropertyGroup>
</Project>
