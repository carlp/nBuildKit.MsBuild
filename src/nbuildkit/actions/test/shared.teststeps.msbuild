<?xml version="1.0" encoding="utf-8"?>
<Project
    ToolsVersion="11.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <!-- Note the current script is not meant to be imported! -->
        <ExistsNBuildKitTestSteps>true</ExistsNBuildKitTestSteps>
    </PropertyGroup>
    <PropertyGroup>
        <TestStepsShowHelp>$(MSBuildThisFileDirectory)..\shared.show.help.msbuild</TestStepsShowHelp>

        <TestStepsPrepareWorkspace>$(MSBuildThisFileDirectory)..\shared.prepare.workspace.msbuild</TestStepsPrepareWorkspace>

        <TestStepsPrepareGetIssueIds>$(MSBuildThisFileDirectory)..\shared.prepare.getissueids.msbuild</TestStepsPrepareGetIssueIds>
        <TestStepsPrepareVcsBranch>$(MSBuildThisFileDirectory)..\shared.prepare.vcssetbranch.msbuild</TestStepsPrepareVcsBranch>
        <TestStepsPrepareRestoreNuGet>$(MSBuildThisFileDirectory)..\shared.prepare.nuget.restore.msbuild</TestStepsPrepareRestoreNuGet>
        <TestStepsPrepareGetVersion>$(MSBuildThisFileDirectory)..\shared.prepare.getversion.msbuild</TestStepsPrepareGetVersion>
        <TestStepsPrepareReleaseNotes>$(MSBuildThisFileDirectory)..\shared.prepare.gatherreleasenotes.msbuild</TestStepsPrepareReleaseNotes>
        <TestStepsPrepareVcsInfo>$(MSBuildThisFileDirectory)..\shared.prepare.vcsinfo.msbuild</TestStepsPrepareVcsInfo>

        <TestStepsPrepareCopyFiles>$(MSBuildThisFileDirectory)..\shared.prepare.copy.msbuild</uildStepsPrepareCopyFiles>

        <TestStepsPrepareGenerateFiles>$(MSBuildThisFileDirectory)test.prepare.generatefiles.msbuild</TestStepsPrepareGenerateFiles>

        <TestStepsIntegrationPester>$(MSBuildThisFileDirectory)test.integration.pester.msbuild</TestStepsIntegrationPester>
    </PropertyGroup>
    <ItemGroup>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(TestStepsPrepareWorkspace)'))">
            <Description>
                Clears the existing build artifacts from the workspace and creates the required directories. Clearing the existing build artifacts is only executed if the $(ShouldClean) property is set to 'true'.
            </Description>
            <Id>TestStepsPrepareWorkspace</Id>
            <Name>Test - prepare workspace</Name>
            <Path>$(TestStepsPrepareWorkspace)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(TestStepsBuildTargetsAssembly)'))">
            <Description>
                Builds Visual Studio projects that contain MsBuild Tasks. Separate from building the standard Visual Studio solutions so that it is possible to build MsBuild tasks that will be used in the build process.
            </Description>
            <Id>TestStepsBuildTargetsAssembly</Id>
            <Name>Test - compile MsBuild task assembly</Name>
            <Path>$(TestStepsBuildTargetsAssembly)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(TestStepsGenerateTargetsFile)'))">
            <Description>
                Generates a targets file for use with an MsBuild tasks assembly.
            </Description>
            <Id>TestStepsGenerateTargetsFile</Id>
            <Name>Test - generate MsBuild targets file</Name>
            <Path>$(TestStepsGenerateTargetsFile)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(TestStepsPrepareGetIssueIds)'))">
            <Description>
                Gets the issue IDs from the commits on the current branch and stores them in a temp file for later use.
            </Description>
            <Id>TestStepsPrepareGetIssueIds</Id>
            <Name>Test - get issue IDs</Name>
            <Path>$(TestStepsPrepareGetIssueIds)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(TestStepsPrepareVcsBranch)'))">
            <Description>
                When building from a GIT repository on a build server ensures that the current checkout has the same branch name as the remote tracking branch.
            </Description>
            <Id>TestStepsPrepareVcsBranch</Id>
            <Name>Test - prepare VCS state</Name>
            <Path>$(TestStepsPrepareVcsBranch)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(TestStepsPrepareRestoreNuGet)'))">
            <Description>
                Restores the NuGet packages as specified in the '$(DirWorkspace)\packages.config' file. Additionally also restores the NuGet packages as specified in the nBuildKit specific 'packages.config' files.
            </Description>
            <Id>TestStepsPrepareRestoreNuGet</Id>
            <Name>Test - restore NuGet packages</Name>
            <Path>$(TestStepsPrepareRestoreNuGet)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(TestStepsPrepareGetVersion)'))">
            <Description>
                Gathers version information and stores it in a temporary file for use by the rest of the test process.
            </Description>
            <Id>TestStepsPrepareGetVersion</Id>
            <Name>Test - gather version numbers</Name>
            <Path>$(TestStepsPrepareGetVersion)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(TestStepsPrepareReleaseNotes)'))">
            <Description>
                Gathers the release notes and stores them for later use during the test process.
            </Description>
            <Id>TestStepsPrepareReleaseNotes</Id>
            <Name>Test - gather release notes</Name>
            <Path>$(TestStepsPrepareReleaseNotes)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(TestStepsPrepareVcsInfo)'))">
            <Description>
                Stores the Version Control System (VCS) information in a file for later use. Currently supported version control systems is GIT
            </Description>
            <Id>TestStepsPrepareVcsInfo</Id>
            <Name>Test - gather VCS information</Name>
            <Path>$(TestStepsPrepareVcsInfo)</Path>
        </AvailableStepMetadata>
         <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(TestStepsPrepareCopyFiles)'))">
            <Description>
                Copies one or more files from the file system or from a NuGet package.
            </Description>
            <Id>TestStepsPrepareCopyFiles</Id>
            <Name>Test - copy files</Name>
            <Path>$(TestStepsPrepareCopyFiles)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(TestStepsPrepareGenerateFiles)'))">
            <Description>
                Generates one or more files from a set of template files.
            </Description>
            <Id>TestStepsPrepareGenerateFiles</Id>
            <Name>Test - generate files</Name>
            <Path>$(TestStepsPrepareGenerateFiles)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(TestStepsIntegrationPester)'))">
            <Description>
                Runs Pester on a specified test script file.
            </Description>
            <Id>TestStepsIntegrationPester</Id>
            <Name>Test - execute Pester tests</Name>
            <Path>$(TestStepsIntegrationPester)</Path>
        </AvailableStepMetadata>
    </ItemGroup>
</Project>
