<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="nBuildKit_Shared_Prepare_Copy_FromUrl"
    ToolsVersion="14.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <ExistsSharedPrepareCopyHttp>true</ExistsSharedPrepareCopyHttp>
    </PropertyGroup>
    <PropertyGroup>
        <ShouldLoadHttpFilesToCopy>true</ShouldLoadHttpFilesToCopy>
    </PropertyGroup>

    <Import
        Condition="Exists('$(FileImports)') AND '$(ExistsFileImports)' != 'true' "
        Project="$(FileImports)" />

    <Target
        Condition=" '@(HttpFilesToCopy)' != '' "
        DependsOnTargets="_nBuildKit_Shared_Prepare_Copy_FromUrl_GetToolPaths"
        Name="nBuildKit_Shared_Prepare_Copy_FromUrl"
        Outputs="%(HttpFilesToCopy.Identity)">

        <PropertyGroup>
            <DestinationPath>%(HttpFilesToCopy.Destination)</DestinationPath>
            <DirTempDestination Condition=" '%(HttpFilesToCopy.Unzip)' == 'false' ">$(DestinationPath)</DirTempDestination>
            <DirTempDestination Condition=" '%(HttpFilesToCopy.Unzip)' == 'true' ">$(DirBuildTemp)</DirTempDestination>
        </PropertyGroup>

        <WebDownload
            Condition=" '%(HttpFilesToCopy.HashFile)' != '' "
            ErrorInformation="@(ErrorInformation)"
            DestinationDirectory="$(DirTempDestination)"
            Password="%(HttpFilesToCopy.Password)"
            Source="%(HttpFilesToCopy.HashFile)"
            UseDefaultCredentials="%(HttpFilesToCopy.UseDefaultCredentials)"
            UserName="%(HttpFilesToCopy.UserName)">
            <Output
                PropertyName="HashFile"
                TaskParameter="OutputPath" />
        </WebDownload>

        <WebDownload
            Condition=" '%(HttpFilesToCopy.SignatureFile)' != '' "
            ErrorInformation="@(ErrorInformation)"
            DestinationDirectory="$(DirTempDestination)"
            Password="%(HttpFilesToCopy.Password)"
            Source="%(HttpFilesToCopy.SignatureFile)"
            UseDefaultCredentials="%(HttpFilesToCopy.UseDefaultCredentials)"
            UserName="%(HttpFilesToCopy.UserName)">
            <Output
                PropertyName="SignatureFile"
                TaskParameter="OutputPath" />
        </WebDownload>

        <WebDownload
            ErrorInformation="@(ErrorInformation)"
            DestinationDirectory="$(DirTempDestination)"
            Password="%(HttpFilesToCopy.Password)"
            Source="%(HttpFilesToCopy.Identity)"
            UseDefaultCredentials="%(HttpFilesToCopy.UseDefaultCredentials)"
            UserName="%(HttpFilesToCopy.UserName)">
            <Output
                PropertyName="LocalFilePath"
                TaskParameter="OutputPath" />
        </WebDownload>

        <Exec
            Condition=" '$(HashFile)' != '' AND '$(SignatureFile)' != '' "
            Command="&quot;$(ToolsExternalGpgPath)&quot; --keyserver $(GpgKeyServer) %(HttpFilesToCopy.GpgKey)" />

        <Exec
            Condition=" '$(HashFile)' != '' AND '$(SignatureFile)' != '' "
            Command="&quot;$(ToolsExternalGpgPath)&quot; --verify &quot;$(SignatureFile)&quot; &quot;$(HashFile)&quot;" />

        <ValidateHash
            Algorithm="%(HttpFilesToCopy.HashAlgorithm)"
            Hash="%(HttpFilesToCopy.Hash)"
            HashFile="$(HashFile)"
            Path="%(HttpFilesToCopy.FullPath)" />

        <Unzip
            Condition=" '%(HttpFilesToCopy.Unzip)' == 'true' "
            DestinationDirectory="$(DestinationPath)"
            ErrorInformation="@(ErrorInformation)"
            InputFileName="$(LocalFilePath)" />
    </Target>

    <Target
        Condition="!Exists('$(FileVersionMsBuild)') AND !Exists('$(ScriptGetVersion)')"
        Name="_nBuildKit_Shared_Prepare_Copy_FromUrl_GetToolPaths">
        <NuGetInstall
            Condition=" '$(ToolsExternalGpgPath)' == 'UNDEFINED' "
            ErrorInformation="@(ErrorInformation)"
            ExcludeVersion="$(ShouldRestoreNuGetPackagesWithoutVersionInPath)"
            NuGetExecutablePath="$(ToolsExternalNuGetPath)"
            PackagesDirectory="$(DirPackages)"
            PackageName="Gpg.Nuget"
            PackageVersion="$(ToolsExternalGpgVersion)"
            Sources="@(NuGetSources)"
            WorkingDirectory="$(DirWorkspace)" />
        <SearchPackagesDirectoryForToolPath
            Condition=" '$(ToolsExternalGpgPath)' == 'UNDEFINED' "
            ErrorInformation="@(ErrorInformation)"
            FileToLocate="GitVersion.exe"
            PackagesDirectory="$(DirPackages)">
            <Output
                PropertyName="ToolsExternalGpgPath"
                TaskParameter="Path" />
        </SearchPackagesDirectoryForToolPath>
        <GetToolFullPath
            Condition=" '$(ToolsExternalGpgPath)' != 'UNDEFINED' "
            ErrorInformation="@(ErrorInformation)"
            Tool="$(ToolsExternalGpgPath)">
            <Output
                PropertyName="ToolsExternalGpgPath"
                TaskParameter="Path" />
        </GetToolFullPath>
        <Message
            Condition="Exists('$(ToolsExternalGpgPath)') "
            Importance="low"
            Text="The GPG executable was found at: $(ToolsExternalGpgPath)" />

        <Error
            Code="$(NBuildKitErrorCodeToolFileNotFound)"
            Condition="!Exists('$(ToolsExternalGpgPath)') "
            HelpKeyword="$(NBuildKitErrorIdToolFileNotFound)"
            Text="Could not locate the GPG executable path. Cannot verify signatures." />
    </Target>
 </Project>
