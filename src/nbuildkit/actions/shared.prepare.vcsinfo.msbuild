<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="nBuildKit_Shared_Prepare_VcsInfo_Run"
    ToolsVersion="14.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsSharedPrepareVcsInfo>true</ExistsSharedPrepareVcsInfo>
    </PropertyGroup>
    <PropertyGroup>
        <ShouldLoadTemplateTokens>true</ShouldLoadTemplateTokens>
        <ShouldLoadTemplateVersion>true</ShouldLoadTemplateVersion>
        <ShouldLoadSystemTemplateVersion>true</ShouldLoadSystemTemplateVersion>
    </PropertyGroup>

    <Import
        Condition="Exists('$(FileImports)') AND '$(ExistsFileImports)' != 'true' "
        Project="$(FileImports)" />

    <Target
        Condition="!Exists('$(FileVcsInfo)')"
        Name="nBuildKit_Shared_Prepare_VcsInfo_Run">
        <CallTarget Targets="_nBuildKit_Shared_Prepare_VcsInfo_GatherGitInfo" />
        <CallTarget Targets="_nBuildKit_Shared_Prepare_VcsInfo_GatherTfsInfo" />

        <Copy
            DestinationFolder="$(DirTemplateGenerators)"
            SkipUnchangedFiles="true"
            SourceFiles="$(MSBuildThisFileDirectory)shared.generatetoken.vcsinfo.msbuild" />

        <PropertyGroup>
            <Locations>
                DirNBuildKitMsBuildActions=$(DirNBuildKitMsBuildActions);
                DirNBuildKitMsBuildTasks=$(DirNBuildKitMsBuildTasks);
                DirWorkspace=$(DirWorkspace);
                DirUserSettings=$(DirUserSettings);
                DirUserConfiguration=$(DirUserConfiguration);
            </Locations>
            <Files>
                FileImports=$(FileImports);
            </Files>
            <DefaultProperties>
            </DefaultProperties>
        </PropertyGroup>
        <InvokeStandaloneMsBuild
            Condition="Exists('$(MSBuildThisFileDirectory)shared.templatetokens.msbuild')"
            ErrorInformation="@(ErrorInformation)"
            Projects="$(MSBuildThisFileDirectory)shared.templatetokens.msbuild"
            Properties="$(Locations);$(Files);$(DefaultProperties)"
            RunEachTargetSeparately="True"
            SkipNonexistentProjects="False"
            StopOnFirstFailure="False"
            Targets="nBuildKit_Shared_TemplateTokens_Generate"
            TemporaryDirectory="$(DirBuildTemp)"
            ToolsVersion="$(MSBuildToolsVersion)"
            WorkingDirectory="$(DirWorkspace)">
        </InvokeStandaloneMsBuild>
    </Target>

    <Target
        Condition=" '$(IsGitWorkspace)' == 'true' "
        Name="_nBuildKit_Shared_Prepare_VcsInfo_GatherGitInfo">
        <Error
            Code="$(NBuildKitErrorCodeGitNotFound)"
            Condition=" '$(ToolsExternalGitPath)' == '' "
            HelpKeyword="$(NBuildKitErrorIdGitNotFound)"
            Text="No GIT executable defined. Will not be able to gather the VCS information." />

        <CreateProperty Value="$([System.IO.Path]::GetDirectoryName('$(FileVcsInfo)'))">
            <Output
                PropertyName="DirToCreate"
                TaskParameter="Value" />
        </CreateProperty>
        <MakeDir
            Condition="!Exists('$(DirToCreate)') "
            Directories="$(DirToCreate)" />

        <GitCurrentBranch
            ErrorInformation="@(ErrorInformation)"
            GitExecutablePath="$(ToolsExternalGitPath)"
            Workspace="$(DirWorkspace)">
            <Output
                PropertyName="GitCurrentBranch"
                TaskParameter="CurrentBranch" />
        </GitCurrentBranch>
        <GitCurrentRevision
            ErrorInformation="@(ErrorInformation)"
            GitExecutablePath="$(ToolsExternalGitPath)"
            Workspace="$(DirWorkspace)">
            <Output
                PropertyName="GitCurrentRevision"
                TaskParameter="CurrentRevision" />
        </GitCurrentRevision>

        <ItemGroup>
            <GitInfoItems Include="{" />
            <GitInfoItems Include="    &quot;revision&quot;: &quot;$(GitCurrentRevision)&quot;," />
            <GitInfoItems Include="    &quot;branch&quot;: &quot;$(GitCurrentBranch)&quot;" />
            <GitInfoItems Include="}" />
        </ItemGroup>

        <WriteLinesToFile
            File="$(FileVcsInfo)"
            Lines="@(GitInfoItems)"
            Overwrite="true" />
    </Target>

    <Target
        Condition=" '$(IsTfsWorkspace)' == 'true' "
        Name="_nBuildKit_Shared_Prepare_VcsInfo_GatherTfsInfo">
        <Error
            Code="$(NBuildKitErrorCodeTfsNotFound)"
            Condition=" '$(ToolsExternalTfsPath)' == '' "
            HelpKeyword="$(NBuildKitErrorIdTfsNotFound)"
            Text="No TF executable defined. Will not be able to gather the VCS information for the TFS workspace." />

        <CreateProperty Value="$([System.IO.Path]::GetDirectoryName('$(FileVcsInfo)'))">
            <Output
                PropertyName="DirToCreate"
                TaskParameter="Value" />
        </CreateProperty>
        <MakeDir
            Condition="!Exists('$(DirToCreate)') "
            Directories="$(DirToCreate)" />

        <TfsCurrentBranch
            ErrorInformation="@(ErrorInformation)"
            TfExecutablePath="$(ToolsExternalTfsPath)"
            Workspace="$(DirWorkspace)">
            <Output
                PropertyName="TfsCurrentBranch"
                TaskParameter="CurrentBranch" />
        </TfsCurrentBranch>
        <TfsCurrentChangeSet
            ErrorInformation="@(ErrorInformation)"
            TfExecutablePath="$(ToolsExternalTfsPath)"
            Workspace="$(DirWorkspace)">
            <Output
                PropertyName="TfsCurrentRevision"
                TaskParameter="CurrentRevision" />
        </TfsCurrentChangeSet>

        <ItemGroup>
            <TfsInfoItems Include="{" />
            <TfsInfoItems Include="    &quot;revision&quot;: &quot;$(TfsCurrentRevision)&quot;," />
            <TfsInfoItems Include="    &quot;branch&quot;: &quot;$(TfsCurrentBranch)&quot;" />
            <TfsInfoItems Include="}" />
        </ItemGroup>

        <WriteLinesToFile
            File="$(FileVcsInfo)"
            Lines="@(TfsInfoItems)"
            Overwrite="true" />
    </Target>
 </Project>
