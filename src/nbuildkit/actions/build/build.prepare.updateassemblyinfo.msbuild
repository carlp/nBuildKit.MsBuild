<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="nBuildKit_Build_Prepare_UpdateAssemblyInfo_Run"
    ToolsVersion="14.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsBuildPrepareGenerateLicenses>true</ExistsBuildPrepareGenerateLicenses>
    </PropertyGroup>

    <Import
        Condition="Exists('$(FileImports)') AND '$(ExistsFileImports)' != 'true' "
        Project="$(FileImports)" />

    <Target
        Name="nBuildKit_Build_Prepare_UpdateAssemblyInfo_Run">
        <CallTarget Targets="_nBuildKit_Build_Prepare_UpdateAssemblyInfo_Update" />
        <CallTarget Targets="_nBuildKit_Build_Prepare_UpdateAssemblyInfo_InternalsVisibleTo" />
    </Target>

    <Target
        Condition=" '@(AssemblyInfoFilesToUpdate)' != '' "
        Name="_nBuildKit_Build_Prepare_UpdateAssemblyInfo_Update"
        Outputs="%(AssemblyInfoFilesToUpdate.Identity)">
        <AddOrUpdateAttributeInCode
            AttributeName="AssemblyVersion"
            Condition=" '$(ShouldGenerateAssemblyVersionInfo)' == 'true' "
            Encoding="UTF-8"
            InputFile="%(AssemblyInfoFilesToUpdate.Identity)"
            Value="&quot;${VersionAssembly}&quot;" />

        <AddOrUpdateAttributeInCode
            AttributeName="AssemblyFileVersion"
            Condition=" '$(ShouldGenerateAssemblyVersionInfo)' == 'true' "
            Encoding="UTF-8"
            InputFile="%(AssemblyInfoFilesToUpdate.Identity)"
            Value="&quot;${VersionAssemblyFile}&quot;" />

        <AddOrUpdateAttributeInCode
            AttributeName="AssemblyInformationalVersion"
            Condition=" '$(ShouldGenerateAssemblyVersionInfo)' == 'true' "
            Encoding="UTF-8"
            InputFile="%(AssemblyInfoFilesToUpdate.Identity)"
            Value="&quot;${VersionProduct}&quot;" />

        <AddOrUpdateAttributeInCode
            AttributeName="AssemblyCompany"
            Condition=" '$(ShouldGenerateAssemblyCompanyInfo)' == 'true' "
            Encoding="UTF-8"
            InputFile="%(AssemblyInfoFilesToUpdate.Identity)"
            Value="&quot;$(CompanyName)&quot;" />

        <AddOrUpdateAttributeInCode
            AttributeName="AssemblyCopyright"
            Condition=" '$(ShouldGenerateAssemblyCompanyInfo)' == 'true' "
            Encoding="UTF-8"
            InputFile="%(AssemblyInfoFilesToUpdate.Identity)"
            Value="&quot;$(CopyrightLong)&quot;" />

        <AddOrUpdateAttributeInCode
            AttributeName="AssemblyConfiguration"
            Condition=" '$(ShouldGenerateAssemblyBuildInfo)' == 'true' "
            Encoding="UTF-8"
            InputFile="%(AssemblyInfoFilesToUpdate.Identity)"
            Value="&quot;$(Configuration)&quot;" />

        <UpdateAttributeInCode
            AttributeName="AssemblyBuildTime"
            Condition=" '$(ShouldGenerateAssemblyBuildInfo)' == 'true' "
            Encoding="UTF-8"
            InputFile="%(AssemblyInfoFilesToUpdate.Identity)"
            Value="buildTime: &quot;${Now}&quot;" />

        <UpdateAttributeInCode
            AttributeName="AssemblyBuildInformation"
            Condition=" '$(ShouldGenerateAssemblyBuildInfo)' == 'true' "
            Encoding="UTF-8"
            InputFile="%(AssemblyInfoFilesToUpdate.Identity)"
            Value="buildNumber: ${VersionBuild}, versionControlInformation: &quot;${VcsRevision}&quot;" />

        <TemplateFile
            Condition="Exists('%(AssemblyInfoFilesToUpdate.FullPath)') AND ('$(ShouldGenerateAssemblyVersionInfo)' == 'true' OR '$(ShouldGenerateAssemblyCompanyInfo)' == 'true' OR '$(ShouldGenerateAssemblyBuildInfo)' == 'true') "
            Encoding="UTF-8"
            OutputFileName="%(AssemblyInfoFilesToUpdate.Identity)"
            Template="%(AssemblyInfoFilesToUpdate.Identity)"
            Tokens="@(TemplateTokens)" />
    </Target>

    <Target
        Condition="  '@(AssemblyInfoFilesToUpdate)' != '' AND '@(InternalsVisibleTo)' != '' "
        Name="_nBuildKit_Build_Prepare_UpdateAssemblyInfo_InternalsVisibleTo"
        Outputs="%(AssemblyInfoFilesToUpdate.Identity)">
        <CreateProperty Value="$([System.IO.Path]::GetDirectoryName('%(AssemblyInfoFilesToUpdate.Identity)'))">
            <Output
                PropertyName="AssemblyInfoDirectory"
                TaskParameter="Value" />
        </CreateProperty>
        <ItemGroup>
            <PossibleProjectFiles
                Condition="!$(AssemblyInfoDirectory.EndsWith('Properties'))"
                Include="$(AssemblyInfoDirectory)\**\*.csproj" />
            <PossibleProjectFiles
                Condition="$(AssemblyInfoDirectory.EndsWith('Properties'))"
                Include="$(AssemblyInfoDirectory)\..\**\*.csproj" />
            <PossibleProjectFiles
                Condition="!$(AssemblyInfoDirectory.EndsWith('My Project'))"
                Include="$(AssemblyInfoDirectory)\**\*.vbproj" />
            <PossibleProjectFiles
                Condition="$(AssemblyInfoDirectory.EndsWith('My Project'))"
                Include="$(AssemblyInfoDirectory)\..\**\*.vbproj" />
        </ItemGroup>
        <Error
            Condition="$([System.String]::new('@(PossibleProjectFiles)').Contains(';'))"
            Text="Found multiple project files that may be referencing the AssemblyInfo file at: %(AssemblyInfoFilesToUpdate.Identity). The project files are: @(PossibleProjectFiles)" />

        <CreateProperty
            Condition=" '@(PossibleProjectFiles)' != '' AND !$([System.String]::new('@(PossibleProjectFiles)').Contains(';')) "
            Value="%(PossibleProjectFiles.FullPath)">
            <Output
                PropertyName="ProjectFile"
                TaskParameter="Value" />
        </CreateProperty>
        <Error
            Condition="!Exists('$(ProjectFile)')"
            Text="Did not find a project file that references the AssemblyInfo file at: %(AssemblyInfoFilesToUpdate.Identity)" />
        <Message
            Condition="Exists('$(ProjectFile)')"
            Text="The project file at $(ProjectFile) is referencing the AssemblyInfo file at: %(AssemblyInfoFilesToUpdate.Identity). Using the project file to determine the assembly name." />

        <XmlPeek
            Condition="Exists('$(ProjectFile)')"
            Namespaces="&lt;Namespace Prefix='x' Uri='http://schemas.microsoft.com/developer/msbuild/2003' /&gt;"
            Query="/x:Project/x:PropertyGroup/x:AssemblyName/text()"
            XmlInputPath="$(ProjectFile)">
            <Output
                ItemName="AssemblyNames"
                TaskParameter="Result" />
        </XmlPeek>
        <CreateProperty
            Condition=" '@(AssemblyNames)' != '' "
            Value="%(AssemblyNames.Identity)">
            <Output
                PropertyName="AssemblyName"
                TaskParameter="Value" />
        </CreateProperty>

        <PropertyGroup>
            <InternalsVisibleToForSignedAssembliesTemplate Condition=" '%(AssemblyInfoFilesToUpdate.Extension)' == '.cs' ">[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(&quot;${AssemblyName}, PublicKey=${Key}&quot;)]</InternalsVisibleToForSignedAssembliesTemplate>
            <InternalsVisibleToForUnsignedAssembliesTemplate Condition=" '%(AssemblyInfoFilesToUpdate.Extension)' == '.cs' ">[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(&quot;${AssemblyName}&quot;)]</InternalsVisibleToForUnsignedAssembliesTemplate>
            <InternalsVisibleToForSignedAssembliesTemplate Condition=" '%(AssemblyInfoFilesToUpdate.Extension)' == '.vb' ">&lt;Assembly: System.Runtime.CompilerServices.InternalsVisibleTo(&quot;${AssemblyName}, PublicKey=${Key}&quot;)&gt;</InternalsVisibleToForSignedAssembliesTemplate>
            <InternalsVisibleToForUnsignedAssembliesTemplate Condition=" '%(AssemblyInfoFilesToUpdate.Extension)' == '.vb' ">&lt;Assembly: System.Runtime.CompilerServices.InternalsVisibleTo(&quot;${AssemblyName}&quot;)&gt;</InternalsVisibleToForUnsignedAssembliesTemplate>
        </PropertyGroup>
        <GenerateInternalsVisibleToAttributes
            AttributeTemplateForSignedAssemblies="$(InternalsVisibleToForSignedAssembliesTemplate)"
            AttributeTemplateForUnsignedAssemblies="$(InternalsVisibleToForUnsignedAssembliesTemplate)"
            Condition=" '@(InternalsVisibleTo)' != '' AND '$(AssemblyName)' != '' "
            Items="@(InternalsVisibleTo)"
            PackagesDirectory="$(DirPackages)"
            Project="$(AssemblyName)"
            SnExe="$(ToolsExternalSnPath)"
            TemporaryDirectory="$(DirBuildTemp)">
            <Output
                PropertyName="InternalsVisibleToAttributes"
                TaskParameter="Result" />
        </GenerateInternalsVisibleToAttributes>

        <CreateItem
            Condition=" '$(InternalsVisibletoCompilerConstants)' != '' AND '$(InternalsVisibleToAttributes)' != '' "
            Include="$(InternalsVisibletoCompilerConstants.Split(';'))">
            <Output
                ItemName="CompilerConstants"
                TaskParameter="Include" />
        </CreateItem>

        <CreateProperty
            Condition=" '@(CompilerConstants)' != '' "
            Value="@(CompilerConstants->'%(Identity)', ' || ')">
            <Output
                PropertyName="CompilerConstantsCombined"
                TaskParameter="Value" />
        </CreateProperty>
        <ItemGroup Condition=" '$(InternalsVisibleToAttributes)' != '' ">
            <InternalsVisibleToLines
                Condition=" '$(CompilerConstantsCombined)' != '' AND '%(AssemblyInfoFilesToUpdate.Extension)' == '.cs' "
                Include="#if $(CompilerConstantsCombined)" />
            <InternalsVisibleToLines
                Condition=" '$(CompilerConstantsCombined)' != '' AND '%(AssemblyInfoFilesToUpdate.Extension)' == '.vb' "
                Include="#If $(CompilerConstantsCombined)" />

            <InternalsVisibleToLines Include="$(InternalsVisibleToAttributes)" />

            <InternalsVisibleToLines
                Condition=" '$(CompilerConstantsCombined)' != '' AND '%(AssemblyInfoFilesToUpdate.Extension)' == '.cs' "
                Include="#endif" />
            <InternalsVisibleToLines
                Condition=" '$(CompilerConstantsCombined)' != '' AND '%(AssemblyInfoFilesToUpdate.Extension)' == '.vb' "
                Include="#End If" />
        </ItemGroup>

        <PropertyGroup>
            <CurrentFileContent>$([System.IO.File]::ReadAllText(%(AssemblyInfoFilesToUpdate.FullPath)))</CurrentFileContent>
            <HasInternalsVisibleToAttributes>$(CurrentFileContent.Contains('assembly: System.Runtime.CompilerServices.InternalsVisibleTo'))</HasInternalsVisibleToAttributes>
        </PropertyGroup>

        <WriteLinesToFile
            File="%(AssemblyInfoFilesToUpdate.FullPath)"
            Lines="@(InternalsVisibleToLines)"
            Overwrite="false"
            Condition=" '$(HasInternalsVisibleToAttributes)' != 'true' " />
    </Target>
 </Project>
