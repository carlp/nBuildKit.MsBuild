<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="nBuildKit_Build_Binaries_Run"
    ToolsVersion="14.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsBuildBinaries>true</ExistsBuildBinaries>
    </PropertyGroup>
    <PropertyGroup>
        <ShouldLoadSolutionsToBuild>true</ShouldLoadSolutionsToBuild>
    </PropertyGroup>

    <Import
        Condition="Exists('$(FileImports)') AND '$(ExistsFileImports)' != 'true' "
        Project="$(FileImports)" />

    <Target
        Name="nBuildKit_Build_Binaries_Run">
        <Error
            Code="$(NBuildKitErrorCodeBuildVisualStudioNoSolutionsDefined)"
            Condition=" '@(SolutionsToBuild)' == '' "
            HelpKeyword="$(NBuildKitErrorIdBuildVisualStudioNoSolutionsDefined)"
            Text="Cannot build the Visual Studio solutions or projects because no solutions or projects were specified." />

        <CallTarget Targets="_nBuildKit_Build_Binaries_Execute" />
    </Target>

    <!--
        Note that MsBuild batches based on the Outputs value, if there are two instances of a single solution (but with different configuration and platform) in
        the list we only run through it once if we don't filter the list down to one item. See here: http://sedodream.com/PermaLink,guid,cab57d7f-9d6e-4358-8491-dc033fb3bacc.aspx
    -->
    <Target
        Condition=" '@(SolutionsToBuild)' != '' "
        Name="nBuildKit_Build_Binaries_Run"
        Outputs="%(SolutionsToBuild.Identity)_%(SolutionsToBuild.Configuration)_%(SolutionsToBuild.Platform)">
        <TemplateText
            ErrorInformation="@(ErrorInformation)"
            Template="%(SolutionsToBuild.FullPath)"
            Tokens="@(TemplateTokens)">
            <Output
                PropertyName="FileSln"
                TaskParameter="Result" />
        </TemplateText>

        <Error
            Code="$(NBuildKitErrorCodeNuGetNotFound)"
            Condition=" '$(ToolsExternalNuGetPath)' == '' "
            HelpKeyword="$(NBuildKitErrorIdNuGetNotFound)"
            Text="No NuGet executable defined. Will not be able to restore the packages." />
        <Error
            Code="$(NBuildKitErrorCodeBuildVisualStudioSolutionPathNotFound)"
            Condition="!Exists('$(FileSln)')"
            HelpKeyword="$(NBuildKitErrorIdBuildVisualStudioSolutionPathNotFound)"
            Text="Expected $(FileSln) to point to a valid path but it does not." />

        <Message
            Importance="normal"
            Text="Building $(FileSln) for targets = %(SolutionsToBuild.Targets) with: Configuration = %(SolutionsToBuild.Configuration) and Platform = %(SolutionsToBuild.Platform) ..." />

        <CreateProperty Value="$([System.IO.Path]::GetExtension('$(FileSln)'))">
            <Output
                PropertyName="FileExtension"
                TaskParameter="Value" />
        </CreateProperty>
        <NuGetRestore
            Condition=" '$(FileExtension)' == '.sln'"
            ErrorInformation="@(ErrorInformation)"
            NuGetExecutablePath="$(ToolsExternalNuGetPath)"
            PackageDirectory="$(DirPackages)"
            PackageFile="$(FileSln)"
            Sources="@(NuGetSources)"
            WorkingDirectory="$(DirWorkspace)" />

        <!-- Make sure we take all the non-essential whitespace and newlines out of the properties -->
        <PropertyGroup>
            <BuildProperties>%(SolutionsToBuild.Properties)</BuildProperties>
            <BuildPlatform>%(SolutionsToBuild.Platform)</BuildPlatform>
        </PropertyGroup>
        <CreateItem Include="$(BuildProperties.Split(';'))">
            <Output
                ItemName="PropertyItems"
                TaskParameter="Include" />
        </CreateItem>
        <PropertyGroup>
            <BuildProperties>@(PropertyItems)</BuildProperties>
        </PropertyGroup>

        <MSBuild
            BuildInParallel="False"
            Projects="$(FileSln)"
            Properties="Configuration=%(SolutionsToBuild.Configuration);Platform=$(BuildPlatform);$(BuildProperties)"
            RebaseOutputs="False"
            RemoveProperties=""
            RunEachTargetSeparately="True"
            SkipNonexistentProjects="False"
            StopOnFirstFailure="False"
            TargetAndPropertyListSeparators=""
            Targets="%(SolutionsToBuild.Targets)"
            ToolsVersion="$(MSBuildToolsVersion)"
            UnloadProjectsOnCompletion="True"
            UseResultsCache="True">
            <Output
                ItemName="GeneratedAssemblies"
                TaskParameter="TargetOutputs" />
        </MSBuild>

        <!-- Move the code analysis logs -->
        <Message Text="Moving the code analysis logs for the build of $([System.IO.Path]::GetFileName('$(FileSln)')) (Configuration = %(SolutionsToBuild.Configuration), Platform = $(BuildPlatform)) to the logs directory" />
        <MakeDir
            Condition="!Exists('$(DirBuildLogs)')"
            Directories="$(DirBuildLogs)" />

        <ItemGroup>
            <LogFiles
                Condition="Exists('%(GeneratedAssemblies.Identity)')"
                Include="$([System.IO.Path]::GetDirectoryName('%(GeneratedAssemblies.Identity)'))\*.CodeAnalysisLog.xml" />
        </ItemGroup>

        <Move
            ContinueOnError="true"
            DestinationFolder="$(DirBuildLogs)"
            OverwriteReadOnlyFiles="true"
            SourceFiles="@(LogFiles)" />

        <!-- Store the results of the compilation -->
        <PropertyGroup>
            <FileGeneratedAssemblies>%(SolutionsToBuild.GeneratedAssembliesFile)</FileGeneratedAssemblies>
        </PropertyGroup>
        <Message
            Condition=" '$(FileGeneratedAssemblies)' != '' "
            Text="Storing the paths of the generated assemblies for the build of $([System.IO.Path]::GetFileName('$(FileSln)')) (Configuration = %(SolutionsToBuild.Configuration), Platform = $(BuildPlatform)) in '$(FileGeneratedAssemblies)'" />
        <Message
            Condition=" '$(FileGeneratedAssemblies)' == '' "
            Text="Not storing the paths of the generated assemblies. No file path was provided." />

        <ItemGroup Condition=" '$(FileGeneratedAssemblies)' != '' ">
            <XmlHeader Include="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;" />
            <XmlHeader Include="&lt;Project xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot; &gt;" />
            <XmlHeader Include="&lt;ItemGroup&gt;" />
        </ItemGroup>
        <WriteLinesToFile
            Condition=" '$(FileGeneratedAssemblies)' != '' "
            File="$(FileGeneratedAssemblies)"
            Lines="@(XmlHeader)"
            Overwrite="true" />

        <WriteLinesToFile
            Condition=" '$(FileGeneratedAssemblies)' != '' "
            File="$(FileGeneratedAssemblies)"
            Lines="@(GeneratedAssemblies -> '&lt;GeneratedAssembly Include=&quot;%(Identity)&quot; &gt; &#xD;&#xA; &lt;OriginatingProject&gt;%(MSBuildSourceProjectFile)&lt;/OriginatingProject&gt; &#xD;&#xA; &lt;InvokedTarget&gt;%(MSBuildSourceTargetName)&lt;/InvokedTarget&gt; &#xD;&#xA; &lt;/GeneratedAssembly&gt;', '&#xD;&#xA;')"
            Overwrite="false" />

        <ItemGroup Condition=" '$(FileGeneratedAssemblies)' != '' ">
            <XmlFooter Include="&lt;/ItemGroup&gt;" />
            <XmlFooter Include="&lt;/Project&gt;" />
        </ItemGroup>
        <WriteLinesToFile
            Condition=" '$(FileGeneratedAssemblies)' != '' "
            File="$(FileGeneratedAssemblies)"
            Lines="@(XmlFooter)"
            Overwrite="false" />
    </Target>
 </Project>
