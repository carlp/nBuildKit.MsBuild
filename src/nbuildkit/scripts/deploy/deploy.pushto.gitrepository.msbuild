<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="nBuildKit_Deploy_PushTo_GitRepository_Run"
    ToolsVersion="11.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsDeployPushToGitRepository>true</ExistsDeployPushToGitRepository>
    </PropertyGroup>

    <Import
        Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importdeploysharedsettings.props') AND '$(ExistsSharedImportDeploySharedSettings)' != 'true' "
        Project="$(DirNBuildKitMsBuildShared)\shared.importdeploysharedsettings.props" />

    <Import
        Condition="Exists('$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild') AND '$(ExistsSharedTemplateTokens)' != 'true' "
        Project="$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild" />

    <Import
        Condition="Exists('$(FileNBuildKitExtensionsImport)') AND '$(ExistsNBuildKitExtensions)' != 'true' "
        Project="$(FileNBuildKitExtensionsImport)" />

    <Target
        DependsOnTargets="_nBuildKit_Deploy_PushTo_GitRepository_DisplayInfo"
        Name="nBuildKit_Deploy_PushTo_GitRepository_Run">
        <CallTarget Targets="_nBuildKit_Deploy_PushTo_GitRepository_Push" />
    </Target>

    <!-- Display info -->
    <Target
        DependsOnTargets="_nBuildKit_Deploy_PushTo_GitRepository_DebugLog"
        Name="_nBuildKit_Deploy_PushTo_GitRepository_DisplayInfo">
        <Message
            Importance="normal"
            Text="Pushing to a GIT repository ..." />
    </Target>

    <Target
        Condition="$(ShouldDisplayDebugLog)"
        Name="_nBuildKit_Deploy_PushTo_GitRepository_DebugLog">
        <Message
            Importance="low"
            Text="Project directory structure:" />
        <Message
            Importance="low"
            Text="The workspace is located at:                                       $(DirWorkspace)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit files is located at:        $(DirNBuildKitMsBuild)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit scripts is located at:      $(DirNBuildKitMsBuildExtensions)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit templates is located at:    $(DirNBuildKitMsBuildTemplates)" />
        <Message
            Importance="low"
            Text=" " />

        <Message
            Importance="low"
            Text="Deploying: %(PushToGitRepositorySpecs.Identity)" />
        <Message
            Importance="low"
            Text=" " />
    </Target>

    <Target
        DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize"
        Name="_nBuildKit_Deploy_PushTo_GitRepository_Push"
        Outputs="%(PushToGitRepositorySpecs.Identity)">
        <CallTarget Targets="_nBuildKit_Deploy_PushTo_GitRepository_ReplaceBuildTemplates" />
        <CallTarget Targets="_nBuildKit_Deploy_PushTo_GitRepository_CopyFiles" />
        <CallTarget Targets="_nBuildKit_Deploy_PushTo_GitRepository_VerifyRepositoryState_GatherData" />
        <CallTarget Targets="_nBuildKit_Deploy_PushTo_GitRepository_VerifyRepositoryState_Origin" />
        <CallTarget Targets="_nBuildKit_Deploy_PushTo_GitRepository_VerifyRepositoryState_Targets" />
        <CallTarget Targets="_nBuildKit_Deploy_PushTo_GitRepository_PushToRepository" />
    </Target>

    <Target
        DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize"
        Name="_nBuildKit_Deploy_PushTo_GitRepository_ReplaceBuildTemplates"
        Outputs="%(PushToGitRepositorySpecs.Identity)">
        <Message
            Importance="low"
            Text="Resolving build templates for: %(PushToGitRepositorySpecs.Identity)" />

        <CreateProperty Value="%(PushToGitRepositorySpecs.Identity)">
            <Output
                PropertyName="FilesToPush"
                TaskParameter="Value" />
        </CreateProperty>
        <TemplateText
            Template="$(FilesToPush)"
            Tokens="@(TemplateTokens)">
            <Output
                PropertyName="FilesToPushIncluded"
                TaskParameter="Result" />
        </TemplateText>

        <CreateProperty Value="%(PushToGitRepositorySpecs.Repository)">
            <Output
                PropertyName="RepositoryToPushTo"
                TaskParameter="Value" />
        </CreateProperty>
        <TemplateText
            Condition=" '$(RepositoryToPushTo)' != '' "
            Template="$(RepositoryToPushTo)"
            Tokens="@(TemplateTokens)">
            <Output
                PropertyName="RepositoryToPushTo"
                TaskParameter="Result" />
        </TemplateText>
    </Target>

    <Target
        DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize;_nBuildKit_Deploy_PushTo_GitRepository_ReplaceBuildTemplates"
        Name="_nBuildKit_Deploy_PushTo_GitRepository_CopyFiles"
        Outputs="%(PushToGitRepositorySpecs.Identity)">
        <!--
            Create the ItemGroup dynamically because creating an ItemGroup in the target with the dynamically
            created properties doesn't work because the wildcards are not always expanded for some reason.
        -->
        <CreateItem Include="$(FilesToPushIncluded.Split(';'))">
            <Output
                ItemName="FilesToPush"
                TaskParameter="Include" />
        </CreateItem>
        <Error
            Condition=" '@(FilesToPush)' == '' AND '$(ShouldExecute)' == 'true' "
            Text="There are no files to be pushed" />

        <PropertyGroup>
            <DirBuildTempCopy>$(DirBuildTemp)\copy</DirBuildTempCopy>
        </PropertyGroup>
        <MakeDir
            Condition="!Exists('$(DirBuildTempCopy)') AND '$(ShouldExecute)' == 'true' "
            Directories="$(DirBuildTempCopy)" />

        <Copy
            Condition=" '@(FilesToPush)' != '' "
            DestinationFolder="$(DirBuildTempCopy)"
            SourceFiles="@(FilesToPush)" />

        <!-- Unzip files -->
        <ItemGroup>
            <FilesToUnzip Include="$(DirBuildTempCopy)\**\*.zip" />
        </ItemGroup>
        <Unzip
            Condition=" '@(FilesToUnzip)' != '' "
            DestinationDirectory="$(DirBuildTemp)\unzip\%(FilesToUnzip.Filename)"
            InputFileName="%(FilesToUnzip.FullPath)" />
        <ItemGroup>
            <FilesToCopy
                Condition=" '@(FilesToUnzip)' != '' "
                Include="$(DirBuildTemp)\unzip\%(FilesToUnzip.Filename)\.git\**\*.*" />
        </ItemGroup>

        <!-- Copy files -->
        <CreateProperty Value="$(RepositoryToPushTo.Substring($(RepositoryToPushTo.LastIndexOf('/'))).TrimStart('/'))">
            <Output
                PropertyName="RepositoryName"
                TaskParameter="Value" />
        </CreateProperty>
        <CreateProperty Value="$(DirBuildTemp)\git\$(RepositoryName)">
            <Output
                PropertyName="DirRepositoryWorkspace"
                TaskParameter="Value" />
        </CreateProperty>
        <Copy
            Condition=" '@(FilesToCopy)' != '' "
            DestinationFiles="@(FilesToCopy->'$(DirRepositoryWorkspace)\.git\%(RecursiveDir)%(Filename)%(Extension)')"
            SourceFiles="@(FilesToCopy)" />

        <Copy
            Condition="Exists('$(DirBuildTemp)\unzip\%(FilesToUnzip.Filename)\vcs.mergeinfo.xml')"
            DestinationFiles="$(FileVcsMergeInfo)"
            SourceFiles="$(DirBuildTemp)\unzip\%(FilesToUnzip.Filename)\vcs.mergeinfo.xml" />
    </Target>

    <Target
        DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize;_nBuildKit_Deploy_PushTo_GitRepository_ReplaceBuildTemplates;_nBuildKit_Deploy_PushTo_GitRepository_CopyFiles"
        Name="_nBuildKit_Deploy_PushTo_GitRepository_VerifyRepositoryState_GatherData"
        Outputs="%(PushToGitRepositorySpecs.Identity)">
        <XmlPeek
            Condition="Exists('$(FileVcsMergeInfo)')"
            Query="//merge/origin/@branch"
            XmlInputPath="$(FileVcsMergeInfo)">
            <Output
                ItemName="OriginBranch"
                TaskParameter="Result" />
        </XmlPeek>
        <Message Text="OriginBranch: @(OriginBranch)" />

        <XmlPeek
            Condition="Exists('$(FileVcsMergeInfo)')"
            Query="//merge/targets/target/@branch"
            XmlInputPath="$(FileVcsMergeInfo)">
            <Output
                ItemName="TargetBranches"
                TaskParameter="Result" />
        </XmlPeek>
        <Message Text="TargetBranches: @(TargetBranches)" />
    </Target>

    <Target
        DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize;_nBuildKit_Deploy_PushTo_GitRepository_ReplaceBuildTemplates;_nBuildKit_Deploy_PushTo_GitRepository_CopyFiles"
        Name="_nBuildKit_Deploy_PushTo_GitRepository_VerifyRepositoryState_Origin"
        Outputs="%(PushToGitRepositorySpecs.Identity)">
        <Message Text="Verifying that there were no changes to the origin branch since the merge ..." />

        <Message Text="Checking out merge target branch: @(OriginBranch) ..." />
        <GitCheckout
            Branch="@(OriginBranch)"
            GitExecutablePath="$(ToolsExternalGitPath)"
            Workspace="$(DirRepositoryWorkspace)" />

        <GitCurrentRevision
            Condition=" '$(ShouldExecute)' == 'true' "
            GitExecutablePath="$(ToolsExternalGitPath)"
            Workspace="$(DirRepositoryWorkspace)">
            <Output
                PropertyName="GitRevNoLocalBranch"
                TaskParameter="CurrentRevision" />
        </GitCurrentRevision>

        <GitCurrentRevision
            Condition=" '$(ShouldExecute)' == 'true' "
            GitExecutablePath="$(ToolsExternalGitPath)"
            RevisionSpec="origin/@(OriginBranch)"
            Workspace="$(DirRepositoryWorkspace)">
            <Output
                PropertyName="GitRevNoServerBranch"
                TaskParameter="CurrentRevision" />
        </GitCurrentRevision>

        <Message Text="For @(OriginBranch): the expected revision is [$(GitRevNoLocalBranch)], the current server revision is [$(GitRevNoServerBranch)]" />
        <Error
            Condition=" '$(GitRevNoLocalBranch)' != '$(GitRevNoServerBranch)' AND '$(ShouldExecute)' == 'true' "
            Text="For @(OriginBranch) the local branch revision [$(GitRevNoLocalBranch)] is not the same as the server branch revision [$(GitRevNoServerBranch)]" />
    </Target>

    <Target
        DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize;_nBuildKit_Deploy_PushTo_GitRepository_ReplaceBuildTemplates;_nBuildKit_Deploy_PushTo_GitRepository_CopyFiles"
        Name="_nBuildKit_Deploy_PushTo_GitRepository_VerifyRepositoryState_Targets"
        Outputs="%(TargetBranches.Identity)">
        <Message Text="Verifying that there were no changes to the target branches since the merge ..." />

        <Message Text="Checking out merge target branch: %(TargetBranches.Identity) ..." />
        <GitCheckout
            Branch="%(TargetBranches.Identity)"
            GitExecutablePath="$(ToolsExternalGitPath)"
            Workspace="$(DirRepositoryWorkspace)" />

        <GitCurrentRevision
            Condition=" '$(ShouldExecute)' == 'true' "
            GitExecutablePath="$(ToolsExternalGitPath)"
            RevisionSpec="HEAD^"
            Workspace="$(DirRepositoryWorkspace)">
            <Output
                PropertyName="GitRevNoLocalBranch"
                TaskParameter="CurrentRevision" />
        </GitCurrentRevision>

        <GitCurrentRevision
            Condition=" '$(ShouldExecute)' == 'true' "
            GitExecutablePath="$(ToolsExternalGitPath)"
            RevisionSpec="origin/%(TargetBranches.Identity)"
            Workspace="$(DirRepositoryWorkspace)">
            <Output
                PropertyName="GitRevNoServerBranch"
                TaskParameter="CurrentRevision" />
        </GitCurrentRevision>
        <Message Text="For %(TargetBranches.Identity): the expected revision is [$(GitRevNoLocalBranch)], the current server revision is [$(GitRevNoServerBranch)]" />
        <Error
            Condition=" '$(GitRevNoLocalBranch)' != '$(GitRevNoServerBranch)' AND '$(ShouldExecute)' == 'true' "
            Text="For %(TargetBranches.Identity) the local branch revision [$(GitRevNoLocalBranch)] is not the same as the server branch revision [$(GitRevNoServerBranch)]" />
    </Target>

    <Target
        DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize;_nBuildKit_Deploy_PushTo_GitRepository_ReplaceBuildTemplates;_nBuildKit_Deploy_PushTo_GitRepository_CopyFiles"
        Name="_nBuildKit_Deploy_PushTo_GitRepository_PushToRepository"
        Outputs="%(PushToGitRepositorySpecs.Identity)">
        <Message Text="Pushing changes from $(FilesToPushIncluded) back to the origin ..." />
        <GitPush
            Condition=" '$(RepositoryToPushTo)' != '' "
            GitExecutablePath="$(ToolsExternalGitPath)"
            Tags="true"
            Workspace="$(DirRepositoryWorkspace)" />
    </Target>
</Project>