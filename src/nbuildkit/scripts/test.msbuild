<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="nBuildKit_Test_Run"
    ToolsVersion="11.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <!-- Note the current script is not meant to be imported! -->
        <ExistsTest>true</ExistsTest>

        <!-- The full path to the location of the scripts -->
        <DirNBuildKitMsBuild Condition=" '$(DirNBuildKitMsBuild)' == '' ">$(MSBuildProjectDirectory)</DirNBuildKitMsBuild>
        <DirNBuildKitMsBuildShared Condition=" '$(DirNBuildKitMsBuildShared)' == '' ">$(MSBuildProjectDirectory)</DirNBuildKitMsBuildShared>
        <DirNBuildKitMsBuildExtensions Condition=" '$(DirNBuildKitMsBuildExtensions)' == '' ">$(MSBuildProjectDirectory)\extensions</DirNBuildKitMsBuildExtensions>
        <DirNBuildKitMsBuildTemplates Condition=" '$(DirNBuildKitMsBuildTemplates)' == '' ">$(MSBuildProjectDirectory)\templates</DirNBuildKitMsBuildTemplates>

        <!-- Don't load the template tokens, this script doesn't need them -->
        <LoadTemplateTokens>false</LoadTemplateTokens>
    </PropertyGroup>

    <Import
        Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importtestsharedsettings.props') AND '$(ExistsSharedImportTestSharedSettings)' != 'true' "
        Project="$(DirNBuildKitMsBuildShared)\shared.importtestsharedsettings.props" />

    <!-- Default values for all the properties in case they were not overriden -->
    <PropertyGroup>
        <DefaultPropertyDirectories>
            DirWorkspace=$(DirWorkspace);
            DirUserSettings=$(DirUserSettings);
        </DefaultPropertyDirectories>
        <DefaultProperties>
            NBuildKitVersion=$(NBuildKitVersion)
        </DefaultProperties>
    </PropertyGroup>

    <Target
        DependsOnTargets="_nBuildKit_Test_DisplayInfo"
        Name="nBuildKit_Test_Run">
        <!-- Execute all the test steps in the given order -->
        <CallTarget Targets="_nBuildKit_Test_Execute" />
    </Target>

    <Target
        DependsOnTargets="_nBuildKit_Test_DebugLog"
        Name="_nBuildKit_Test_DisplayInfo">
        <Message
            Importance="normal"
            Text="Testing ..." />
    </Target>

    <Target
        Condition="$(ShouldDisplayDebugLog)"
        Name="_nBuildKit_Test_DebugLog">
        <!-- Display the targets that will be executed -->
        <Message
            Condition=" '@(TestStepsToExecute)' != ''"
            Importance="low"
            Text="Executing targets: @(TestStepsToExecute->'%(identity)', '; ')" />
        <Message
            Condition=" '@(TestStepsToExecute)' == ''"
            Importance="low"
            Text="Executing targets: NONE" />

        <Message
            Importance="low"
            Text=" " />

        <!-- Display the known directories -->
        <Message
            Importance="low"
            Text="Project directory structure:" />
        <Message
            Importance="low"
            Text="The workspace is located at:                                       $(DirWorkspace)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit files is located at:        $(DirNBuildKitMsBuild)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit scripts is located at:      $(DirNBuildKitMsBuildExtensions)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit templates is located at:    $(DirNBuildKitMsBuildTemplates)" />
        <Message
            Importance="low"
            Text=" " />
    </Target>

    <Target
        Condition="!Exists('$(FileNBuildKitExtensionsAssembly)')"
        Name="_nBuildKit_Test_Bootstrap">

        <MSBuild
            BuildInParallel="False"
            Projects="$(MSBuildThisFileDirectory)shared.bootstrap.build.tasks.msbuild"
            Properties="$(DefaultPropertyDirectories);$(DefaultProperties);$(DefaultPathProperties)"
            RebaseOutputs="False"
            RemoveProperties=""
            RunEachTargetSeparately="True"
            SkipNonexistentProjects="False"
            StopOnFirstFailure="True"
            TargetAndPropertyListSeparators=""
            Targets=""
            ToolsVersion="$(MSBuildToolsVersion)"
            UnloadProjectsOnCompletion="True"
            UseResultsCache="True" >
        </MSBuild>

        <MSBuild
            BuildInParallel="False"
            Projects="$(MSBuildThisFileDirectory)shared.bootstrap.generate.targetsfile.msbuild"
            Properties="$(DefaultPropertyDirectories);$(DefaultProperties);$(DefaultPathProperties)"
            RebaseOutputs="False"
            RemoveProperties=""
            RunEachTargetSeparately="True"
            SkipNonexistentProjects="False"
            StopOnFirstFailure="True"
            TargetAndPropertyListSeparators=""
            Targets=""
            ToolsVersion="$(MSBuildToolsVersion)"
            UnloadProjectsOnCompletion="True"
            UseResultsCache="True">
        </MSBuild>
    </Target>

    <UsingTask TaskName="NBuildKit.MsBuild.Tasks.InvokeSteps" AssemblyFile="$(FileNBuildKitExtensionsAssembly)" />
    <Target
        Condition=" '@(TestStepsToExecute)' != ''"
        DependsOnTargets="_nBuildKit_Test_Bootstrap"
        Name="_nBuildKit_Test_Execute">

        <CreateItem Include="$(GroupsToExecute.Replace(',', ';').ToLower().Split(';'))">
            <Output
                ItemName="ExecutionGroupsFromUser"
                TaskParameter="Include" />
        </CreateItem>

        <InvokeSteps
            FailOnPreStepFailure="$(FailTestOnPreStepFailure)"
            FailOnPostStepFailure="$(FailTestOnPostStepFailure)"
            FailureSteps="@(TestFailureStepsToExecute)"
            GroupsToExecute="@(ExecutionGroupsFromUser)"
            PreSteps="@(TestPreStepsToExecute)"
            PostSteps="@(TestPostStepsToExecute)"
            Properties="$(DefaultPropertyDirectories);$(DefaultProperties);$(DefaultPathProperties)"
            Steps="@(TestStepsToExecute)"
            StepMetadata="@(AvailableStepMetadata)"
            StopOnFirstFailure="true"
            StopOnPreStepFailure="$(StopTestOnPreStepFailure)"
            StopOnPostStepFailure="$(StopTestOnPostStepFailure)"
            ToolsVersion="$(MSBuildToolsVersion)" />
    </Target>
</Project>
