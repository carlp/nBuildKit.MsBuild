<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="nBuildKit_Deploy_Run"
    ToolsVersion="11.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <!-- Note the current script is not meant to be imported! -->
        <ExistsDeploy>true</ExistsDeploy>

        <!-- The full path to the location of the scripts -->
        <DirNBuildKitMsBuild Condition=" '$(DirNBuildKitMsBuild)' == '' ">$(MSBuildProjectDirectory)</DirNBuildKitMsBuild>
        <DirNBuildKitMsBuildShared Condition=" '$(DirNBuildKitMsBuildShared)' == '' ">$(MSBuildProjectDirectory)</DirNBuildKitMsBuildShared>
        <DirNBuildKitMsBuildExtensions Condition=" '$(DirNBuildKitMsBuildExtensions)' == '' ">$(MSBuildProjectDirectory)\extensions</DirNBuildKitMsBuildExtensions>
        <DirNBuildKitMsBuildTemplates Condition=" '$(DirNBuildKitMsBuildTemplates)' == '' ">$(MSBuildProjectDirectory)\templates</DirNBuildKitMsBuildTemplates>
    </PropertyGroup>

    <Import
        Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importdeploysharedsettings.props') AND '$(ExistsSharedImportDeploySharedSettings)' != 'true' "
        Project="$(DirNBuildKitMsBuildShared)\shared.importdeploysharedsettings.props" />

    <Import
        Condition="Exists('$(DirNBuildKitMsBuildExtensions)\IsInCollection.msbuild') AND '$(ExistsExtensionsIsInCollection)' != 'true' "
        Project="$(DirNBuildKitMsBuildExtensions)\IsInCollection.msbuild" />

    <!-- Default values for all the properties in case they were not overriden -->
    <PropertyGroup>
        <DefaultPropertyDirectories>
            DirWorkspace=$(DirWorkspace);
            DirUserSettings=$(DirUserSettings);
        </DefaultPropertyDirectories>
        <DefaultProperties>
            NBuildKitVersion=$(NBuildKitVersion)
        </DefaultProperties>
    </PropertyGroup>

    <Target
        DependsOnTargets="_nBuildKit_Deploy_DisplayInfo;_nBuildKit_Deploy_Execute"
        Name="nBuildKit_Deploy_Run">
    </Target>

    <Target
        DependsOnTargets="_nBuildKit_Deploy_DebugLog"
        Name="_nBuildKit_Deploy_DisplayInfo">
        <Message
            Importance="normal"
            Text="Deploying ..." />
    </Target>

    <Target
        Condition="$(ShouldDisplayDebugLog)"
        Name="_nBuildKit_Deploy_DebugLog">
        <!-- Display the targets that will be executed -->
        <Message
            Condition=" '@(DeployTasksToExecute)' != ''"
            Importance="low"
            Text="Executing targets: @(BuildTasksToExecute->'%(identity)', '; ')" />
        <Message
            Condition=" '@(DeployTasksToExecute)' == '' "
            Importance="low"
            Text="Executing targets: NONE" />
        <Message
            Importance="low"
            Text=" " />

        <!-- Display the known directories -->
        <Message
            Importance="low"
            Text="Project directory structure:" />
        <Message
            Importance="low"
            Text="The directory containing the local template files is located at:   $(DirTemplates)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit files is located at:        $(DirNBuildKitMsBuild)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit scripts is located at:      $(DirNBuildKitMsBuildExtensions)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit templates is located at:    $(DirNBuildKitMsBuildTemplates)" />
    </Target>

    <PropertyGroup>
        <DirMsBuildScripts>$(MSBuildProjectDirectory)</DirMsBuildScripts>
    </PropertyGroup>

    <Target
        Condition=" '@(DeployStepsToExecute)' != ''"
        Name="_nBuildKit_Deploy_Execute"
        Outputs="%(DeployStepsToExecute.Identity)">

        <CreateItem Include="$(GroupsToExecute.Replace(',', ';').ToLower().Split(';'))">
            <Output
                ItemName="ExecutionGroupsFromUser"
                TaskParameter="Include" />
        </CreateItem>

        <CreateProperty Value="%(DeployStepsToExecute.Groups)">
            <Output
                PropertyName="DeployStepGroups"
                TaskParameter="Value" />
        </CreateProperty>
        <CreateItem Include="$(DeployStepGroups.ToLower().Split(';'))">
            <Output
                ItemName="ExecutionGroupsForStep"
                TaskParameter="Include" />
        </CreateItem>
        <IsInCollection
            Collection="@(ExecutionGroupsFromUser)"
            Items="@(ExecutionGroupsForStep)">
            <Output
                PropertyName="ShouldExecuteStep"
                TaskParameter="IsInList" />
        </IsInCollection>

        <CreateItem Include="all">
            <Output
                ItemName="ExecutionGroupsForAllSteps"
                TaskParameter="Include" />
        </CreateItem>
        <IsInCollection
            Collection="@(ExecutionGroupsForAllSteps)"
            Items="@(ExecutionGroupsFromUser)">
            <Output
                PropertyName="ShouldExecuteAllSteps"
                TaskParameter="IsInList" />
        </IsInCollection>

        <CreateProperty Value="false">
            <Output
                PropertyName="ShouldExecute"
                TaskParameter="Value" />
        </CreateProperty>
        <CreateProperty
            Condition="$(ShouldExecuteStep.ToLower()) == 'true' OR $(ShouldExecuteAllSteps.ToLower()) == 'true' OR ( '$(DeployStepGroups)' == '' AND '$(GroupsToExecute.ToLower())' == 'all')"
            Value="true">
            <Output
                PropertyName="ShouldExecute"
                TaskParameter="Value" />
        </CreateProperty>

        <Message
            Condition=" '$(ShouldExecute)' != 'true' "
            Importance="normal"
            Text="Skipping %(DeployStepsToExecute.Identity)." />
        <Message
            Condition=" $(ShouldExecuteStep.ToLower()) != 'true' "
            Importance="low"
            Text="Step not included in execution group list." />
        <Message
            Condition=" $(ShouldExecuteAllSteps.ToLower()) != 'true' "
            Importance="low"
            Text="'All' execution group not included in group list." />
        <Message
            Condition=" '@(ExecutionGroupsForStep)' == '' AND '$(GroupsToExecute.ToLower())' != 'all' "
            Importance="low"
            Text="Execution group list is empty and 'All' execution group is not included in group list." />

        <Message
            Condition=" '$(ShouldExecute)' == 'true' "
            Importance="normal"
            Text="Executing %(DeployStepsToExecute.Identity)" />

        <MSBuild
            BuildInParallel="False"
            Projects="%(DeployStepsToExecute.Identity)"
            Properties="$(DefaultPropertyDirectories);$(DefaultProperties);$(DefaultPathProperties);%(DeployStepsToExecute.Properties)"
            RebaseOutputs="False"
            RemoveProperties=""
            RunEachTargetSeparately="True"
            SkipNonexistentProjects="False"
            StopOnFirstFailure="False"
            TargetAndPropertyListSeparators=""
            Targets=""
            ToolsVersion="$(MSBuildToolsVersion)"
            UnloadProjectsOnCompletion="True"
            UseResultsCache="True"
            Condition=" $(ShouldExecute) == 'true' ">
        </MSBuild>

        <OnError ExecuteTargets="_nBuildKit_Deploy_OnError" />
    </Target>

    <Target
        Condition=" '@(DeployFailureStepsToExecute)' != '' "
        Name="_nBuildKit_Deploy_OnError"
        Outputs="%(DeployFailureStepsToExecute.Identity)">

        <CreateItem Include="$(GroupsToExecute.Replace(',', ';').ToLower().Split(';'))">
            <Output
                ItemName="ExecutionGroupsFromUser"
                TaskParameter="Include" />
        </CreateItem>

        <CreateProperty Value="%(DeployFailureStepsToExecute.Groups)">
            <Output
                PropertyName="DeployFailureStepGroups"
                TaskParameter="Value" />
        </CreateProperty>
        <CreateItem Include="$(DeployFailureStepGroups.ToLower().Split(';'))">
            <Output
                ItemName="ExecutionGroupsForStep"
                TaskParameter="Include" />
        </CreateItem>
        <IsInCollection
            Collection="@(ExecutionGroupsFromUser)"
            Items="@(ExecutionGroupsForStep)">
            <Output
                PropertyName="ShouldExecuteStep"
                TaskParameter="IsInList" />
        </IsInCollection>

        <CreateItem Include="all">
            <Output
                ItemName="ExecutionGroupsForAllSteps"
                TaskParameter="Include" />
        </CreateItem>
        <IsInCollection
            Collection="@(ExecutionGroupsForAllSteps)"
            Items="@(ExecutionGroupsFromUser)">
            <Output
                PropertyName="ShouldExecuteAllSteps"
                TaskParameter="IsInList" />
        </IsInCollection>

        <CreateProperty Value="false">
            <Output
                PropertyName="ShouldExecute"
                TaskParameter="Value" />
        </CreateProperty>
        <CreateProperty
            Condition="$(ShouldExecuteStep.ToLower()) == 'true' OR $(ShouldExecuteAllSteps.ToLower()) == 'true' OR ( '%(DeployFailureStepsToExecute.Groups)' == '' AND '$(GroupsToExecute.ToLower())' == 'all')"
            Value="true">
            <Output
                PropertyName="ShouldExecute"
                TaskParameter="Value" />
        </CreateProperty>

        <Message
            Condition=" '$(ShouldExecute)' != 'true' "
            Importance="normal"
            Text="Skipping %(DeployFailureStepsToExecute.Identity)." />
        <Message
            Condition=" $(ShouldExecuteStep.ToLower()) != 'true' "
            Importance="low"
            Text="Step not included in execution group list." />
        <Message
            Condition=" $(ShouldExecuteAllSteps.ToLower()) != 'true' "
            Importance="low"
            Text="'All' execution group not included in group list." />
        <Message
            Condition=" '@(ExecutionGroupsForStep)' == '' AND '$(GroupsToExecute.ToLower())' != 'all' "
            Importance="low"
            Text="Execution group list is empty and 'All' execution group is not included in group list." />

        <Message
            Condition=" '$(ShouldExecute)' == 'true' "
            Importance="normal"
            Text="Executing %(DeployFailureStepsToExecute.Identity)" />

        <MSBuild
            BuildInParallel="False"
            Projects="%(DeployFailureStepsToExecute.Identity)"
            Properties="$(DefaultPropertyDirectories);$(DefaultProperties);$(DefaultPathProperties);%(BuildFailureStepsToExecute.Properties)"
            RebaseOutputs="False"
            RemoveProperties=""
            RunEachTargetSeparately="True"
            SkipNonexistentProjects="False"
            StopOnFirstFailure="False"
            TargetAndPropertyListSeparators=""
            Targets=""
            ToolsVersion="$(MSBuildToolsVersion)"
            UnloadProjectsOnCompletion="True"
            UseResultsCache="True"
            Condition=" $(ShouldExecute) == 'true' ">
        </MSBuild>
    </Target>
</Project>