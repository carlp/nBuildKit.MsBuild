<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="nBuildKit_Build_Pack_NuGet_Run"
    ToolsVersion="11.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsBuildPackNuGet>true</ExistsBuildPackNuGet>
    </PropertyGroup>

    <Import
        Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props') AND '$(ExistsSharedImportBuildSharedSettings)' != 'true' "
        Project="$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props" />

    <Import
        Condition="Exists('$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild') AND '$(ExistsSharedTemplateTokens)' != 'true' "
        Project="$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild" />

    <Import
        Condition="Exists('$(FileExtensionsImport)') AND '$(ExistsNBuildKitExtensions)' != 'true' "
        Project="$(FileExtensionsImport)" />

    <Target
        DependsOnTargets="_nBuildKit_Build_Pack_NuGet_DisplayInfo"
        Name="nBuildKit_Build_Pack_NuGet_Run">
        <CallTarget Targets="_nBuildKit_Build_Pack_NuGet_GetToolPaths" />
        <CallTarget Targets="_nBuildKit_Build_Pack_NuGet_Pack" />
    </Target>

    <!-- Display info -->
    <Target
        DependsOnTargets="_nBuildKit_Build_Pack_NuGet_DebugLog"
        Name="_nBuildKit_Build_Pack_NuGet_DisplayInfo">
        <Message
            Importance="normal"
            Text="Creating NuGet package..." />

        <Error
            Condition=" '@(NuGetPackageSpecs)' == '' "
            Text="No NuGet spec files are specified!" />
    </Target>

    <Target
        Condition="$(ShouldDisplayDebugLog)"
        Name="_nBuildKit_Build_Pack_NuGet_DebugLog">
        <Message
            Importance="low"
            Text="Project directory structure:" />
        <Message
            Importance="low"
            Text="The workspace is located at:                                       $(DirWorkspace)" />
        <Message
            Importance="low"
            Text="The directory containing the deliverables is located at:           $(DirBuildDeploy)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit files is located at:        $(DirNBuildKitMsBuild)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit scripts is located at:      $(DirNBuildKitMsBuildExtensions)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit templates is located at:    $(DirNBuildKitMsBuildTemplates)" />
        <Message
            Importance="low"
            Text=" " />

        <Message
            Condition=" '@(NuGetPackageSpecs)' != '' "
            Importance="low"
            Text="The NuGet spec files are:" />
        <Message
            Condition=" '@(NuGetPackageSpecs)' != '' "
            Importance="low"
            Text="Template: %(NuGetPackageSpecs.Template) - Output: %(NuGetPackageSpecs.Identity)" />
    </Target>

    <Target Name="_nBuildKit_Build_Pack_NuGet_GetToolPaths">
        <Error
            Condition="!Exists('$(DirPackages)') AND '$(ShouldExecute)' == 'true' "
            Text="The packages directory does not exist. Cannot search for the NuGet binaries." />

        <NuGetInstall
            Condition=" '$(ToolsExternalNuGetVersioningPath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' "
            NuGetPath="$(ToolsExternalNuGetPath)"
            PackageDirectory="$(DirPackages)"
            PackageName="NuGet.Versioning"
            PackageVersion="$(ToolsExternalNuGetVersioningVersion)"
            Sources="@(NuGetSources)" />
        <SearchPackagesDirectoryForToolPath
            Condition=" '$(ToolsExternalNuGetVersioningPath)' == 'UNDEFINED' AND  '$(ShouldExecute)' == 'true' "
            FileToLocate="NuGet.Versioning.dll"
            PackagesDir="$(DirPackages)">
            <Output
                PropertyName="ToolsExternalNuGetVersioningPath"
                TaskParameter="Path" />
        </SearchPackagesDirectoryForToolPath>
        <GetToolFullPath
            Condition=" '$(ToolsExternalNuGetVersioningPath)' != 'UNDEFINED' "
            Tool="$(ToolsExternalNuGetVersioningPath)">
            <Output
                PropertyName="ToolsExternalNuGetVersioningPath"
                TaskParameter="Path" />
        </GetToolFullPath>
        <Message
            Condition="Exists('$(ToolsExternalNuGetVersioningPath)') AND '$(ShouldExecute)' == 'true' "
            Importance="low"
            Text="The NuGet.Versioning assembly was found at: $(ToolsExternalNuGetVersioningPath)" />
        <Error
            Condition="!Exists('$(ToolsExternalNuGetVersioningPath)') AND '$(ShouldExecute)' == 'true' "
            Text="Could not locate the NuGet.Versioning assembly. Cannot gather dependencies." />
    </Target>

    <!--
        Note that this target is batched through the outputs. This enables MsBuild to run the target multiple times,
        once for each entry in the NuGetPackagesSpecs ItemGroup.
    -->
    <Target
        Condition=" '@(NuGetPackageSpecs)' != '' "
        DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize;_nBuildKit_Build_Pack_NuGet_GetToolPaths"
        Name="_nBuildKit_Build_Pack_NuGet_Pack"
        Outputs="%(NuGetPackageSpecs.Identity)">
        <Message
            Importance="low"
            Text="Resolving build templates for: %(NuGetPackageSpecs.Identity)" />

        <!-- Process the build templates in the nuspec file path -->
        <TemplateText
            Template="%(NuGetPackageSpecs.Identity)"
            Tokens="@(TemplateTokens)">
            <Output
                PropertyName="FileNuGetNuSpec"
                TaskParameter="Result" />
        </TemplateText>

        <!-- Process the build templates in the included dependencies -->
        <TemplateText
            Condition=" '%(NuGetPackageSpecs.IncludedDependencies)' != '' "
            Template="%(NuGetPackageSpecs.IncludedDependencies)"
            Tokens="@(TemplateTokens)">
            <Output
                PropertyName="FilesNuGetDependenciesIncluded"
                TaskParameter="Result" />
        </TemplateText>

        <!-- Process the build templates in the excluded dependencies -->
        <TemplateText
            Condition=" '%(NuGetPackageSpecs.ExcludedDependencies)' != '' "
            Template="%(NuGetPackageSpecs.ExcludedDependencies)"
            Tokens="@(TemplateTokens)">
            <Output
                PropertyName="FilesNuGetDependenciesExcluded"
                TaskParameter="Result" />
        </TemplateText>

        <Message
            Importance="low"
            Text="Creating NuGet package from: $(FileNuGetNuSpec)" />
        <MakeDir
            Condition="!Exists('$(DirBuildDeploy)') AND  '$(ShouldExecute)' == 'true' "
            Directories="$(DirBuildDeploy)" />

        <Message
            Importance="low"
            Text="Included dependencies: $(FilesNuGetDependenciesIncluded)" />
        <Message
            Importance="low"
            Text="Excluded dependencies: $(FilesNuGetDependenciesExcluded)" />

        <!--
            Create the ItemGroup dynamically because creating an ItemGroup in the target with the dynamically
            created properties doesn't work because the wildcards are not always expanded for some reason.
        -->
        <CreateItem
            Exclude="$(FilesNuGetDependenciesExcluded.Split(';'))"
            Include="$(FilesNuGetDependenciesIncluded.Split(';'))">
            <Output
                ItemName="PackageDependencies"
                TaskParameter="Include" />
        </CreateItem>

        <GatherNuGetDependenciesForProject
            Condition=" '$(ShouldExecute)' == 'true' "
            DesignTimePackages="@(DesignTimeDependencies)"
            NuGetSpec="$(FileNuGetNuSpec)"
            NuGetVersionDllPath="$(ToolsExternalNuGetVersioningPath)"
            Packages="@(PackageDependencies)"
            VersionRangeType="$(NuGetDependencyVersionRangeStrategy)">
            <Output
                PropertyName="NuGetDependencies"
                TaskParameter="Dependencies" />
        </GatherNuGetDependenciesForProject>

        <ItemGroup>
            <TemplateTokens Include="Dependencies">
                <ReplacementValue>$(NuGetDependencies)</ReplacementValue>
            </TemplateTokens>
        </ItemGroup>

        <CreateProperty Value="$(DirBuildTemp)\$([System.IO.Path]::GetFileName($(FileNuGetNuSpec)))">
            <Output
                PropertyName="FileNuGetNuSpecTokensReplaced"
                TaskParameter="Value" />
        </CreateProperty>

        <!--
            Replaced all instances of $TOKEN$ with the value for TOKEN. The regular expession
            is rather mangled because XML doesn't like < and > and MsBuild doesn't
            like $ (%24), * (%2A), ? (%3F)
        -->
        <TemplateFile
            Condition="Exists('$(FileNuGetNuSpec)') AND '$(ShouldExecute)' == 'true'"
            Encoding="UTF-8"
            OutputFileName="$(FileNuGetNuSpecTokensReplaced)"
            SearchExpression="(%3F&lt;token&gt;\%24(?&lt;identifier&gt;\w%2A)\%24)"
            Template="$(FileNuGetNuSpec)"
            Tokens="@(TemplateTokens)" />
        <NuGetPack
            Condition=" '$(ShouldExecute)' == 'true' "
            File="$(FileNuGetNuSpecTokensReplaced)"
            NuGetPath="$(ToolsExternalNuGetPath)"
            OutputDirectory="$(DirBuildDeploy)"
            ShouldBuildSymbols="%(NuGetPackageSpecs.ShouldBuildSymbols)" />
    </Target>
 </Project>