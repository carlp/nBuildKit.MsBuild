<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="nBuildKit_Build_Test_Unit_VsTest_Run"
    ToolsVersion="11.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsBuildTestUnitMsTest>true</ExistsBuildTestUnitMsTest>
    </PropertyGroup>

    <Import
        Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props') AND '$(ExistsSharedImportBuildSharedSettings)' != 'true' "
        Project="$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props" />

    <PropertyGroup>
        <FileRunSettings>$(DirBuildTemp)\vstest.runsettings</FileRunSettings>
    </PropertyGroup>

    <Import
        Condition="Exists('$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild') AND '$(ExistsSharedTemplateTokens)' != 'true' "
        Project="$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild" />

    <Import
        Condition="Exists('$(FileExtensionsImport)') AND '$(ExistsNBuildKitExtensions)' != 'true' "
        Project="$(FileExtensionsImport)" />

    <Target
        DependsOnTargets="_nBuildKit_Build_Test_Unit_VsTest_DisplayInfo"
        Name="nBuildKit_Build_Test_Unit_VsTest_Run">
        <CallTarget Targets="_nBuildKit_Build_Test_Unit_VsTest_GetToolPaths" />
        <CallTarget Targets="_nBuildKit_Build_Test_Unit_VsTest_ReplaceBuildTemplates" />
        <CallTarget Targets="_nBuildKit_Build_Test_Unit_VsTest_Execute" />
    </Target>

    <!-- Display info -->
    <Target
        DependsOnTargets="_nBuildKit_Build_Test_Unit_VsTest_DebugLog"
        Name="_nBuildKit_Build_Test_Unit_VsTest_DisplayInfo">
        <Message Text="Running unit tests with VsTest ..." />
    </Target>

    <Target
        Condition="$(ShouldDisplayDebugLog)"
        DependsOnTargets="_nBuildKit_Build_Test_Unit_VsTest_ReplaceBuildTemplates"
        Name="_nBuildKit_Build_Test_Unit_VsTest_DebugLog">
        <Message
            Importance="low"
            Text="Project directory structure:" />
        <Message
            Importance="low"
            Text="The workspace is located at:                                                     $(DirWorkspace)" />
        <Message
            Importance="low"
            Text="The directory containing the OpenCover unit test coverage reports is located at: $(DirReportGeneratorOutput)" />
        <Message
            Importance="low"
            Text="The directory containing the NuGet packages is located at:                       $(DirPackages)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit files is located at:                      $(DirNBuildKitMsBuild)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit scripts is located at:                    $(DirNBuildKitMsBuildExtensions)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit templates is located at:                  $(DirNBuildKitMsBuildTemplates)" />
        <Message
            Importance="low"
            Text=" " />

        <Message
            Importance="low"
            Text="The VsTest report will be located at:                                            $(DirReportVsTestExpanded)" />
        <Message
            Importance="low"
            Text="The OpenCover XML report will be located at:                                     $(FileReportOpenCoverXmlExpanded)" />
        <Message
            Importance="low"
            Text="The OpenCover CSV report will be located at:                                     $(FileReportOpenCoverCsvExpanded)" />
        <Message
            Importance="low"
            Text="The ReportGenerator XML summary report will be located at:                       $(FileReportReportGeneratorXmlSummary)" />
        <Message
            Importance="low"
            Text=" " />

        <Message
            Importance="low"
            Text="The VsTest command line executable is located at:                                $(ToolsExternalVsTestPath)" />
        <Message
            Importance="low"
            Text="ReportGenerator command line executable is located at:                           $(ToolsExternalReportGeneratorPath)" />
        <Message
            Importance="low"
            Text=" " />
    </Target>

    <Target Name="_nBuildKit_Build_Test_Unit_VsTest_GetToolPaths">
        <Error
            Condition="!Exists('$(DirPackages)') AND '$(ShouldExecute)' == 'true' "
            Text="The packages directory does not exist. Cannot search for the unit test executables." />
        <Error
            Condition="!Exists('$(ToolsExternalVsTestPath)') AND '$(ShouldExecute)' == 'true' "
            Text="Could not locate the VsTest executable path. Cannot execute unit tests." />

        <NuGetInstall
            Condition=" '$(ToolsExternalVSCoverageToReportGeneratorPath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' "
            NuGetPath="$(ToolsExternalNuGetPath)"
            PackageDirectory="$(DirPackages)"
            PackageName="nBuildKit.Tools.VsCoverageToReportGenerator"
            Sources="@(NuGetSources)" />
        <SearchPackagesDirectoryForToolPath
            Condition=" '$(ToolsExternalVSCoverageToReportGeneratorPath)' == 'UNDEFINED' AND '$(ShouldExecute)' == 'true' "
            FileToLocate="VSCoverageToReportGenerator.exe"
            PackagesDir="$(DirPackages)">
            <Output
                PropertyName="ToolsExternalVSCoverageToReportGeneratorPath"
                TaskParameter="Path" />
        </SearchPackagesDirectoryForToolPath>
        <GetToolFullPath
            Condition=" '$(ToolsExternalVSCoverageToReportGeneratorPath)' != 'UNDEFINED' "
            Tool="$(ToolsExternalVSCoverageToReportGeneratorPath)">
            <Output
                PropertyName="ToolsExternalVSCoverageToReportGeneratorPath"
                TaskParameter="Path" />
        </GetToolFullPath>
        <Message
            Condition="Exists('$(ToolsExternalVSCoverageToReportGeneratorPath)') AND '$(ShouldExecute)' == 'true' "
            Importance="low"
            Text="The VSCoverageToReportGenerator executable was found at: $(ToolsExternalVSCoverageToReportGeneratorPath)" />
        <Warning
            Condition="!Exists('$(ToolsExternalVSCoverageToReportGeneratorPath)') AND '$(ShouldExecute)' == 'true' "
            Text="Could not locate the VSCoverageToReportGenerator executable path. Cannot convert the code coverage reports." />

        <NuGetInstall
            Condition=" '$(ToolsExternalReportGeneratorPath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' "
            NuGetPath="$(ToolsExternalNuGetPath)"
            PackageDirectory="$(DirPackages)"
            PackageName="ReportGenerator"
            PackageVersion="$(ToolsExternalReportGeneratorVersion)"
            Sources="@(NuGetSources)" />
        <SearchPackagesDirectoryForToolPath
            Condition=" '$(ToolsExternalReportGeneratorPath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' "
            FileToLocate="ReportGenerator.exe"
            PackagesDir="$(DirPackages)">
            <Output
                PropertyName="ToolsExternalReportGeneratorPath"
                TaskParameter="Path" />
        </SearchPackagesDirectoryForToolPath>
        <GetToolFullPath
            Condition=" '$(ToolsExternalReportGeneratorPath)' != 'UNDEFINED' "
            Tool="$(ToolsExternalReportGeneratorPath)">
            <Output
                PropertyName="ToolsExternalReportGeneratorPath"
                TaskParameter="Path" />
        </GetToolFullPath>
        <Message
            Condition="Exists('$(ToolsExternalReportGeneratorPath)') AND '$(ShouldExecute)' == 'true' "
            Importance="low"
            Text="The ReportGenerator executable was found at: $(ToolsExternalReportGeneratorPath)" />
        <Warning
            Condition="!Exists('$(ToolsExternalReportGeneratorPath)') AND '$(ShouldExecute)' == 'true' "
            Text="Could not locate the ReportGenerator executable path. Cannot generate the unit test coverage reports." />

        <NuGetInstall
            Condition=" '$(ToolsExternalOpenCoverToCoberturaConverterPath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' "
            NuGetPath="$(ToolsExternalNuGetPath)"
            PackageDirectory="$(DirPackages)"
            PackageName="OpenCoverToCoberturaConverter"
            PackageVersion="$(ToolsExternalOpenCoverToCoberturaConverterVersion)"
            Sources="@(NuGetSources)" />
        <SearchPackagesDirectoryForToolPath
            Condition=" '$(ToolsExternalOpenCoverToCoberturaConverterPath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' "
            FileToLocate="OpenCoverToCoberturaConverter.exe"
            PackagesDir="$(DirPackages)">
            <Output
                PropertyName="ToolsExternalOpenCoverToCoberturaConverterPath"
                TaskParameter="Path" />
        </SearchPackagesDirectoryForToolPath>
        <GetToolFullPath
            Condition=" '$(ToolsExternalOpenCoverToCoberturaConverterPath)' != 'UNDEFINED' "
            Tool="$(ToolsExternalOpenCoverToCoberturaConverterPath)">
            <Output
                PropertyName="ToolsExternalOpenCoverToCoberturaConverterPath"
                TaskParameter="Path" />
        </GetToolFullPath>
        <Message
            Condition="Exists('$(ToolsExternalOpenCoverToCoberturaConverterPath)') AND '$(ShouldExecute)' == 'true' "
            Text="The OpenCoverToCoberturaConverter executable was found at: $(ToolsExternalOpenCoverToCoberturaConverterPath)" />
        <Warning
            Condition="!Exists('$(ToolsExternalOpenCoverToCoberturaConverterPath)') AND '$(ShouldExecute)' == 'true' "
            Text="Could not locate the OpenCoverToCoberturaConverter executable path. Cannot convert code coverage reports." />
    </Target>

    <Target
        DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize"
        Name="_nBuildKit_Build_Test_Unit_VsTest_ReplaceBuildTemplates">
        <Message
            Importance="low"
            Text="Resolving build templates ..." />

        <TemplateText
            Template="$(DirReportVsTest)"
            Tokens="@(TemplateTokens)">
            <Output
                PropertyName="DirReportVsTestExpanded"
                TaskParameter="Result" />
        </TemplateText>

        <TemplateText
            Template="$(FileReportOpenCoverXml)"
            Tokens="@(TemplateTokens)">
            <Output
                PropertyName="FileReportOpenCoverXmlExpanded"
                TaskParameter="Result" />
        </TemplateText>

        <TemplateText
            Template="$(FileReportOpenCoverCsv)"
            Tokens="@(TemplateTokens)">
            <Output
                PropertyName="FileReportOpenCoverCsvExpanded"
                TaskParameter="Result" />
        </TemplateText>

        <TemplateText
            Template="$(DirReportOpenCoverCobertura)"
            Tokens="@(TemplateTokens)">
            <Output
                PropertyName="DirReportOpenCoverCoberturaExpanded"
                TaskParameter="Result" />
        </TemplateText>
    </Target>

    <PropertyGroup>
        <FileReportReportGeneratorXmlSummary>$(DirReportGeneratorOutput)\Summary.xml</FileReportReportGeneratorXmlSummary>
    </PropertyGroup>
    <Target
        DependsOnTargets="_nBuildKit_Build_Test_Unit_VsTest_ReplaceBuildTemplates"
        Name="_nBuildKit_Build_Test_Unit_VsTest_RunTests">
        <Error
            Condition="!Exists('$(DirPackages)') AND '$(ShouldExecute)' == 'true' "
            Text="The packages directory does not exist. Cannot search for the unit test executables." />
        <Error
            Condition="!Exists('$(ToolsExternalVsTestPath)') AND '$(ShouldExecute)' == 'true' "
            Text="Could not locate the VsTest executable path. Cannot execute unit tests." />

        <MakeDir
            Condition="!Exists('$(DirReportVsTestExpanded)') AND '$(ShouldExecute)' == 'true' "
            Directories="$(DirReportVsTestExpanded)" />

        <!-- Create the run settings file for vstest -->
        <ItemGroup>
            <RunSettingsContent Include="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;" />
            <RunSettingsContent Include="&lt;RunSettings&gt;" />

            <RunSettingsContent Include="&lt;RunConfiguration&gt;" />
            <!-- Note that this needs to be on 1 line because otherwise vstest chokes on it for some reason. -->
            <RunSettingsContent Include="&lt;ResultsDirectory&gt;$(DirReportVsTestExpanded)&lt;/ResultsDirectory&gt;" />
            <RunSettingsContent Include="&lt;/RunConfiguration&gt;" />

            <RunSettingsContent Include="&lt;/RunSettings&gt;" />
        </ItemGroup>
        <WriteLinesToFile
            File="$(FileRunSettings)"
            Lines="@(RunSettingsContent)"
            Overwrite="true" />

        <!-- Add integration with TFS if the current build is being executed from TFS -->
        <CreateProperty
            Condition=" '$(TF_BUILD)' == 'True' "
            Value="/logger:TfsPublisher&#59;Collection=$(TeamFoundationServerUrl)&#59;TeamProject=$(TF_PROJECT_NAME)&#59;BuildName=$(TF_BUILD_BUILDNUMBER)&#59;Flavor=$(Configuration)&#59;Platform=$(Platform)">
            <Output
                PropertyName="VsTestAdditionalParams"
                TaskParameter="Value" />
        </CreateProperty>

        <Message Text="Executing unit tests for: " />
        <Message Text="--- %(UnitTestAssemblies.FullPath)" />
        <Exec
            Command="&quot;$(ToolsExternalVsTestPath)&quot; @(UnitTestAssemblies->'%22%(FullPath)%22', ' ') /EnableCodeCoverage /InIsolation /Platform:x86 /settings:&quot;$(FileRunSettings)&quot; /logger:trx $(VsTestAdditionalParams)"
            IgnoreExitCode="False"
            IgnoreStandardErrorWarningFormat="False">
        </Exec>
    </Target>

    <PropertyGroup>
        <FileReportReportGeneratorXmlSummary>$(DirReportGeneratorOutput)\Summary.xml</FileReportReportGeneratorXmlSummary>
    </PropertyGroup>
    <Target
        DependsOnTargets="_nBuildKit_Build_Test_Unit_VsTest_ReplaceBuildTemplates;_nBuildKit_Build_Test_Unit_VsTest_RunTests"
        Name="_nBuildKit_Build_Test_Unit_VsTest_Execute">
        <ItemGroup>
            <CoverageFilesToConvert Include="$(DirReportVsTestExpanded)\**\*.coverage" />
        </ItemGroup>

        <!--
            Get the directory paths that contain the binaries used to run the unit tests with. Note that these paths cannot
            have a trailing backslash because on the command line the backslash escapes the quote and then we
            get a path that ends in a quote.

            Because MsBuild does not allow combining property functions and metadata expansions this isn't going to be pretty ....
        -->
        <ItemGroup>
            <UnitTestAssemblyDirectoriesWithTrailingBackslash Include="@(UnitTestAssemblies->'%(RootDir)%(Directory)')" />
        </ItemGroup>
        <RemoveDuplicates Inputs="@(UnitTestAssemblyDirectoriesWithTrailingBackslash)">
            <Output
                ItemName="UnitTestAssemblyDirectoriesWithTrailingBackslashFiltered"
                TaskParameter="Filtered" />
        </RemoveDuplicates>
        <ItemGroup>
            <UnitTestAssemblyDirectoriesUnique Include="$([System.String]::new('%(UnitTestAssemblyDirectoriesWithTrailingBackslashFiltered.Identity)').Replace('\&#59;', '&#59;').Trim('\'))" />
        </ItemGroup>
        <CreateProperty Value="@(UnitTestAssemblyDirectoriesUnique-> '--BinDirectory=&quot;%(FullPath)&quot;', ' ')">
            <Output
                PropertyName="CoverageBinDirectories"
                TaskParameter="Value" />
        </CreateProperty>
        <Message Text="Directories for unit test assemblies after removing duplicates" />
        <Message Text="$(CoverageBinDirectories)" />

        <Exec
            Command="&quot;$(ToolsExternalVSCoverageToReportGeneratorPath)&quot; --InputFile=&quot;@(CoverageFilesToConvert)&quot; --OutputFile=&quot;%(RootDir)%(Directory)\%(FileName).xml&quot; --VisualStudioDirectory=&quot;$(ToolsExternalVisualStudioDir)&quot; $(CoverageBinDirectories)"
            Condition=" Exists('$(ToolsExternalVSCoverageToReportGeneratorPath)') AND '@(CoverageFilesToConvert)' != '' AND '$(ShouldExecute)' == 'true' "
            IgnoreExitCode="False"
            IgnoreStandardErrorWarningFormat="False" />

        <ItemGroup>
            <ReportFilesToProcess Include="$(DirReportVsTestExpanded)\**\*.xml" />
        </ItemGroup>

        <ReportGenerator
            Condition=" Exists('$(ToolsExternalReportGeneratorPath)') AND '@(ReportFilesToProcess)' != '' AND '$(ShouldExecute)' == 'true' "
            OpenCoverOutputFiles="@(ReportFilesToProcess)"
            OutputDir="$(DirReportGeneratorOutput)"
            ReportGeneratorExe="$(ToolsExternalReportGeneratorPath)" />

        <ReportGeneratorOutputToCsv
            Condition="Exists('$(FileReportReportGeneratorXmlSummary)') AND Exists('$(FileReportReportGeneratorXmlSummary)') AND '$(ShouldExecute)' == 'true' "
            InputFile="$(FileReportReportGeneratorXmlSummary)"
            OutputFile="$(FileReportOpenCoverCsvExpanded)" />
    </Target>
 </Project>