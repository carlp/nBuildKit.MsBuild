<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="nBuildKit_Build_Run"
    ToolsVersion="11.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <!-- Note the current script is not meant to be imported! -->
        <ExistsBuild>true</ExistsBuild>

        <!-- The full path to the location of the scripts -->
        <DirNBuildKitMsBuild Condition=" '$(DirNBuildKitMsBuild)' == '' ">$(MSBuildProjectDirectory)</DirNBuildKitMsBuild>
        <DirNBuildKitMsBuildShared Condition=" '$(DirNBuildKitMsBuildShared)' == '' ">$(MSBuildProjectDirectory)</DirNBuildKitMsBuildShared>
        <DirNBuildKitMsBuildExtensions Condition=" '$(DirNBuildKitMsBuildExtensions)' == '' ">$(MSBuildProjectDirectory)\extensions</DirNBuildKitMsBuildExtensions>
        <DirNBuildKitMsBuildTemplates Condition=" '$(DirNBuildKitMsBuildTemplates)' == '' ">$(MSBuildProjectDirectory)\templates</DirNBuildKitMsBuildTemplates>
    </PropertyGroup>

    <Import
        Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props') AND '$(ExistsSharedImportBuildSharedSettings)' != 'true' "
        Project="$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props" />

    <Import
        Condition="Exists('$(DirNBuildKitMsBuildExtensions)\IsInCollection.msbuild') AND '$(ExistsExtensionsIsInCollection)' != 'true' "
        Project="$(DirNBuildKitMsBuildExtensions)\IsInCollection.msbuild" />

    <!-- Default values for all the properties in case they were not overriden -->
    <PropertyGroup>
        <DefaultPropertyDirectories>
            DirWorkspace=$(DirWorkspace);
            DirUserSettings=$(DirUserSettings);
        </DefaultPropertyDirectories>
        <DefaultProperties>
            NBuildKitVersion=$(NBuildKitVersion)
        </DefaultProperties>
    </PropertyGroup>

    <Target
        DependsOnTargets="_nBuildKit_Build_DisplayInfo"
        Name="nBuildKit_Build_Run">
        <!-- Execute all the build tasks in the given order -->
        <CallTarget Targets="_nBuildKit_Build_Execute" />
    </Target>

    <Target
        DependsOnTargets="_nBuildKit_Build_DebugLog"
        Name="_nBuildKit_Build_DisplayInfo">
        <Message
            Importance="normal"
            Text="Building ..." />
    </Target>

    <Target
        Condition="$(ShouldDisplayDebugLog)"
        Name="_nBuildKit_Build_DebugLog">
        <!-- Display the targets that will be executed -->
        <Message
            Condition=" '@(BuildStepsToExecute)' != ''"
            Importance="low"
            Text="Executing targets: @(BuildStepsToExecute->'%(identity)', '; ')" />
        <Message
            Condition=" '@(BuildStepsToExecute)' == ''"
            Importance="low"
            Text="Executing targets: NONE" />

        <Message
            Importance="low"
            Text=" " />

        <!-- Display the known directories -->
        <Message
            Importance="low"
            Text="Project directory structure:" />
        <Message
            Importance="low"
            Text="The workspace is located at:                                       $(DirWorkspace)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit files is located at:        $(DirNBuildKitMsBuild)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit scripts is located at:      $(DirNBuildKitMsBuildExtensions)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit templates is located at:    $(DirNBuildKitMsBuildTemplates)" />
        <Message
            Importance="low"
            Text=" " />
    </Target>

    <Target
        Condition=" '@(BuildStepsToExecute)' != ''"
        Name="_nBuildKit_Build_Execute"
        Outputs="%(BuildStepsToExecute.Identity)">

        <CreateItem Include="$(GroupsToExecute.Replace(',', ';').ToLower().Split(';'))">
            <Output
                ItemName="ExecutionGroupsFromUser"
                TaskParameter="Include" />
        </CreateItem>

        <CreateProperty Value="%(BuildStepsToExecute.Groups)">
            <Output
                PropertyName="BuildStepGroups"
                TaskParameter="Value" />
        </CreateProperty>
        <CreateItem Include="$(BuildStepGroups.ToLower().Split(';'))">
            <Output
                ItemName="ExecutionGroupsForStep"
                TaskParameter="Include" />
        </CreateItem>
        <IsInCollection
            Collection="@(ExecutionGroupsFromUser)"
            Items="@(ExecutionGroupsForStep)">
            <Output
                PropertyName="ShouldExecuteStep"
                TaskParameter="IsInList" />
        </IsInCollection>

        <CreateItem Include="all">
            <Output
                ItemName="ExecutionGroupsForAllSteps"
                TaskParameter="Include" />
        </CreateItem>
        <IsInCollection
            Collection="@(ExecutionGroupsForAllSteps)"
            Items="@(ExecutionGroupsFromUser)">
            <Output
                PropertyName="ShouldExecuteAllSteps"
                TaskParameter="IsInList" />
        </IsInCollection>

        <CreateProperty Value="false">
            <Output
                PropertyName="ShouldExecute"
                TaskParameter="Value" />
        </CreateProperty>
        <CreateProperty
            Condition="$(ShouldExecuteStep.ToLower()) == 'true' OR $(ShouldExecuteAllSteps.ToLower()) == 'true' OR ( '$(BuildStepGroups)' == '' AND '$(GroupsToExecute.ToLower())' == 'all')"
            Value="true">
            <Output
                PropertyName="ShouldExecute"
                TaskParameter="Value" />
        </CreateProperty>

        <Message
            Condition=" '$(ShouldExecute)' != 'true' "
            Importance="normal"
            Text="Skipping %(BuildStepsToExecute.Identity)." />
        <Message
            Condition=" $(ShouldExecuteStep.ToLower()) != 'true' "
            Importance="low"
            Text="Step not included in execution group list." />
        <Message
            Condition=" $(ShouldExecuteAllSteps.ToLower()) != 'true' "
            Importance="low"
            Text="'All' execution group not included in group list." />
        <Message
            Condition=" '@(ExecutionGroupsForStep)' == '' AND '$(GroupsToExecute.ToLower())' != 'all' "
            Importance="low"
            Text="Execution group list is empty and 'All' execution group is not included in group list." />

        <Message
            Condition=" '$(ShouldExecute)' == 'true' "
            Importance="normal"
            Text="Executing %(BuildStepsToExecute.Identity)" />
        <MSBuild
            BuildInParallel="False"
            Projects="%(BuildStepsToExecute.Identity)"
            Properties="$(DefaultPropertyDirectories);$(DefaultProperties);$(DefaultPathProperties);%(BuildStepsToExecute.Properties)"
            RebaseOutputs="False"
            RemoveProperties=""
            RunEachTargetSeparately="True"
            SkipNonexistentProjects="False"
            StopOnFirstFailure="True"
            TargetAndPropertyListSeparators=""
            Targets=""
            ToolsVersion="$(MSBuildToolsVersion)"
            UnloadProjectsOnCompletion="True"
            UseResultsCache="True"
            Condition=" $(ShouldExecute) == 'true' ">
        </MSBuild>

        <OnError ExecuteTargets="_nBuildKit_Build_OnError" />
    </Target>

    <Target
        Condition=" '@(BuildFailureStepsToExecute)' != '' "
        Name="_nBuildKit_Build_OnError"
        Outputs="%(BuildFailureStepsToExecute.Identity)">

        <CreateItem Include="$(GroupsToExecute.Replace(',', ';').ToLower().Split(';'))">
            <Output
                ItemName="ExecutionGroupsFromUser"
                TaskParameter="Include" />
        </CreateItem>

        <CreateProperty Value="%(BuildFailureStepsToExecute.Groups)">
            <Output
                PropertyName="BuildFailureStepGroups"
                TaskParameter="Value" />
        </CreateProperty>
        <CreateItem Include="$(BuildFailureStepGroups.ToLower().Split(';'))">
            <Output
                ItemName="ExecutionGroupsForStep"
                TaskParameter="Include" />
        </CreateItem>
        <IsInCollection
            Collection="@(ExecutionGroupsFromUser)"
            Items="@(ExecutionGroupsForStep)">
            <Output
                PropertyName="ShouldExecuteStep"
                TaskParameter="IsInList" />
        </IsInCollection>

        <CreateItem Include="all">
            <Output
                ItemName="ExecutionGroupsForAllSteps"
                TaskParameter="Include" />
        </CreateItem>
        <IsInCollection
            Collection="@(ExecutionGroupsForAllSteps)"
            Items="@(ExecutionGroupsFromUser)">
            <Output
                PropertyName="ShouldExecuteAllSteps"
                TaskParameter="IsInList" />
        </IsInCollection>

        <CreateProperty Value="false">
            <Output
                PropertyName="ShouldExecute"
                TaskParameter="Value" />
        </CreateProperty>
        <CreateProperty
            Condition="$(ShouldExecuteStep.ToLower()) == 'true' OR $(ShouldExecuteAllSteps.ToLower()) == 'true' OR ( '%(BuildFailureStepsToExecute.Groups)' == '' AND '$(GroupsToExecute.ToLower())' == 'all')"
            Value="true">
            <Output
                PropertyName="ShouldExecute"
                TaskParameter="Value" />
        </CreateProperty>

        <Message
            Condition=" '$(ShouldExecute)' != 'true' "
            Importance="normal"
            Text="Skipping %(BuildFailureStepsToExecute.Identity)." />
        <Message
            Condition=" $(ShouldExecuteStep.ToLower()) != 'true' "
            Importance="low"
            Text="Step not included in execution group list." />
        <Message
            Condition=" $(ShouldExecuteAllSteps.ToLower()) != 'true' "
            Importance="low"
            Text="'All' execution group not included in group list." />
        <Message
            Condition=" '@(ExecutionGroupsForStep)' == '' AND '$(GroupsToExecute.ToLower())' != 'all' "
            Importance="low"
            Text="Execution group list is empty and 'All' execution group is not included in group list." />

        <Message
            Condition=" '$(ShouldExecute)' == 'true' "
            Importance="normal"
            Text="Executing %(BuildFailureStepsToExecute.Identity)" />

        <MSBuild
            BuildInParallel="False"
            Condition=" $(ShouldExecute) == 'true' "
            Projects="%(BuildFailureStepsToExecute.Identity)"
            Properties="$(DefaultPropertyDirectories);$(DefaultProperties);$(DefaultPathProperties);%(BuildFailureStepsToExecute.Properties)"
            RebaseOutputs="False"
            RemoveProperties=""
            RunEachTargetSeparately="True"
            SkipNonexistentProjects="False"
            StopOnFirstFailure="False"
            TargetAndPropertyListSeparators=""
            Targets=""
            ToolsVersion="$(MSBuildToolsVersion)"
            UnloadProjectsOnCompletion="True"
            UseResultsCache="True">
        </MSBuild>
    </Target>
</Project>
