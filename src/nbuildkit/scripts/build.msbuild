<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="nBuildKit_Build_Run"
    ToolsVersion="11.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <!-- Note the current script is not meant to be imported! -->
        <ExistsBuild>true</ExistsBuild>

        <!-- The full path to the location of the scripts -->
        <DirNBuildKitMsBuild Condition=" '$(DirNBuildKitMsBuild)' == '' ">$(MSBuildProjectDirectory)</DirNBuildKitMsBuild>
        <DirNBuildKitMsBuildShared Condition=" '$(DirNBuildKitMsBuildShared)' == '' ">$(MSBuildProjectDirectory)</DirNBuildKitMsBuildShared>
        <DirNBuildKitMsBuildExtensions Condition=" '$(DirNBuildKitMsBuildExtensions)' == '' ">$(MSBuildProjectDirectory)\extensions</DirNBuildKitMsBuildExtensions>
        <DirNBuildKitMsBuildTemplates Condition=" '$(DirNBuildKitMsBuildTemplates)' == '' ">$(MSBuildProjectDirectory)\templates</DirNBuildKitMsBuildTemplates>

        <!-- Don't load the template tokens, this script doesn't need them -->
        <LoadTemplateTokens>false</LoadTemplateTokens>
    </PropertyGroup>

    <Import
        Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props') AND '$(ExistsSharedImportBuildSharedSettings)' != 'true' "
        Project="$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props" />

    <!-- Default values for all the properties in case they were not overriden -->
    <PropertyGroup>
        <DefaultPropertyDirectories>
            DirWorkspace=$(DirWorkspace);
            DirUserSettings=$(DirUserSettings);
        </DefaultPropertyDirectories>
        <DefaultProperties>
            NBuildKitVersion=$(NBuildKitVersion)
        </DefaultProperties>
    </PropertyGroup>

    <Target
        Name="nBuildKit_Build_Run">
        <!-- Execute all the build tasks in the given order -->
        <CallTarget Targets="_nBuildKit_Build_Execute" />
    </Target>

    <Target
        Condition="!Exists('$(FileNBuildKitExtensionsAssembly)') OR '$([System.IO.Path]::GetDirectoryName($(FileNBuildKitExtensionsAssembly)))' == '$(DirBuildBootstrap)' "
        Name="_nBuildKit_Build_Bootstrap">

        <PropertyGroup>
            <DirToClear>$([System.IO.Path]::GetDirectoryName($(FileNBuildKitExtensionsAssembly)))</DirToClear>
        </PropertyGroup>

        <ItemGroup>
            <BootstrapFilesToDelete
                Condition="Exists('$(DirToClear)')"
                Include="$(DirToClear)\**\*.*" />
        </ItemGroup>
        <Delete
            Condition=" '@(BootstrapFilesToDelete)' != ''"
            ContinueOnError="True"
            Files="@(BootstrapFilesToDelete)" />

        <RemoveDir
            Condition=" '$(DirToClear)' != '' "
            ContinueOnError="True"
            Directories="$(DirToClear)" />

        <MSBuild
            BuildInParallel="False"
            Projects="$(MSBuildThisFileDirectory)shared.bootstrap.build.tasks.msbuild"
            Properties="$(DefaultPropertyDirectories);$(DefaultProperties);$(DefaultPathProperties)"
            RebaseOutputs="False"
            RemoveProperties=""
            RunEachTargetSeparately="True"
            SkipNonexistentProjects="False"
            StopOnFirstFailure="True"
            TargetAndPropertyListSeparators=""
            Targets=""
            ToolsVersion="$(MSBuildToolsVersion)"
            UnloadProjectsOnCompletion="True"
            UseResultsCache="True">
        </MSBuild>

        <MSBuild
            BuildInParallel="False"
            Projects="$(MSBuildThisFileDirectory)shared.bootstrap.generate.targetsfile.msbuild"
            Properties="$(DefaultPropertyDirectories);$(DefaultProperties);$(DefaultPathProperties)"
            RebaseOutputs="False"
            RemoveProperties=""
            RunEachTargetSeparately="True"
            SkipNonexistentProjects="False"
            StopOnFirstFailure="True"
            TargetAndPropertyListSeparators=""
            Targets=""
            ToolsVersion="$(MSBuildToolsVersion)"
            UnloadProjectsOnCompletion="True"
            UseResultsCache="True">
        </MSBuild>
    </Target>

    <UsingTask TaskName="NBuildKit.MsBuild.Tasks.InvokeSteps" AssemblyFile="$(FileNBuildKitExtensionsAssembly)" />
    <Target
        Condition=" '@(BuildStepsToExecute)' != ''"
        DependsOnTargets="_nBuildKit_Build_Bootstrap"
        Name="_nBuildKit_Build_Execute">

        <CreateItem Include="$(GroupsToExecute.Replace(',', ';').ToLower().Split(';'))">
            <Output
                ItemName="ExecutionGroupsFromUser"
                TaskParameter="Include" />
        </CreateItem>

        <InvokeSteps
            FailOnPreStepFailure="$(FailBuildOnPreStepFailure)"
            FailOnPostStepFailure="$(FailBuildOnPostStepFailure)"
            FailureSteps="@(BuildFailureStepsToExecute)"
            GroupsToExecute="@(ExecutionGroupsFromUser)"
            PreSteps="@(BuildPreStepsToExecute)"
            PostSteps="@(BuildPostStepsToExecute)"
            Projects="@(BuildStepsToExecute)"
            Properties="$(DefaultPropertyDirectories);$(DefaultProperties);$(DefaultPathProperties)"
            StepMetadata="@(AvailableStepMetadata)"
            StopOnFirstFailure="true"
            StopOnPreStepFailure="$(StopBuildOnPreStepFailure)"
            StopOnPostStepFailure="$(StopBuildOnPostStepFailure)"
            ToolsVersion="$(MSBuildToolsVersion)"
            WorkingDirectory="$(DirWorkspace)" />
    </Target>
</Project>
