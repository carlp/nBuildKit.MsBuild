<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="nBuildKit_Test_Prepare_GenerateFiles_Run"
    ToolsVersion="11.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsBuildPrepareGenerateFiles>true</ExistsBuildPrepareGenerateFiles>
    </PropertyGroup>

    <Import
        Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importtestsharedsettings.props') AND '$(ExistsSharedImportTestSharedSettings)' != 'true' "
        Project="$(DirNBuildKitMsBuildShared)\shared.importtestsharedsettings.props" />

    <Import
        Condition="Exists('$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild') AND '$(ExistsSharedTemplateTokens)' != 'true' "
        Project="$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild" />

    <Import
        Condition="Exists('$(DirNBuildKitMsBuildExtensions)\TemplateFile.msbuild') AND '$(ExistsExtensionsTemplateFile)' != 'true' "
        Project="$(DirNBuildKitMsBuildExtensions)\TemplateFile.msbuild" />

    <Target
        Condition=" '@(TestFilesToGenerate)' != '' "
        DependsOnTargets="_nBuildKit_Test_Prepare_GenerateFiles_DisplayInfo"
        Name="nBuildKit_Test_Prepare_GenerateFiles_Run"
        Outputs="%(TestFilesToGenerate.Identity)">
        <CallTarget Targets="_nBuildKit_Test_Prepare_GenerateFiles_GenerateFiles" />
    </Target>

    <Target
        Condition="$(ShouldDisplayDebugLog)"
        Name="_nBuildKit_Test_Prepare_GenerateFiles_DebugLog">
        <Message
            Importance="low"
            Text="Project directory structure:" />
        <Message
            Importance="low"
            Text="The workspace is located at:                                       $(DirWorkspace)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit files is located at:        $(DirNBuildKitMsBuild)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit scripts is located at:      $(DirNBuildKitMsBuildExtensions)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit templates is located at:    $(DirNBuildKitMsBuildTemplates)" />
        <Message
            Importance="low"
            Text=" " />

        <Message
            Importance="low"
            Text="The semantic version file is located at:                           $(FileSemanticVersion)" />
        <Message
            Importance="low"
            Text="The VCS info file is located at:                                   $(FileVcsInfo)" />
        <Message
            Importance="low"
            Text=" " />
    </Target>

    <!-- Display info -->
    <Target
        DependsOnTargets="_nBuildKit_Test_Prepare_GenerateFiles_DebugLog"
        Name="_nBuildKit_Test_Prepare_GenerateFiles_DisplayInfo">
        <Message
            Importance="normal"
            Text="Generating files ..." />
    </Target>

    <!-- Generate the required files -->
    <Target
        Condition=" '@(TestFilesToGenerate)' != '' "
        DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize"
        Name="_nBuildKit_Test_Prepare_GenerateFiles_GenerateFiles"
        Outputs="%(TestFilesToGenerate.Identity)">
        <Message
            Importance="normal"
            Text="Generating file %(TestFilesToGenerate.Identity)" />

        <!--
            MsBuild can't seem to handle using item metadata (TestFilesToGenerate.FullPath) inside a property function
            inside the Exists() function, so we'll split the process and do the transfer separately.
        -->
        <ItemGroup>
            <DirTestFilesToGenerateTemp Include="$([System.IO.Path]::GetDirectoryName('%(TestFilesToGenerate.FullPath)'))" />
        </ItemGroup>

        <MakeDir
            Condition="!Exists('%(DirTestFilesToGenerateTemp.Identity)')"
            Directories="%(DirTestFilesToGenerateTemp.Identity)" />

        <!--
            It seems MsBuild can't handle batched metadata in conditions either, so make a property and then use that.
        -->
        <CreateProperty Value="%(TestFilesToGenerate.Token)">
            <Output
                PropertyName="AdditionalToken"
                TaskParameter="Value" />
        </CreateProperty>
        <ItemGroup Condition=" '$(AdditionalToken)' != '' ">
            <TemplateTokens Include="%(TestFilesToGenerate.Token)">
                <ReplacementValue>%(TestFilesToGenerate.ReplacementValue)</ReplacementValue>
            </TemplateTokens>
        </ItemGroup>

        <TemplateFile
            Condition="!Exists('%(TestFilesToGenerate.FullPath)')"
            Encoding="%(TestFilesToGenerate.Encoding)"
            OutputFileName="%(TestFilesToGenerate.Identity)"
            Template="%(TestFilesToGenerate.Template)"
            Tokens="@(TemplateTokens)" />
    </Target>
 </Project>