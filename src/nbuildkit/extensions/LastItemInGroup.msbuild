<!--
     Copyright 2013 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'
         ToolsVersion="11.0">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsExtensionsLastItemInGroup>true</ExistsExtensionsLastItemInGroup>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>
    </PropertyGroup>

    <UsingTask TaskName="LastItemInGroup"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MsBuildTasksAssembly)">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <Item ParameterType="System.String" Output="true" />
        </ParameterGroup>
        <Task>
            <Code Type="Method" Language="cs">
                <![CDATA[
                    public override bool Execute()
                    {
                        try
                        {
                            if (Items != null)
                            {
                                ITaskItem[] processedItems = Items;
                                if (processedItems.Length > 0)
                                {
                                    var taskItem = processedItems[processedItems.Length - 1];
                                    if (!string.IsNullOrEmpty(taskItem.ItemSpec))
                                    {
                                        Item = taskItem.ItemSpec;
                                    }
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            Log.LogError(
                                string.Format(
                                    "Failed to find the last item in the collection. Error was: {0}",
                                    e));
                        }

                        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                        // from a task's constructor or property setter. As long as this task is written to always log an error
                        // when it fails, we can reliably return HasLoggedErrors.
                        return !Log.HasLoggedErrors;
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>