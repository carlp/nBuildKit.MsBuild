<!--
     Copyright 2014 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project
    ToolsVersion="11.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsExtensionsValidateXmlAgainstSchema>true</ExistsExtensionsValidateXmlAgainstSchema>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>
    </PropertyGroup>

    <UsingTask
        AssemblyFile="$(MsBuildTasksAssembly)"
        TaskFactory="CodeTaskFactory"
        TaskName="ValidateXmlAgainstSchema">
        <ParameterGroup>
            <InputFile
                ParameterType="System.String"
                Required="true" />
            <SchemaFile
                ParameterType="System.String"
                Required="true" />
            <TargetNamespace
                ParameterType="System.String"
                Required="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Xml" />
            <Code
                Language="cs"
                Type="Class">
                <![CDATA[
                    using System;
                    using System.Diagnostics;
                    using System.Xml;
                    using System.Xml.Schema;
                    using Microsoft.Build.Framework;
                    using Microsoft.Build.Utilities;

                    public sealed class ValidateXmlAgainstSchema : Microsoft.Build.Utilities.Task
                    {
                        [Microsoft.Build.Framework.Required]
                        public string InputFile
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public string SchemaFile
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public string TargetNamespace
                        {
                            get;
                            set;
                        }

                        public override bool Execute()
                        {
                            // Set the validation settings.
                            var settings = new XmlReaderSettings();
                            settings.ValidationType = ValidationType.Schema;

                            settings.ValidationFlags |= XmlSchemaValidationFlags.ProcessInlineSchema;
                            settings.ValidationFlags |= XmlSchemaValidationFlags.ProcessSchemaLocation;
                            settings.ValidationFlags |= XmlSchemaValidationFlags.ReportValidationWarnings;

                            settings.Schemas.Add(TargetNamespace, SchemaFile);

                            settings.ValidationEventHandler += new ValidationEventHandler(ValidationCallBack);

                            // Create the XmlReader object.
                            Log.LogWarning(
                                string.Format(
                                    "Validating XML in {0} for target namespace '{1}' with schema from '{2}'",
                                    InputFile,
                                    TargetNamespace,
                                    SchemaFile));
                            using (XmlReader reader = XmlReader.Create(InputFile, settings))
                            {
                                while (reader.Read())
                                {
                                    // Just reading the file to check for validation errors ...
                                }
                            }

                            // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                            // from a task's constructor or property setter. As long as this task is written to always log an error
                            // when it fails, we can reliably return HasLoggedErrors.
                            return !Log.HasLoggedErrors;
                        }

                        private void ValidationCallBack(object sender, ValidationEventArgs args)
                        {
                            if (args.Severity == XmlSeverityType.Warning)
                            {
                                Log.LogWarning(
                                    string.Format(
                                        "XML validation {0}: {1}",
                                        args.Severity,
                                        args.Message));
                            }
                            else
                            {
                                Log.LogError(
                                    string.Format(
                                        "XML validation {0}: {1}",
                                        args.Severity,
                                        args.Message));
                            }

                        }
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>