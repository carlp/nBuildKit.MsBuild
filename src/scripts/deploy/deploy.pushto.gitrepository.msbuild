<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="11.0"
         DefaultTargets="nBuildKit_Deploy_PushTo_GitRepository_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsDeployPushToGitRepository>true</ExistsDeployPushToGitRepository>
    </PropertyGroup>

    <Import Project="$(DirNBuildKitMsBuildShared)\shared.importdeploysharedsettings.props"
            Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importdeploysharedsettings.props') AND '$(ExistsSharedImportDeploySharedSettings)' != 'true' " />

    <Import Project="$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild') AND '$(ExistsSharedTemplateTokens)' != 'true' " />

    <Import Project="$(DirNBuildKitMsBuildExtensions)\GitCheckout.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\GitCheckout.msbuild') AND '$(ExistsExtensionsGitCheckout)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\GitPush.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\GitPush.msbuild') AND '$(ExistsExtensionsGitPush)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\TemplateText.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\TemplateText.msbuild') AND '$(ExistsExtensionsTemplateText)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\Unzip.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\Unzip.msbuild') AND '$(ExistsExtensionsUnzip)' != 'true' " />

    <Target Name="nBuildKit_Deploy_PushTo_GitRepository_Run"
            DependsOnTargets="_nBuildKit_Deploy_PushTo_GitRepository_DisplayInfo">
        <CallTarget Targets="_nBuildKit_Deploy_PushTo_GitRepository_Push" />
    </Target>

    <!-- Display info -->
    <Target Name="_nBuildKit_Deploy_PushTo_GitRepository_DisplayInfo"
            DependsOnTargets="_nBuildKit_Deploy_PushTo_GitRepository_DebugLog">
        <Message Text="Pushing to a GIT repository ..."
                 Importance="normal"/>
    </Target>

    <Target Name="_nBuildKit_Deploy_PushTo_GitRepository_DebugLog"
            Condition="$(ShouldDisplayDebugLog)">
        <Message Text="Project directory structure:"
                 Importance="low"/>
        <Message Text="The workspace is located at:                                       $(DirWorkspace)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit files is located at:        $(DirNBuildKitMsBuild)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit scripts is located at:      $(DirNBuildKitMsBuildExtensions)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit templates is located at:    $(DirNBuildKitMsBuildTemplates)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>

        <Message Text="Deploying: %(PushToGitRepositorySpecs.Identity)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>
    </Target>

    <Target Name="_nBuildKit_Deploy_PushTo_GitRepository_Push"
            DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize"
            Outputs="%(PushToGitRepositorySpecs.Identity)">
        <CallTarget Targets="_nBuildKit_Deploy_PushTo_GitRepository_ReplaceBuildTemplates" />
        <CallTarget Targets="_nBuildKit_Deploy_PushTo_GitRepository_CopyFiles" />
        <CallTarget Targets="_nBuildKit_Deploy_PushTo_GitRepository_VerifyRepositoryState_GatherData" />
        <CallTarget Targets="_nBuildKit_Deploy_PushTo_GitRepository_VerifyRepositoryState_Origin" />
        <CallTarget Targets="_nBuildKit_Deploy_PushTo_GitRepository_VerifyRepositoryState_Targets" />
        <CallTarget Targets="_nBuildKit_Deploy_PushTo_GitRepository_PushToRepository" />
    </Target>

    <Target Name="_nBuildKit_Deploy_PushTo_GitRepository_ReplaceBuildTemplates"
            DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize"
            Outputs="%(PushToGitRepositorySpecs.Identity)">
        <Message Text="Resolving build templates for: %(PushToGitRepositorySpecs.Identity)"
                 Importance="low"/>

        <CreateProperty Value="%(PushToGitRepositorySpecs.Identity)">
            <Output TaskParameter="Value" PropertyName="FilesToPush" />
        </CreateProperty>
        <TemplateText Template="$(FilesToPush)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FilesToPushIncluded" />
        </TemplateText>

        <CreateProperty Value="%(PushToGitRepositorySpecs.Repository)">
            <Output TaskParameter="Value" PropertyName="RepositoryToPushTo" />
        </CreateProperty>
        <TemplateText Template="$(RepositoryToPushTo)"
                      Tokens="@(TemplateTokens)"
                      Condition=" '$(RepositoryToPushTo)' != '' ">
            <Output TaskParameter="Result" PropertyName="RepositoryToPushTo" />
        </TemplateText>
    </Target>

    <Target Name="_nBuildKit_Deploy_PushTo_GitRepository_CopyFiles"
            DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize;_nBuildKit_Deploy_PushTo_GitRepository_ReplaceBuildTemplates"
            Outputs="%(PushToGitRepositorySpecs.Identity)">
        <!--
            Create the ItemGroup dynamically because creating an ItemGroup in the target with the dynamically
            created properties doesn't work because the wildcards are not always expanded for some reason.
        -->
        <CreateItem
            Include="$(FilesToPushIncluded.Split(';'))">
           <Output
               TaskParameter="Include"
               ItemName="FilesToPush"/>
        </CreateItem>
        <Error Text="There are no files to be pushed"
               Condition=" '@(FilesToPush)' == '' AND '$(ShouldExecute)' == 'true' "/>

        <PropertyGroup>
            <DirBuildTempCopy>$(DirBuildTemp)\copy</DirBuildTempCopy>
        </PropertyGroup>
        <MakeDir Directories="$(DirBuildTempCopy)"
                 Condition="!Exists('$(DirBuildTempCopy)') AND '$(ShouldExecute)' == 'true' " />

        <Copy SourceFiles="@(FilesToPush)"
              DestinationFolder="$(DirBuildTempCopy)"
              Condition=" '@(FilesToPush)' != '' " />

        <!-- Unzip files -->
        <ItemGroup>
            <FilesToUnzip Include="$(DirBuildTempCopy)\**\*.zip" />
        </ItemGroup>
        <Unzip InputFileName="%(FilesToUnzip.FullPath)"
               DestinationDirectory="$(DirBuildTemp)\unzip\%(FilesToUnzip.Filename)"
               Condition=" '@(FilesToUnzip)' != '' " />
        <ItemGroup>
            <FilesToCopy Include="$(DirBuildTemp)\unzip\%(FilesToUnzip.Filename)\.git\**\*.*"
                         Condition=" '@(FilesToUnzip)' != '' " />
        </ItemGroup>

        <!-- Copy files -->
        <CreateProperty Value="$(RepositoryToPushTo.Substring($(RepositoryToPushTo.LastIndexOf('/'))).TrimStart('/'))">
            <Output TaskParameter="Value" PropertyName="RepositoryName" />
        </CreateProperty>
        <CreateProperty Value="$(DirBuildTemp)\git\$(RepositoryName)">
            <Output TaskParameter="Value" PropertyName="DirRepositoryWorkspace" />
        </CreateProperty>
        <Copy SourceFiles="@(FilesToCopy)"
              DestinationFiles="@(FilesToCopy->'$(DirRepositoryWorkspace)\.git\%(RecursiveDir)%(Filename)%(Extension)')"
              Condition=" '@(FilesToCopy)' != '' " />

        <Copy SourceFiles="$(DirBuildTemp)\unzip\%(FilesToUnzip.Filename)\vcs.mergeinfo.xml"
              DestinationFiles="$(FileVcsMergeInfo)"
              Condition="Exists('$(DirBuildTemp)\unzip\%(FilesToUnzip.Filename)\vcs.mergeinfo.xml')" />
    </Target>

    <Target Name="_nBuildKit_Deploy_PushTo_GitRepository_VerifyRepositoryState_GatherData"
            DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize;_nBuildKit_Deploy_PushTo_GitRepository_ReplaceBuildTemplates;_nBuildKit_Deploy_PushTo_GitRepository_CopyFiles"
            Outputs="%(PushToGitRepositorySpecs.Identity)">
        <XmlPeek XmlInputPath="$(FileVcsMergeInfo)"
                 Query="//merge/origin/@branch"
                 Condition="Exists('$(FileVcsMergeInfo)')">
            <Output TaskParameter="Result" ItemName="OriginBranch" />
        </XmlPeek>
        <Message Text="OriginBranch: @(OriginBranch)" />

        <XmlPeek XmlInputPath="$(FileVcsMergeInfo)"
                 Query="//merge/targets/target/@branch"
                 Condition="Exists('$(FileVcsMergeInfo)')">
            <Output TaskParameter="Result" ItemName="TargetBranches" />
        </XmlPeek>
        <Message Text="TargetBranches: @(TargetBranches)" />
    </Target>

    <Target Name="_nBuildKit_Deploy_PushTo_GitRepository_VerifyRepositoryState_Origin"
            DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize;_nBuildKit_Deploy_PushTo_GitRepository_ReplaceBuildTemplates;_nBuildKit_Deploy_PushTo_GitRepository_CopyFiles"
            Outputs="%(PushToGitRepositorySpecs.Identity)">
        <Message Text="Verifying that there were no changes to the origin branch since the merge ..." />

        <Message Text="Checking out merge target branch: @(OriginBranch) ..." />
        <GitCheckout GitExecutablePath="$(ToolsExternalGitPath)"
                     WorkingDirectory="$(DirRepositoryWorkspace)"
                     Branch="@(OriginBranch)" />

        <Exec Command="$(ToolsExternalGitPath) rev-parse HEAD"
              WorkingDirectory="$(DirRepositoryWorkspace)"
              IgnoreExitCode="true"
              ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="GitRevNoLocalBranch" />
        </Exec>
        <Exec Command="$(ToolsExternalGitPath) rev-parse origin/@(OriginBranch)"
              WorkingDirectory="$(DirRepositoryWorkspace)"
              IgnoreExitCode="true"
              ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="GitRevNoServerBranch" />
        </Exec>
        <Message Text="For @(OriginBranch): the expected revision is [$(GitRevNoLocalBranch)], the current server revision is [$(GitRevNoServerBranch)]" />
        <Error Text="For @(OriginBranch) the local branch revision [$(GitRevNoLocalBranch)] is not the same as the server branch revision [$(GitRevNoServerBranch)]"
               Condition=" '$(GitRevNoLocalBranch)' != '$(GitRevNoServerBranch)' AND '$(ShouldExecute)' == 'true' "/>
    </Target>

    <Target Name="_nBuildKit_Deploy_PushTo_GitRepository_VerifyRepositoryState_Targets"
            DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize;_nBuildKit_Deploy_PushTo_GitRepository_ReplaceBuildTemplates;_nBuildKit_Deploy_PushTo_GitRepository_CopyFiles"
            Outputs="%(TargetBranches.Identity)">
        <Message Text="Verifying that there were no changes to the target branches since the merge ..." />

        <Message Text="Checking out merge target branch: %(TargetBranches.Identity) ..." />
        <GitCheckout GitExecutablePath="$(ToolsExternalGitPath)"
                     WorkingDirectory="$(DirRepositoryWorkspace)"
                     Branch="%(TargetBranches.Identity)" />

        <!--
            Get the previous revision for the current local branch.
            Note that the extra ^ is required because CMD uses ^ as an escape character
        -->
        <Exec Command="$(ToolsExternalGitPath) rev-parse HEAD^^"
              WorkingDirectory="$(DirRepositoryWorkspace)"
              IgnoreExitCode="true"
              ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="GitRevNoLocalBranch" />
        </Exec>
        <Exec Command="$(ToolsExternalGitPath) rev-parse origin/%(TargetBranches.Identity)"
              WorkingDirectory="$(DirRepositoryWorkspace)"
              IgnoreExitCode="true"
              ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="GitRevNoServerBranch" />
        </Exec>
        <Message Text="For %(TargetBranches.Identity): the expected revision is [$(GitRevNoLocalBranch)], the current server revision is [$(GitRevNoServerBranch)]" />
        <Error Text="For %(TargetBranches.Identity) the local branch revision [$(GitRevNoLocalBranch)] is not the same as the server branch revision [$(GitRevNoServerBranch)]"
               Condition=" '$(GitRevNoLocalBranch)' != '$(GitRevNoServerBranch)' AND '$(ShouldExecute)' == 'true' "/>
    </Target>

    <Target Name="_nBuildKit_Deploy_PushTo_GitRepository_PushToRepository"
            DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize;_nBuildKit_Deploy_PushTo_GitRepository_ReplaceBuildTemplates;_nBuildKit_Deploy_PushTo_GitRepository_CopyFiles"
            Outputs="%(PushToGitRepositorySpecs.Identity)">
        <Message Text="Pushing changes from $(FilesToPushIncluded) back to the origin ..." />
        <GitPush GitExecutablePath="$(ToolsExternalGitPath)"
                 WorkingDirectory="$(DirRepositoryWorkspace)"
                 Tags="true"
                 Condition=" '$(RepositoryToPushTo)' != '' " />
    </Target>
</Project>