<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         InitialTargets="nBuildKit_Projects_Common_VerifyProperties"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <Target Name="nBuildKit_Projects_Common_VerifyProperties">
        <Error Text="$(BuildPropertyFile) not found"
                Condition="!Exists('$(BuildPropertyFile)')" />
    </Target>
            
    <Import Project="$(DirMsBuildExtensions)\PublicKeySignatureFromKeyFile.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\PublicKeySignatureFromKeyFile.msbuild') AND '$()' != 'true' " />
    
    <!-- Locate the installed version of sn.exe -->
    <PropertyGroup>
        <ToolsExternalSnPath>NotSet</ToolsExternalSnPath>
    </PropertyGroup>
    <Target Name="_nBuildKit_Projects_Common_GetSnPath">
        <GetFrameworkSdkPath>
            <Output TaskParameter="Path" PropertyName="WindowsSdkPath" />
        </GetFrameworkSdkPath>
        
        <PropertyGroup>
            <ToolsExternalSnPath>$(WindowsSdkPath)bin\sn.exe</ToolsExternalSnPath>
        </PropertyGroup>
        
        <!-- For .NET 4.5 there is nothing in the WindowsSdkPath dir but there is in the deeper folder called 'NETFX 4.0 Tools'. -->
        <!-- For .NET 4.5.1 there is nothing in the WindowsSdkPath dir but there is in the deeper folder called 'NETFX 4.5.1 Tools'. -->
        <PropertyGroup>
            <ToolsExternalSnPath Condition="!Exists($(ToolsExternalSnPath)) AND Exists('$(WindowsSdkPath)bin\NETFX 4.0 Tools\sn.exe')">$(WindowsSdkPath)bin\NETFX 4.0 Tools\sn.exe</ToolsExternalSnPath>
            <ToolsExternalSnPath Condition="!Exists($(ToolsExternalSnPath)) AND Exists('$(WindowsSdkPath)bin\NETFX 4.5.1 Tools\sn.exe')">$(WindowsSdkPath)bin\NETFX 4.5.1 Tools\sn.exe</ToolsExternalSnPath>
        </PropertyGroup>
        <Message Text="The sn executable was found at: $(ToolsExternalSnPath)"
                 Condition="Exists('$(ToolsExternalSnPath)')" />
        <Error Text="Could not locate the sn executable path. Cannot execute unit tests."
               Condition="!Exists('$(ToolsExternalSnPath)')"/>
    </Target>
    
    <PropertyGroup>
        <BuildDependsOn>
            _nBuildKit_Projects_Common_PrepareGenerateApplicationManifest;
            $(BuildDependsOn);
        </BuildDependsOn>
    </PropertyGroup>
    <Target Name="_nBuildKit_Projects_Common_PrepareGenerateApplicationManifest"
            DependsOnTargets="_nBuildKit_Projects_Common_GetSnPath"
            Condition=" '$(ShouldGenerateApplicationManifest)' == 'true' AND ( '$(OutputType)' == 'WinExe' OR '$(OutputType)' == 'Exe' )">
        <PublicKeySignatureFromKeyFile SnExe="$(ToolsExternalSnPath)" 
                                       DirTemp="$(DirBuildTemp)" 
                                       Input="$(AssemblyOriginatorKeyFile)">
            <Output TaskParameter="PublicKey" PropertyName="PublicKeyTokenLocal" />
        </PublicKeySignatureFromKeyFile>
        
        <CreateItem
            Include="ProjectName"
            AdditionalMetadata="ReplacementValue=$(AssemblyName)">
           <Output
               TaskParameter="Include"
               ItemName="TemplateTokens"/>
        </CreateItem>
        <CreateItem
            Include="PublicKeyToken"
            AdditionalMetadata="ReplacementValue=$(PublicKeyTokenLocal)">
           <Output
               TaskParameter="Include"
               ItemName="TemplateTokens"/>
        </CreateItem>
        
        <CreateItem
            Include="$(MSBuildProjectDirectory)\$(AssemblyName).exe.manifest"
            AdditionalMetadata="Template=$(DirNBuildKitMsBuildProjectsCommonTemplates)\app.manifest.in">
           <Output
               TaskParameter="Include"
               ItemName="FilesToGenerate"/>
        </CreateItem>
    </Target>
</Project>
