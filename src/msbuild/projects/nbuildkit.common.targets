<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         InitialTargets="nBuildKit_Projects_Common_VerifyProperties"
         DefaultTargets="Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <BuildPropertyFile Condition=" '$(BuildPropertyFile)' == '' ">UNDEFINED</BuildPropertyFile>
        
        <!-- 
            Note that {3AC096D0-A1C2-E12C-1390-A8335801FDAB} is the project type GUID for test projects in any language 
            See here: http://www.codeproject.com/Reference/720512/List-of-Visual-Studio-Project-Type-GUIDs
        -->
        <IsTest Condition=" '$(IsTest)' == '' ">$(ProjectTypeGuids.Contains('{3AC096D0-A1C2-E12C-1390-A8335801FDAB}'))</IsTest>
    </PropertyGroup>

    <Import Project="$(BuildPropertyFile)"
            Condition="Exists('$(BuildPropertyFile)')" />
            
    <!-- Default settings -->
    <PropertyGroup>
        <DirMsBuildExtensions Condition=" '$(DirMsBuildExtensions)' == '' ">$(MSBuildProjectDirectory)\extensions</DirMsBuildExtensions>
        
        <!-- 
            Define the platform but without spaces, e.g. 'Any CPU' is turned into 'AnyCPU' which is necessary because Visual Studio
            displays the first, but uses the second.
        -->
        <PlatformWithoutSpaces Condition=" '$(PlatformWithoutSpaces)' == '' ">$(Platform.Replace(" ",""))</PlatformWithoutSpaces>
        
        <!-- Define the directory where all the binary files need to end up -->
        <DirBuildBinPlatformConfig Condition=" '$(DirBuildBinPlatformConfig)' == '' ">$([System.IO.Path]::GetFullPath('$(DirBuildBin)\$(PlatformWithoutSpaces)\$(Configuration)\'))</DirBuildBinPlatformConfig>
        
        <!-- Override the default output paths so that they go into a single directory -->
        <OutputPath>$(DirBuildBinPlatformConfig)</OutputPath>
        <IntermediateOutputPath>$([System.IO.Path]::GetFullPath('$(DirBuildTemp)\bin\obj\$(AssemblyName)\$(Platform)\$(Configuration)\'))</IntermediateOutputPath>
        
        <!-- Build configuration -->
        <ErrorReport>prompt</ErrorReport>
    </PropertyGroup>
    
    <Import Project="$(MSBuildProjectDirectory)\shared.locatenbuildkit.msbuild" 
            Condition="Exists('$(MSBuildProjectDirectory)\shared.locatenbuildkit.msbuild')" />
    
    <Import Project="$(DirMsBuildExtensions)\GetSemanticVersionFromGitHubFlowVersionOutputFile.msbuild" 
            Condition="Exists('$(DirMsBuildExtensions)\GetSemanticVersionFromGitHubFlowVersionOutputFile.msbuild')" />
    <Import Project="$(DirMsBuildExtensions)\GetVcsInfoFromFile.msbuild" 
            Condition="Exists('$(DirMsBuildExtensions)\GetVcsInfoFromFile.msbuild')" />
    <Import Project="$(DirMsBuildExtensions)\TemplateFile.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\TemplateFile.msbuild')"/>
    
    <Target Name="nBuildKit_Projects_Common_VerifyProperties">
        <Error Text="$(BuildPropertyFile) not found"
                Condition="!Exists('$(BuildPropertyFile)')" />
    </Target>
    
    <!-- Clean up all the files we generate ourselves -->
    <PropertyGroup>
        <CleanDependsOn>
            _nBuildKit_Projects_Common_CleanGeneratedFiles;
            _nBuildKit_Projects_Common_ExternalPreClean;
            $(CleanDependsOn);
        </CleanDependsOn>
    </PropertyGroup>
    <Target Name="_nBuildKit_Projects_Common_CleanGeneratedFiles" DependsOnTargets="VerifyProperties">
        <ItemGroup>
            <GeneratedFilesToDelete Include="%(FilesToGenerate.FullPath)" />
        </ItemGroup>
        <Delete Files="@(GeneratedFilesToDelete)" />
    </Target>
    
    <!-- Handle any external pre-clean steps -->
    <Target Name="_nBuildKit_Projects_Common_ExternalPreClean"
            Condition=" '@(PreCleanScripts)' != '' ">
        <MSBuild Projects="%(PreCleanScripts.FullPath)" Properties="Configuration=$(Configuration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);" />
    </Target>
    
    <!-- Gather the data for the template replacement -->
    <Target Name="_nBuildKit_Projects_Common_GetVersion"
            DependsOnTargets="_nBuildKit_Projects_Common_LocateNBuildKitMsBuild"
            Condition="!Exists('$(FileSemanticVersion)')">
        <MSBuild Projects="$(DirNBuildKit)\prepare.getversion.msbuild" Properties="BuildPropertyFile=$(BuildPropertyFile);DirWorkspace=$(DirWorkspace);FileVersionSemantic=&quot;$(FileSemanticVersion)&quot;" />
    </Target>
    
    <Target Name="_nBuildKit_Projects_Common_GetVcsInfo"
            DependsOnTargets="_nBuildKit_Projects_Common_LocateNBuildKitMsBuild"
            Condition="!Exists('$(FileVcsInfo)')">
        <MSBuild Projects="$(DirNBuildKit)\prepare.vcsinfo.msbuild" Properties="BuildPropertyFile=$(BuildPropertyFile);DirWorkspace=$(DirWorkspace);FileVersionSemantic=&quot;$(FileSemanticVersion)&quot;" />
    </Target>
    
    <Target Name="_nBuildKit_Projects_Common_GetVersionFromFile" 
            DependsOnTargets="_nBuildKit_Projects_Common_GetVersion">
        <GetSemanticVersionFromGitHubFlowVersionOutputFile VersionFile="$(FileSemanticVersion)" 
                                                           Condition="Exists('$(FileSemanticVersion)')">
            <Output TaskParameter="VersionMajor" PropertyName="VersionMajor" />
            <Output TaskParameter="VersionMinor" PropertyName="VersionMinor" />
            <Output TaskParameter="VersionPatch" PropertyName="VersionPatch" />
            <Output TaskParameter="VersionBuild" PropertyName="VersionBuild" />
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
            <Output TaskParameter="VersionSemanticFull" PropertyName="VersionSemanticFull" />
        </GetSemanticVersionFromGitHubFlowVersionOutputFile>
        
        <Message Text="Version: $(VersionSemantic)" />
    </Target>
    
    <Target Name="_nBuildKit_Projects_Common_GetVcsInfoFromFile"
            DependsOnTargets="_nBuildKit_Projects_Common_GetVcsInfo">
        <GetVcsInfoFromFile InfoFile="$(FileVcsInfo)"
                            Condition="Exists('$(FileVcsInfo)')">
            <Output TaskParameter="Revision" PropertyName="VcsRevision" />
            <Output TaskParameter="Branch" PropertyName="VcsBranch" />
        </GetVcsInfoFromFile>
    </Target>
    
    <!-- Generate the required files -->
    <PropertyGroup>
        <BuildDependsOn>
            _nBuildKit_Projects_Common_GenerateFiles;
            _nBuildKit_Projects_Common_ExternalPreBuild;
            $(BuildDependsOn);
        </BuildDependsOn>
    </PropertyGroup>
    <Target Name="_nBuildKit_Projects_Common_GenerateFiles"
            DependsOnTargets="nBuildKit_Projects_Common_VerifyProperties;_nBuildKit_Projects_Common_GetVersionFromFile;_nBuildKit_Projects_Common_GetVcsInfoFromFile"
            Condition="!Exists('%(FilesToGenerate.FullPath)')"
            Outputs="%(FilesToGenerate.Identity)">
        <!--  
            MsBuild can't seem to handle using item metadata (FilesToGenerate.FullPath) inside a property function
            inside the Exists() function, so we'll split the process and do the transfer separately.
        -->        
        <ItemGroup>
            <DirFilesToGenerateTemp Include="$([System.IO.Path]::GetDirectoryName('%(FilesToGenerate.FullPath)'))" />
        </ItemGroup>
        
        <MakeDir Directories="%(DirFilesToGenerateTemp.Identity)" 
                 Condition="!Exists('%(DirFilesToGenerateTemp.Identity)')" />
        
        <ItemGroup>
            <TemplateGenerationTokens Include="VersionMajor">
                <ReplacementValue>$(VersionMajor)</ReplacementValue>
            </TemplateGenerationTokens>
            <TemplateGenerationTokens Include="VersionMinor">
                <ReplacementValue>$(VersionMinor)</ReplacementValue>
            </TemplateGenerationTokens>
            <TemplateGenerationTokens Include="VersionPatch">
                <ReplacementValue>$(VersionPatch)</ReplacementValue>
            </TemplateGenerationTokens>
            <TemplateGenerationTokens Include="VersionBuild">
                <ReplacementValue>$(VersionBuild)</ReplacementValue>
            </TemplateGenerationTokens>
            <TemplateGenerationTokens Include="VersionSemantic">
                <ReplacementValue>$(VersionSemantic)</ReplacementValue>
            </TemplateGenerationTokens>
            <TemplateGenerationTokens Include="VersionSemanticFull">
                <ReplacementValue>$(VersionSemanticFull)</ReplacementValue>
            </TemplateGenerationTokens>
            
            <TemplateGenerationTokens Include="Configuration">
                <ReplacementValue>$(Configuration)</ReplacementValue>
            </TemplateGenerationTokens>
            <TemplateGenerationTokens Include="Platform">
                <ReplacementValue>$(Platform)</ReplacementValue>
            </TemplateGenerationTokens>
            <TemplateGenerationTokens Include="PlatformWithoutSpaces">
                <ReplacementValue>$(PlatformWithoutSpaces)</ReplacementValue>
            </TemplateGenerationTokens>
            
            <TemplateGenerationTokens Include="VcsRevision">
                <ReplacementValue>$(VcsRevision)</ReplacementValue>
            </TemplateGenerationTokens>
            <TemplateGenerationTokens Include="VcsBranch">
                <ReplacementValue>$(VcsBranch)</ReplacementValue>
            </TemplateGenerationTokens>
            
            <TemplateGenerationTokens Include="Now">
                <ReplacementValue>$([System.DateTime]::Now.ToString("o"))</ReplacementValue>
            </TemplateGenerationTokens>
            <TemplateGenerationTokens Include="Date">
                <ReplacementValue>$([System.DateTime]::Now.ToString("yyyy/MM/dd"))</ReplacementValue>
            </TemplateGenerationTokens>
            <TemplateGenerationTokens Include="DayOfMonth">
                <ReplacementValue>$([System.DateTime]::Now.ToString("dd"))</ReplacementValue>
            </TemplateGenerationTokens>
            <TemplateGenerationTokens Include="Month">
                <ReplacementValue>$([System.DateTime]::Now.ToString("MM"))</ReplacementValue>
            </TemplateGenerationTokens>
            <TemplateGenerationTokens Include="Year">
                <ReplacementValue>$([System.DateTime]::Now.ToString("yyyy"))</ReplacementValue>
            </TemplateGenerationTokens>
        </ItemGroup>
        <TemplateFile Template="%(FilesToGenerate.Template)" 
                      OutputFileName="%(FilesToGenerate.Identity)" 
                      Tokens="@(TemplateGenerationTokens)"
                      Condition="!Exists('%(FilesToGenerate.FullPath)')"/>
    </Target>
    
    <!-- Handle any external pre-build steps -->
    <Target Name="_nBuildKit_Projects_Common_ExternalPreBuild"
            Condition=" '@(PreCompilationScripts)' != '' ">
        <MSBuild Projects="%(PreCompilationScripts.FullPath)" Properties="Configuration=$(Configuration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);" />
    </Target>
</Project>
