<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="nBuildKit_Pack_NuGet_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsPackNuGet>true</ExistsPackNuGet>
        
        <!-- The full path to the settings file that contains all the settings for the build process -->
        <BuildPropertyFile Condition=" '$(BuildPropertyFile)' == '' ">UNDEFINED</BuildPropertyFile>
    </PropertyGroup>

    <Import Project="$(BuildPropertyFile)"
            Condition="Exists('$(BuildPropertyFile)') AND '$(ExistsSettings)' != 'true' " />
    
    <PropertyGroup>
        <!-- Build flags -->
        <ShouldDisplayDebugLog Condition=" '$(ShouldDisplayDebugLog)' == '' ">false</ShouldDisplayDebugLog>
        <ShouldExecute Condition=" '$(ShouldExecute)' == '' ">true</ShouldExecute>
        
        <!-- Build configuration -->
        <Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
        <Platform Condition=" '$(Platform)' == '' ">Any CPU</Platform>
        <PlatformWithoutSpaces>$(Platform.Replace(" ",""))</PlatformWithoutSpaces>
        
        <!-- Directories -->
        <DirWorkspace Condition=" '$(DirWorkspace)' == '' ">$([System.IO.Path]::GetDirectoryName('$(BuildPropertyFile)'))</DirWorkspace>
        <DirBuild Condition=" '$(DirBuild)' == '' ">$(DirWorkspace)\build</DirBuild>
        <DirBuildBin Condition=" '$(DirBuildBin)' == '' ">$(DirBuild)\bin\$(PlatformWithoutSpaces)\$(Configuration)</DirBuildBin>
        <DirBuildDeploy Condition=" '$(DirBuildDeploy)' == '' ">$(DirBuild)\deploy</DirBuildDeploy>
        <DirBuildLogs Condition=" '$(DirBuildLogs)' == '' ">$(DirBuild)\logs</DirBuildLogs>
        <DirBuildTemp Condition=" '$(DirBuildTemp)' == '' ">$(DirBuild)\temp</DirBuildTemp>
        <DirPackages Condition=" '$(DirPackages)' == '' ">$(DirWorkspace)\packages</DirPackages>
        <DirSrc Condition=" '$(DirSrc)' == '' ">$(DirWorkspace)\src</DirSrc>
        <DirTemplates Condition=" '$(DirTemplates)' == '' ">$(DirWorkspace)\templates</DirTemplates>
        
        <!-- nBuildKit directories -->
        <DirMsBuildExtensions Condition=" '$(DirMsBuildExtensions)' == '' ">$(MSBuildProjectDirectory)\extensions</DirMsBuildExtensions>
        <DirMsBuildShared Condition=" '$(DirMsBuildShared)' == '' ">$(MSBuildProjectDirectory)</DirMsBuildShared>
        
        <!-- External tools -->
        <ToolsExternalNuGetPath Condition=" '$(ToolsExternalNuGetPath)' == '' ">NuGet.exe</ToolsExternalNuGetPath>
        
        <!-- Files -->
        <FileSemanticVersion Condition=" '$(FileSemanticVersion)' == '' ">$(DirBuildTemp)\semantic_version.json</FileSemanticVersion>
        <FileReleaseNotesFull Condition=" '$(FileReleaseNotesFull)' == '' ">$(DirBuildTemp)\releasenotes_full.md</FileReleaseNotesFull>
        
        <!-- Version number -->
        <VersionSemantic>0</VersionSemantic>
    </PropertyGroup>

    <Import Project="$(DirMsBuildShared)\shared.templatetokens.msbuild" 
            Condition="Exists('$(DirMsBuildShared)\shared.templatetokens.msbuild') AND '$(ExistsSharedTemplateTokens)' != 'true' " />
    
    <Import Project="$(DirMsBuildExtensions)\FindAndReplaceInFile.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\FindAndReplaceInFile.msbuild') AND '$(ExistsExtensionsFindAndReplaceInFile)' != 'true' "/>    
    <Import Project="$(DirMsBuildExtensions)\GatherNuGetDependenciesForProject.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\GatherNuGetDependenciesForProject.msbuild') AND '$(ExistsExtensionsGatherNuGetDependenciesForProject)' != 'true' "/>
    <Import Project="$(DirMsBuildExtensions)\NuGetPack.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\NuGetPack.msbuild') AND '$(ExistsExtensionsNuGetPack)' != 'true' "/>
    <Import Project="$(DirMsBuildExtensions)\TemplateFile.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\TemplateFile.msbuild') AND '$(ExistsExtensionsTemplateFile)' != 'true' "/>
    <Import Project="$(DirMsBuildExtensions)\TemplateText.msbuild" 
            Condition="Exists('$(DirMsBuildExtensions)\TemplateText.msbuild') AND '$(ExistsExtensionsTemplateText)' != 'true' " />
            
    <Target Name="nBuildKit_Pack_NuGet_Run" DependsOnTargets="_nBuildKit_Pack_NuGet_DisplayInfo">
        <CallTarget Targets="_nBuildKit_Pack_NuGet_GetVersion" />
        <CallTarget Targets="_nBuildKit_Pack_NuGet_GetReleaseNotes" />
        <CallTarget Targets="_nBuildKit_Pack_NuGet_Pack" />
    </Target>
    
    <!-- Display info -->
    <Target Name="_nBuildKit_Pack_NuGet_DisplayInfo" DependsOnTargets="_nBuildKit_Pack_NuGet_DebugLog">
        <Message Text="Creating NuGet package..." />
        
        <Error Text="No NuGet spec files are specified!"
               Condition=" '@(NuGetPackageSpecs)' == '' "/>
    </Target>
    
    <Target Name="_nBuildKit_Pack_NuGet_DebugLog" Condition="$(ShouldDisplayDebugLog)">
        <Message Text="Project directory structure:" />
        <Message Text="The workspace is located at:                                      $(DirWorkspace)" />
        <Message Text="The directory containing the build output is located at:          $(DirBuild)" />
        <Message Text="The directory containing the deliverables is located at:          $(DirBuildDeploy)" />
        <Message Text="The directory containing the build logs is located at:            $(DirBuildLogs)" />
        <Message Text="The directory containing the temporary build files is located at: $(DirBuildTemp)" />
        <Message Text="The directory containing the NuGet packages is located at:        $(DirPackages)" />
        <Message Text="The directory containing the source code is located at:           $(DirSrc)" />
        <Message Text="The directory containing the template files is located at:        $(DirTemplates)" />
        <Message Text="The directory containing the nBuildKit scripts is located at:     $(DirMsBuildExtensions)" />
        <Message Text=" " />
        
        <Message Text="The NuGet spec files are:"
                 Condition=" '@(NuGetPackageSpecs)' != '' "/>
        <Message Text="Template: %(NuGetPackageSpecs.Template) - Output: %(NuGetPackageSpecs.Identity)"
                 Condition=" '@(NuGetPackageSpecs)' != '' " />
    </Target>
    
    <Target Name="_nBuildKit_Pack_NuGet_GetVersion" Condition="Exists('$(FileSemanticVersion)')">
        <GetSemanticVersionFromGitHubFlowVersionOutputFile VersionFile="$(FileSemanticVersion)" 
                                                           Condition="Exists('$(FileSemanticVersion)') AND '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
        </GetSemanticVersionFromGitHubFlowVersionOutputFile>
        
        <Message Text="Version: $(VersionSemantic)" />
    </Target>
    
    <PropertyGroup>
        <FileReleaseNotesFullForNuGet>$(DirBuildTemp)\releasenotes_full_xmlsanitised.md</FileReleaseNotesFullForNuGet>
    </PropertyGroup>
    <Target Name="_nBuildKit_Pack_NuGet_GetReleaseNotes" Condition="Exists('$(FileReleaseNotesFull)')">
        <Copy SourceFiles="$(FileReleaseNotesFull)"
              DestinationFiles="$(FileReleaseNotesFullForNuGet)"
              Condition="Exists('$(FileReleaseNotesFull)') AND '$(ShouldExecute)' == 'true' "/>
        
        <!-- 
            Replace the XML special tokens with their standard HTML form.
            Note handle the & first so that we don't stuff up anything else ...
            
            Note: this is not the best way to handle this. Realistically we should run this 
            through a proper translator.
        -->
        <ItemGroup>
            <BaseConfigurationTokens Include="&amp;">
                <ReplacementValue>&amp;amp;</ReplacementValue>
            </BaseConfigurationTokens>
            <BaseConfigurationTokens Include="&quot;">
                <ReplacementValue>&amp;quot;</ReplacementValue>
            </BaseConfigurationTokens>
            <BaseConfigurationTokens Include="&apos;">
                <ReplacementValue>&amp;apos;</ReplacementValue>
            </BaseConfigurationTokens>
            <BaseConfigurationTokens Include="&lt;">
                <ReplacementValue>&amp;lt;</ReplacementValue>
            </BaseConfigurationTokens>
            <BaseConfigurationTokens Include="&gt;">
                <ReplacementValue>&amp;gt;</ReplacementValue>
            </BaseConfigurationTokens>
        </ItemGroup>
        
        <FindAndReplaceInFile Input="$(FileReleaseNotesFullForNuGet)"
                              Tokens="@(BaseConfigurationTokens)"
                              Condition="Exists('$(FileReleaseNotesFullForNuGet)') AND '$(ShouldExecute)' == 'true' "/>
    
        <CreateProperty Value="$([System.IO.File]::ReadAllText('$(FileReleaseNotesFullForNuGet)'))"
                        Condition="Exists('$(FileReleaseNotesFullForNuGet)') AND '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="Value" PropertyName="ReleaseNotes" />
        </CreateProperty>
    </Target>
    
    <!-- 
        Note that this target is batched through the outputs. This enables MsBuild to run the target multiple times,
        once for each entry in the NuGetPackagesSpecs ItemGroup.
    -->
    <Target Name="_nBuildKit_Pack_NuGet_Pack" 
            DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize"
            Condition=" '@(NuGetPackageSpecs)' != '' "
            Outputs="%(NuGetPackageSpecs.Identity)">
        <Message Text="Resolving build templates for: %(NuGetPackageSpecs.Identity)" />
        
        <!-- Process the build templates in the nuspec file path -->
        <TemplateText Template="%(NuGetPackageSpecs.Identity)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FileNuGetNuSpec" />
        </TemplateText>
        
        <!-- Process the build templates in the nuspec template file path -->
        <TemplateText Template="%(NuGetPackageSpecs.Template)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FileNuGetTemplate" />
        </TemplateText>
        <Error Text="The NuGet template spec file does not exist. Cannot generate packages."
               Condition="!Exists('$(FileNuGetTemplate)') AND '$(ShouldExecute)' == 'true' "/>
        
        <!-- Process the build templates in the included dependencies -->
        <TemplateText Template="%(NuGetPackageSpecs.IncludedDependencies)"
                      Tokens="@(TemplateTokens)"
                      Condition=" '%(NuGetPackageSpecs.IncludedDependencies)' != '' ">
            <Output TaskParameter="Result" PropertyName="FilesNuGetDependenciesIncluded" />
        </TemplateText>
        
        <!-- Process the build templates in the excluded dependencies -->
        <TemplateText Template="%(NuGetPackageSpecs.ExcludedDependencies)"
                      Tokens="@(TemplateTokens)"
                      Condition=" '%(NuGetPackageSpecs.ExcludedDependencies)' != '' ">
            <Output TaskParameter="Result" PropertyName="FilesNuGetDependenciesExcluded" />
        </TemplateText>    
        
        <!--  
            MsBuild can't seem to handle using item metadata (NuGetPackageSpecs.Template) inside a property function
            inside the Exists() function, so we'll split the process and do the transfer separately.
        -->        
        <ItemGroup>
            <DirNuSpecTemp Include="$([System.IO.Path]::GetDirectoryName('$(FileNuGetTemplate)'))" Condition="Exists('$(FileNuGetTemplate)')" />
        </ItemGroup>
        
        <Message Text="Creating NuGet package from: $(FileNuGetNuSpec)" />
        <MakeDir Directories="%(DirNuSpecTemp.Identity)" 
                 Condition="!Exists('%(DirNuSpecTemp.Identity)') AND  '$(ShouldExecute)' == 'true' " />
        <MakeDir Directories="$(DirBuildDeploy)" 
                 Condition="!Exists('$(DirBuildDeploy)') AND  '$(ShouldExecute)' == 'true' " />

        <Message Text="Included dependencies: $(FilesNuGetDependenciesIncluded)" />
        <Message Text="Excluded dependencies: $(FilesNuGetDependenciesExcluded)" />
                 
        <!-- 
            Create the ItemGroup dynamically because creating an ItemGroup in the target with the dynamically
            created properties doesn't work because the wildcards are not always expanded for some reason.
        -->
        <CreateItem
            Include="$(FilesNuGetDependenciesIncluded.Split(';'))"
            Exclude="$(FilesNuGetDependenciesExcluded.Split(';'))">
           <Output
               TaskParameter="Include"
               ItemName="PackageDependencies"/>
        </CreateItem>
        
        <GatherNuGetDependenciesForProject Packages="@(PackageDependencies)" 
                                           Condition=" '@(PackageDependencies)' != '' AND '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="Dependencies" PropertyName="NuGetDependencies" />
        </GatherNuGetDependenciesForProject>

        <ItemGroup>
            <TemplateTokens Include="Dependencies">
                <ReplacementValue>$(NuGetDependencies)</ReplacementValue>
            </TemplateTokens>
        </ItemGroup>
        <TemplateFile Template="$(FileNuGetTemplate)" 
                      OutputFileName="$(FileNuGetNuSpec)" 
                      Tokens="@(TemplateTokens)" 
                      Condition=" '$(ShouldExecute)' == 'true' "/>
        
        <NuGetPack NuGetPath="$(ToolsExternalNuGetPath)" 
                   File="$(FileNuGetNuSpec)" 
                   OutputDirectory="$(DirBuildDeploy)" 
                   ShouldBuildSymbols="%(NuGetPackageSpecs.ShouldBuildSymbols)" 
                   Condition=" '$(ShouldExecute)' == 'true' "/>
    </Target>
 </Project>