<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="nBuildKit_PushTo_GitHubRelease_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsPushToGitHubRelease>true</ExistsPushToGitHubRelease>

        <!-- The full path to the settings file that contains all the settings for the build process -->
        <BuildPropertyFile Condition=" '$(BuildPropertyFile)' == '' ">UNDEFINED</BuildPropertyFile>

        <!--
            Define the DirWorkspace before importing the BuildPropertyFile so that it is defined and can be used by
            the properties in the BuildPropertyFile. Note that we can't define it in the BuildPropertyFile because that
            is imported which means there is no way to get the path of the file.
        -->
        <DirWorkspace Condition=" '$(DirWorkspace)' == '' ">$([System.IO.Path]::GetDirectoryName('$(BuildPropertyFile)'))</DirWorkspace>
    </PropertyGroup>

    <Import Project="$(BuildPropertyFile)"
            Condition="Exists('$(BuildPropertyFile)') AND '$(ExistsSettings)' != 'true' " />

    <Import Project="$(DirMsBuildShared)\shared.templatetokens.msbuild"
            Condition="Exists('$(DirMsBuildShared)\shared.templatetokens.msbuild') AND '$(ExistsSharedTemplateTokens)' != 'true' " />

    <Import Project="$(DirMsBuildExtensions)\GitHubReleaseCreate.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\GitHubReleaseCreate.msbuild') AND '$(ExistsExtensionsGitHubReleaseCreate)' != 'true' " />
    <Import Project="$(DirMsBuildExtensions)\GitHubReleaseUpload.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\GitHubReleaseUpload.msbuild') AND '$(ExistsExtensionsGitHubReleaseUpload)' != 'true' " />
    <Import Project="$(DirMsBuildExtensions)\TemplateText.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\TemplateText.msbuild') AND '$(ExistsExtensionsTemplateText)' != 'true' " />

    <Target Name="nBuildKit_PushTo_GitHubRelease_Run" DependsOnTargets="_nBuildKit_PushTo_GitHubRelease_DisplayInfo">
        <CallTarget Targets="_nBuildKit_PushTo_GitHubRelease_GetVersion" />
        <CallTarget Targets="nBuildKit_Shared_TemplateTokens_Initialize" />
        <CallTarget Targets="_nBuildKit_PushTo_GitHubRelease_Push" />
    </Target>

    <!-- Display info -->
    <Target Name="_nBuildKit_PushTo_GitHubRelease_DisplayInfo" DependsOnTargets="_nBuildKit_PushTo_GitHubRelease_DebugLog">
        <Message Text="Pushing artifacts to the GitHub release ..." Condition=" '@(PushToGitHubReleaseSpecs)' != '' " />
        <Message Text="No releases defined!" Condition=" '@(PushToGitHubReleaseSpecs)' == '' " />
    </Target>

    <Target Name="_nBuildKit_PushTo_GitHubRelease_DebugLog"
            Condition="$(ShouldDisplayDebugLog)" >
        <Message Text="Project directory structure:" />
        <Message Text="The workspace is located at:                                       $(DirWorkspace)" />
        <Message Text="The directory containing the build output is located at:           $(DirBuild)" />
        <Message Text="The directory containing the deliverables is located at:           $(DirBuildDeploy)" />
        <Message Text="The directory containing the nBuildKit scripts is located at:      $(DirMsBuildExtensions)" />
        <Message Text="The directory containing the nBuildKit templates is located at:    $(DirMsBuildTemplates)" />
        <Message Text="The directory containing the nBuildKit shared files is located at: $(DirMsBuildShared)" />
        <Message Text=" " />

        <Message Text="The semantic version file is located at:                           $(FileSemanticVersion)" />
        <Message Text=" " />

        <Message Text="GitHub-Release command line executable is located at:              $(ToolsExternalGitHubRelease)" />
        <Message Text=" " />
    </Target>

    <Target Name="_nBuildKit_PushTo_GitHubRelease_GetVersion">
        <GetSemanticVersionFromFile VersionFile="$(FileSemanticVersion)"
                                    Condition="Exists('$(FileSemanticVersion)') AND '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
        </GetSemanticVersionFromFile>
    </Target>

    <Target Name="_nBuildKit_PushTo_GitHubRelease_Push"
            Condition=" '@(PushToGitHubReleaseSpecs)' != ''"
            Outputs="%(PushToGitHubReleaseSpecs.Identity)">
        <Error Text="No GitHub-Release executable defined. Will not be able to push a release to GitHub."
               Condition=" ('$(ToolsExternalGitHubRelease)' == '' OR '$(ToolsExternalGitHubRelease)' == 'UNDEFINED') AND '$(ShouldExecute)' == 'true' " />
        <Error Text="No GitHub user name specified. Will not be able to push a release to GitHub."
               Condition=" ('$(GitHubUserName)' == '' OR '$(GitHubUserName)' == 'UNDEFINED' ) AND '$(ShouldExecute)' == 'true' " />

        <!-- Process the build templates in the name -->
        <Message Text="Translating the release name. Currently at: %(PushToGitHubReleaseSpecs.Identity)" />
        <TemplateText Template="%(PushToGitHubReleaseSpecs.Identity)"
                      Tokens="@(TemplateTokens)"
                      Condition=" '%(PushToGitHubReleaseSpecs.Identity)' != '' ">
            <Output TaskParameter="Result" PropertyName="GitHubReleaseName" />
        </TemplateText>

        <!-- Process the build templates in the included files -->
        <Message Text="Translating the included files. Currently at: %(PushToGitHubReleaseSpecs.IncludedFiles)" />
        <TemplateText Template="%(PushToGitHubReleaseSpecs.IncludedFiles)"
                      Tokens="@(TemplateTokens)"
                      Condition=" '%(PushToGitHubReleaseSpecs.IncludedFiles)' != '' ">
            <Output TaskParameter="Result" PropertyName="GitHubReleaseIncludedFiles" />
        </TemplateText>

        <!-- Process the build templates in the excluded files -->
        <Message Text="Translating the excluded files. Currently at: %(PushToGitHubReleaseSpecs.ExcludedFiles)" />
        <TemplateText Template="%(PushToGitHubReleaseSpecs.ExcludedFiles)"
                      Tokens="@(TemplateTokens)"
                      Condition=" '%(PushToGitHubReleaseSpecs.ExcludedFiles)' != '' ">
            <Output TaskParameter="Result" PropertyName="GitHubReleaseExcludedFiles" />
        </TemplateText>

        <!-- Process the build templates in the description -->
        <Message Text="Translating the description. Currently at: %(PushToGitHubReleaseSpecs.Description)" />
        <TemplateText Template="%(PushToGitHubReleaseSpecs.Description)"
                      Tokens="@(TemplateTokens)"
                      Condition=" '%(PushToGitHubReleaseSpecs.Description)' != '' ">
            <Output TaskParameter="Result" PropertyName="GitHubReleaseDescription" />
        </TemplateText>
        <Error Text="No release description specified. Will not be able to push a release to GitHub."
               Condition=" '$(GitHubReleaseDescription)' == '' AND '$(ShouldExecute)' == 'true' " />

        <!--
            Create the ItemGroup dynamically because creating an ItemGroup in the target with the dynamically
            created properties doesn't work because the wildcards are not always expanded for some reason.
        -->
        <CreateItem
            Include="$(GitHubReleaseIncludedFiles.Split(';'))"
            Exclude="$(GitHubReleaseExcludedFiles.Split(';'))">
           <Output
               TaskParameter="Include"
               ItemName="GitHubReleaseFiles"/>
        </CreateItem>

        <CreateProperty Value="%(PushToGitHubReleaseSpecs.Repository)">
            <Output TaskParameter="Value" PropertyName="GitHubReleaseRepository" />
        </CreateProperty>
        <Error Text="No GitHub repository specified. Will not be able to push a release to GitHub."
               Condition=" '$(GitHubReleaseRepository)' == '' AND '$(ShouldExecute)' == 'true' " />

        <!-- Create the release -->
        <Message Text="Creating a release on GitHub with: " />
        <Message Text="Repository:  $(GitHubUserName)/$(GitHubReleaseRepository)" />
        <Message Text="Tag:         $(VersionSemantic)" />
        <Message Text="Name:        $(GitHubReleaseName)" />
        <Message Text="Description: $(GitHubReleaseDescription)" />
        <GitHubReleaseCreate GitHubReleasePath="$(ToolsExternalGitHubRelease)"
                             LocalPath="$(DirWorkspace)"
                             UserName="$(GitHubUserName)"
                             Repository="$(GitHubReleaseRepository)"
                             Tag="$(VersionSemantic)"
                             ReleaseName="$(GitHubReleaseName)"
                             ReleaseDescription="$(GitHubReleaseDescription)"
                             Condition=" '$(ShouldExecute)' == 'true' "/>

        <!-- Upload the files -->
        <Message Text="Uploading files to release $(GitHubReleaseName) " />
        <Message Text="%(GitHubReleaseFiles.FullPath)" />
        <GitHubReleaseUpload GitHubReleasePath="$(ToolsExternalGitHubRelease)"
                             LocalPath="$(DirWorkspace)"
                             UserName="$(GitHubUserName)"
                             Repository="$(GitHubReleaseRepository)"
                             Tag="$(VersionSemantic)"
                             FileName="%(GitHubReleaseFiles.Filename)%(GitHubReleaseFiles.Extension)"
                             FilePath="%(GitHubReleaseFiles.FullPath)"
                             Condition=" '@(GitHubReleaseFiles)' != '' AND '$(ShouldExecute)' == 'true' " />
    </Target>
</Project>