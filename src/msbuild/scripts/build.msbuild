<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="nBuildKit_Build_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <!-- Note the current script is not meant to be imported! -->
        <ExistsBuild>true</ExistsBuild>
        
        <!-- The full path to the settings file that contains all the settings for the build process -->    
        <BuildPropertyFile Condition=" '$(BuildPropertyFile)' == '' ">UNDEFINED</BuildPropertyFile>
        
        <!-- 
            Define the DirWorkspace before importing the BuildPropertyFile so that it is defined and can be used by
            the properties in the BuildPropertyFile. Note that we can't define it in the BuildPropertyFile because that
            is imported which means there is no way to get the path of the file.
        -->
        <DirWorkspace Condition=" '$(DirWorkspace)' == '' ">$([System.IO.Path]::GetDirectoryName('$(BuildPropertyFile)'))</DirWorkspace>

        <!-- The full path to the location of the scripts -->
        <DirMsBuildScripts>$(MSBuildProjectDirectory)</DirMsBuildScripts>
    </PropertyGroup>
    <PropertyGroup>
        <BuildStepsPrepareWorkspace>$(DirMsBuildScripts)\prepare.workspace.msbuild</BuildStepsPrepareWorkspace>
        <BuildStepsPrepareRestoreNuGet>$(DirMsBuildScripts)\prepare.nuget.restore.msbuild</BuildStepsPrepareRestoreNuGet>
        <BuildStepsPrepareGetVersion>$(DirMsBuildScripts)\prepare.getversion.msbuild</BuildStepsPrepareGetVersion>
        <BuildStepsPrepareReleaseNotes>$(DirMsBuildScripts)\prepare.gatherreleasenotes.msbuild</BuildStepsPrepareReleaseNotes>
        <BuildStepsPrepareVcsInfo>$(DirMsBuildScripts)\prepare.vcsinfo.msbuild</BuildStepsPrepareVcsInfo>
        <BuildStepsPrepareGenerateFiles>$(DirMsBuildScripts)\prepare.generatefiles.msbuild</BuildStepsPrepareGenerateFiles>
        
        <BuildStepsAnalyzeSourceCcm>$(DirMsBuildScripts)\analyze.source.ccm.msbuild</BuildStepsAnalyzeSourceCcm>
        <BuildStepsAnalyzeSourceSouceMonitor>$(DirMsBuildScripts)\analyze.source.sourcemonitor.msbuild</BuildStepsAnalyzeSourceSouceMonitor>

        <BuildStepsBuildVisualStudioSolution>$(DirMsBuildScripts)\build.binaries.msbuild</BuildStepsBuildVisualStudioSolution>
        
        <BuildStepsUnitTestNUnit>$(DirMsBuildScripts)\test.unit.nunit.msbuild</BuildStepsUnitTestNUnit>
        <BuildStepsUnitTestMsTest>$(DirMsBuildScripts)\test.unit.mstest.msbuild</BuildStepsUnitTestMsTest>

        <BuildStepsAnalyzeBinariesMoma>$(DirMsBuildScripts)\analyze.binaries.moma.msbuild</BuildStepsAnalyzeBinariesMoma>
        <BuildStepsAnalyzeBinariesFxCop>$(DirMsBuildScripts)\analyze.binaries.fxcop.msbuild</BuildStepsAnalyzeBinariesFxCop>

        <BuildStepsBuildApiDocumentationWithSandcastle>$(DirMsBuildScripts)\build.apidocumentation.sandcastle.msbuild</BuildStepsBuildApiDocumentationWithSandcastle>
        
        <BuildStepsPackNuGet>$(DirMsBuildScripts)\pack.nuget.msbuild</BuildStepsPackNuGet>
        <BuildStepsPackZip>$(DirMsBuildScripts)\pack.zip.msbuild</BuildStepsPackZip>
    </PropertyGroup>

    <Import Project="$(BuildPropertyFile)"
            Condition="Exists('$(BuildPropertyFile)') AND '$(ExistsSettings)' != 'true' " />
    
    <!-- Default values for all the properties in case they were not overriden -->
    <PropertyGroup>
        <!-- Build flags -->
        <ShouldDisplayDebugLog Condition=" '$(ShouldDisplayDebugLog)' == '' ">true</ShouldDisplayDebugLog>
        <ShouldExecute Condition=" '$(ShouldExecute)' == '' ">true</ShouldExecute>
        <ShouldClean Condition=" '$(ShouldClean)' == '' ">true</ShouldClean>
        
        <!-- Configurations -->
        <TestConfiguration Condition=" '$(TestConfiguration)' == '' ">release</TestConfiguration>
        <ProductionConfiguration Condition=" '$(ProductionConfiguration)' == '' ">release</ProductionConfiguration>
        <Platform Condition=" '$(Platform)' == '' ">Any CPU</Platform>
        
        <!-- Directory structure -->
        <DirBuild Condition=" '$(DirBuild)' == '' ">$(DirWorkspace)\build</DirBuild>
        <DirBuildDeploy Condition=" '$(DirBuildDeploy)' == '' ">$(DirBuild)\deploy</DirBuildDeploy>
        <DirBuildLogs Condition=" '$(DirBuildLogs)' == '' ">$(DirBuild)\logs</DirBuildLogs>
        <DirBuildTemp Condition=" '$(DirBuildTemp)' == '' ">$(DirBuild)\temp</DirBuildTemp>
        <DirPackages Condition=" '$(DirPackages)' == '' ">$(DirWorkspace)\packages</DirPackages>
        <DirSrc Condition=" '$(DirSrc)' == '' ">$(DirWorkspace)\src</DirSrc>
        <DirTemplates Condition=" '$(DirTemplates)' == '' ">$(DirWorkspace)\templates</DirTemplates>
        
        <DirMsBuildExtensions Condition=" '$(DirMsBuildExtensions)' == '' ">$(MSBuildProjectDirectory)\extensions</DirMsBuildExtensions>
        <DirMsBuildShared Condition=" '$(DirMsBuildShared)' == '' ">$(MSBuildProjectDirectory)</DirMsBuildShared>
        <DirMsBuildTemplates Condition=" '$(DirMsBuildTemplates)' == '' ">$(MSBuildProjectDirectory)\templates</DirMsBuildTemplates>
        
        <!-- Report directories -->
        <DirReportMoma Condition=" '$(DirReportMoma)' == '' ">$(DirBuildLogs)\moma</DirReportMoma>
        
        <!-- Files -->
        <FileVersionMsBuild Condition=" '$(FileVersionMsBuild)' == '' ">$(DirWorkspace)\version.xml</FileVersionMsBuild>
        <FileSemanticVersion Condition=" '$(FileSemanticVersion)' == '' ">$(DirBuildTemp)\semantic_version.json</FileSemanticVersion>
        <FileReleaseNotesShort Condition=" '$(FileReleaseNotesShort)' == '' ">$(DirBuildTemp)\releasenotes_short.md</FileReleaseNotesShort>
        <FileReleaseNotesFull Condition=" '$(FileReleaseNotesFull)' == '' ">$(DirBuildTemp)\releasenotes_full.md</FileReleaseNotesFull>
        <FileVcsInfo Condition=" '$(FileVcsInfo)' == '' ">$(DirBuildTemp)\vcs.info.json</FileVcsInfo>
        <FileTemplateCcm Condition=" '$(FileTemplateCcm)' == '' ">$(DirTemplates)\ccm.xml.in</FileTemplateCcm>
        <FileReportCcm Condition=" '$(FileReportCcm)' == '' ">$(DirBuildLogs)\ccm.xml</FileReportCcm>
        <FileTemplateSourceMonitor Condition=" '$(FileTemplateSourceMonitor)' == '' ">$(DirTemplates)\sourcemonitor.xml.in</FileTemplateSourceMonitor>
        <FileReportSourceMonitor Condition=" '$(FileReportSourceMonitor)' == '' ">$(DirBuildLogs)\sourcemonitor.xml</FileReportSourceMonitor>
        <FileSln Condition=" '$(FileSln)' == '' ">UNDEFINED</FileSln>
        <FileReportMsTest Condition=" '$(FileReportMsTest)' == '' ">$(DirBuildLogs)\mstest.trx</FileReportMsTest>
        <FileReportOpenCoverXml Condition=" '$(FileReportOpenCoverXml)' == '' ">$(DirBuildLogs)\opencover.xml</FileReportOpenCoverXml>
        <FileReportOpenCoverCsv Condition=" '$(FileReportOpenCoverCsv)' == '' ">$(DirBuildLogs)\coverage.csv</FileReportOpenCoverCsv>
        <FileReportMoma Condition=" '$(FileReportMoma)' == '' ">$(DirReportMoma)\moma.html</FileReportMoma>
        <FileProjectFxCop Condition=" '$(FileProjectFxCop)' == '' ">UNDEFINED</FileProjectFxCop>
        <FileReportFxCop Condition=" '$(FileReportFxCop)' == '' ">$(DirBuildLogs)\fxcop.xml</FileReportFxCop>
        <FileTemplateSandcastle Condition=" '$(FileTemplateSandcastle)' == '' ">$(DirTemplates)\sandcastle.shfbproj.in</FileTemplateSandcastle>
        
        <!-- Unit tests -->
        <UnitTestAssemblyNamePrefix Condition=" '$(UnitTestAssemblyNamePrefix)' == '' " >test.unit</UnitTestAssemblyNamePrefix>
        
        <!-- External tools -->
        <ToolsExternalCcmPath Condition=" '$(ToolsExternalCcmPath)' == '' ">UNDEFINED</ToolsExternalCcmPath>
        <ToolsExternalFxCopDir Condition=" '$(ToolsExternalFxCopDir)' == '' "></ToolsExternalFxCopDir>
        <ToolsExternalGitHubFlowVersionPath Condition=" '$(ToolsExternalGitHubFlowVersionPath)' == '' ">UNDEFINED</ToolsExternalGitHubFlowVersionPath>
        <ToolsExternalGitPath Condition=" '$(ToolsExternalGitPath)' == '' ">git.exe</ToolsExternalGitPath>
        <ToolsExternalGitReleaseNotesPath Condition=" '$(ToolsExternalGitReleaseNotesPath)' == '' ">UNDEFINED</ToolsExternalGitReleaseNotesPath>
        <ToolsExternalMomaPath Condition=" '$(ToolsExternalMomaPath)' == '' ">UNDEFINED</ToolsExternalMomaPath>
        <ToolsExternalMsTestPath Condition=" '$(ToolsExternalMsTestPath)' == '' ">C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\MsTest.exe</ToolsExternalMsTestPath>
        <ToolsExternalNuGetPath Condition=" '$(ToolsExternalNuGetPath)' == '' ">NuGet.exe</ToolsExternalNuGetPath>
        <ToolsExternalNUnitConsolePath Condition=" '$(ToolsExternalNUnitConsolePath)' == '' "></ToolsExternalNUnitConsolePath>
        <ToolsExternalOpenCoverPath Condition=" '$(ToolsExternalOpenCoverPath)' == '' ">UNDEFINED</ToolsExternalOpenCoverPath>
        <ToolsExternalReportGeneratorPath Condition=" '$(ToolsExternalReportGeneratorPath)' == '' ">UNDEFINED</ToolsExternalReportGeneratorPath>
        <ToolsExternalSourceMonitorPath Condition=" '$(ToolsExternalSourceMonitorPath)' == '' ">UNDEFINED</ToolsExternalSourceMonitorPath>
        
        <!-- 
            Each build file needs to have the paths passed in so that the default directory paths are always known.
            To prevent having to provide them in a lengthy line each time we'll store them here 
        -->
        <DefaultPathProperties>
            DirWorkspace=$(DirWorkspace);
            DirBuild=$(DirBuild);
            DirBuildDeploy=$(DirBuildDeploy);
            DirBuildLogs=$(DirBuildLogs);
            DirBuildTemp=$(DirBuildTemp);
            DirPackages=$(DirPackages);
            DirSrc=$(DirSrc);
            DirTemplates=$(DirTemplates);
            DirMsBuildExtensions=$(DirMsBuildExtensions);
            DirMsBuildShared=$(DirMsBuildShared);
            DirMsBuildTemplates=$(DirMsBuildTemplates)
        </DefaultPathProperties>
        <DefaultFiles>
            FileVersionSemantic=&quot;$(FileSemanticVersion)&quot;
        </DefaultFiles>
        <DefaultProperties>
            ShouldDisplayDebugLog=$(ShouldDisplayDebugLog);
            ShouldExecute=$(ShouldExecute);
            NBuildKitVersion=$(NBuildKitVersion)
        </DefaultProperties>
    </PropertyGroup>
    
    <Target Name="nBuildKit_Build_Run" DependsOnTargets="_nBuildKit_Build_DisplayInfo">
        <Error Text="No build properties file was defined."
               Condition=" '$(BuildPropertyFile)' == 'UNDEFINED' " />
        
        <!-- Execute all the build tasks in the given order -->
        <CallTarget Targets="_nBuildKit_Build_Execute" />
    </Target>
    
    <Target Name="_nBuildKit_Build_DisplayInfo" DependsOnTargets="_nBuildKit_Build_DebugLog">
        <Message Text="Building ..." />
    </Target>
    
    <Target Name="_nBuildKit_Build_DebugLog" Condition="$(ShouldDisplayDebugLog)">
        <!-- Display all the configuration values here -->
        <Message Text="Configuration values:" />
        <Message Text="ShouldClean:             $(ShouldClean)" />
        
        <Message Text="TestConfiguration:       $(TestConfiguration)" />
        <Message Text="ProductionConfiguration: $(ProductionConfiguration)" />
        <Message Text="Platform:                $(Platform)" />
                 
        <Message Text=" " />
        
        <!-- Display the targets that will be executed -->
        <Message Text="Executing targets: @(BuildStepsToExecute->'%(identity)', '; ')" 
                 Condition=" '@(BuildStepsToExecute)' != ''" />
        <Message Text="Executing targets: NONE" 
                 Condition=" '@(BuildStepsToExecute)' == ''" />        
                 
        <Message Text=" " />
                 
        <!-- Display the known directories -->
        <Message Text="Project directory structure:"/>
        <Message Text="The workspace is located at:                                      $(DirWorkspace)" />
        <Message Text="The directory containing the build output is located at:          $(DirBuild)" />
        <Message Text="The directory containing the deliverables is located at:          $(DirBuildDeploy)" />
        <Message Text="The directory containing the build logs is located at:            $(DirBuildLogs)" />
        <Message Text="The directory containing the temporary build files is located at: $(DirBuildTemp)" />
        <Message Text="The directory containing the NuGet packages is located at:        $(DirPackages)" />
        <Message Text="The directory containing the source code is located at:           $(DirSrc)" />
        <Message Text="The directory containing the local template files is located at:  $(DirTemplates)" />
        <Message Text="The directory containing the nBuildKit scripts is located at:     $(DirMsBuildExtensions)" />
        <Message Text="The directory containing the nBuildKit templates is located at:   $(DirMsBuildTemplates)" />
        <Message Text=" " />
        
        <Message Text="Project files:" />
        <Message Text="The MsBuild XML version file is located at:                                  $(FileVersionMsBuild)" 
                 Condition="Exists('$(FileVersionMsBuild)')" />
        <Message Text="The semantic version file is located at:                                     $(FileSemanticVersion)" />
        <Message Text="The file containing the release notes for the current release is located at: $(FileReleaseNotesShort)" />
        <Message Text="The file containing the release notes for all releases is located at:        $(FileReleaseNotesFull)" />
        <Message Text="The VCS info file is located at:                                             $(FileVcsInfo)" />
        <Message Text="The CCM template file is located at:                                         $(FileTemplateCcm)" />
        <Message Text="The CCM report file is located at:                                           $(FileReportCcm)" />
        <Message Text="The SourceMonitor template file is located at:                               $(FileTemplateSourceMonitor)" />
        <Message Text="The SourceMonitor report file is located at:                                 $(FileReportSourceMonitor)" />
        <Message Text="Solution file is located at:                                                 $(FileSln)" />
        <Message Text="The MsTest report will be located at:                                        $(FileReportMsTest)" />
        <Message Text="The OpenCover XML report will be located at:                                 $(FileReportOpenCoverXml)" />
        <Message Text="The OpenCover CSV report will be located at:                                 $(FileReportOpenCoverCsv)" />
        <Message Text="The MoMA report file is located at:                                          $(FileReportMoma)" />
        <Message Text="The FxCop project file is located at:                                        $(FileProjectFxCop)" />
        <Message Text="The FxCop report file is located at:                                         $(FileReportFxCop)" />
        <Message Text="The sandcastle template file is located at:                                  $(FileTemplateSandcastle)" />
        <Message Text=" " />
        
        <Message Text="External tools:" />
        <Message Text="NuGet command line executable is located at:      $(ToolsExternalNuGetPath)" />
        <Message Text="GIT command line executable is located at:        $(ToolsExternalGitPath)" />
        <Message Text="The MsTest command line executable is located at: $(ToolsExternalMsTestPath)" />
        <Message Text="FxCop command line executable is located at:      $(ToolsExternalFxCopDir)" />
        <Message Text=" " />
    </Target>
    
    <Target Name="_nBuildKit_Build_Execute"
            Condition=" '@(BuildStepsToExecute)' != ''">

        <MSBuild
            BuildInParallel="False"
            Projects="%(BuildStepsToExecute.Identity)"
            Properties="BuildPropertyFile=$(BuildPropertyFile);$(DefaultProperties);$(DefaultPathProperties);$(DefaultFiles);%(BuildStepsToExecute.Properties)"
            RebaseOutputs="False"
            RemoveProperties=""
            RunEachTargetSeparately="True"
            SkipNonexistentProjects="False"
            StopOnFirstFailure="True"
            TargetAndPropertyListSeparators=""
            Targets=""
            ToolsVersion="$(MSBuildToolsVersion)"
            UnloadProjectsOnCompletion="False"
            UseResultsCache="True">
            <!-- <Output TaskParameter="TargetOutputs" ItemName="" /> -->
        </MSBuild>

        <OnError ExecuteTargets="_nBuildKit_Build_OnError" />
    </Target>

    <Target Name="_nBuildKit_Build_OnError">
        <MSBuild
            BuildInParallel="False"
            Projects="%(BuildFailureStepsToExecute.Identity)"
            Properties="BuildPropertyFile=$(BuildPropertyFile);$(DefaultProperties);$(DefaultPathProperties);$(DefaultFiles);%(BuildFailureStepsToExecute.Properties)"
            RebaseOutputs="False"
            RemoveProperties=""
            RunEachTargetSeparately="True"
            SkipNonexistentProjects="False"
            StopOnFirstFailure="False"
            TargetAndPropertyListSeparators=""
            Targets=""
            ToolsVersion="$(MSBuildToolsVersion)"
            UnloadProjectsOnCompletion="False"
            UseResultsCache="True"
            Condition=" '@(BuildFailureStepsToExecute)' != '' ">
        </MSBuild>
    </Target>
</Project>