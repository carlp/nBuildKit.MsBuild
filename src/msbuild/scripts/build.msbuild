<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="nBuildKit_Build_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <BuildPropertyFile Condition=" '$(BuildPropertyFile)' == '' ">UNDEFINED</BuildPropertyFile>
    </PropertyGroup>
    <PropertyGroup>
        <BuildTargetPrepare>Prepare</BuildTargetPrepare>
        <BuildTargetAnalyzeSource>AnalyzeSource</BuildTargetAnalyzeSource>
        <BuildTargetAnalyzeBinaries>AnalyzeBinaries</BuildTargetAnalyzeBinaries>
        <BuildTargetBuildBinaries>BuildBinaries</BuildTargetBuildBinaries>
        <BuildTargetBuildApiDocumentation>BuildApiDocumentation</BuildTargetBuildApiDocumentation>
        <BuildTargetExecuteUnitTests>TestUnit</BuildTargetExecuteUnitTests>
        <BuildTargetPackage>Package</BuildTargetPackage>
        
        <BuildStepsPrepareRestoreNuGet>NuGetRestore</BuildStepsPrepareRestoreNuGet>
        <BuildStepsPrepareReleaseNotes>ReleaseNotes</BuildStepsPrepareReleaseNotes>
        <BuildStepsPrepareVcsInfo>VcsInfo</BuildStepsPrepareVcsInfo>
        <BuildStepsAnalyzeSourceCcm>Ccm</BuildStepsAnalyzeSourceCcm>
        <BuildStepsAnalyzeSourceSouceMonitor>SourceMonitor</BuildStepsAnalyzeSourceSouceMonitor>
        <BuildStepsAnalyzeBinariesMoma>Moma</BuildStepsAnalyzeBinariesMoma>
        <BuildStepsAnalyzeBinariesFxCop>FxCop</BuildStepsAnalyzeBinariesFxCop>
        <BuildStepsUnitTestNUnit>NUnit</BuildStepsUnitTestNUnit>
        <BuildStepsUnitTestMsTest>MsTest</BuildStepsUnitTestMsTest>
        <BuildStepsPackNuGet>NuGetPackage</BuildStepsPackNuGet>
        <BuildStepsPackZip>Zip</BuildStepsPackZip>
    </PropertyGroup>
    <ItemGroup>
        <BuildTargets Include="$(BuildTargetPrepare)">
            <Order>1</Order>
            <TargetToExecute>_nBuildKit_Build_Prepare</TargetToExecute>
        </BuildTargets>
        
        <BuildTargets Include="$(BuildTargetAnalyzeSource)">
            <Order>2</Order>
            <TargetToExecute>_nBuildKit_Build_Analyze_Source</TargetToExecute>
        </BuildTargets>
        
        <BuildTargets Include="$(BuildTargetBuildBinaries)">
            <Order>3</Order>
            <TargetToExecute>_nBuildKit_Build_Build_Binaries</TargetToExecute>
        </BuildTargets>
        
        <BuildTargets Include="$(BuildTargetExecuteUnitTests)">
            <Order>4</Order>
            <TargetToExecute>_nBuildKit_Build_Test_Unit</TargetToExecute>
        </BuildTargets>
        
        <BuildTargets Include="$(BuildTargetAnalyzeBinaries)">
            <Order>5</Order>
            <TargetToExecute>_nBuildKit_Build_Analyze_Binaries</TargetToExecute>
        </BuildTargets>
        
        <BuildTargets Include="$(BuildTargetBuildApiDocumentation)">
            <Order>6</Order>
            <TargetToExecute>_nBuildKit_Build_Build_ApiDocumentation</TargetToExecute>
        </BuildTargets>
        
        <BuildTargets Include="$(BuildTargetPackage)">
            <Order>7</Order>
            <TargetToExecute>_nBuildKit_Build_Package</TargetToExecute>
        </BuildTargets>
    </ItemGroup>

    <Import Project="$(BuildPropertyFile)"
            Condition="Exists('$(BuildPropertyFile)')" />
    
    <!-- Default values for all the properties in case they were not overriden -->
    <PropertyGroup>
        <!-- Product & Company information -->
        <ProductName Condition=" '$(ProductName)' == '' ">Apollo</ProductName>
    
        <!-- Build flags -->
        <ShouldDisplayDebugLog Condition=" '$(ShouldDisplayDebugLog)' == '' ">true</ShouldDisplayDebugLog>
        <ShouldExecute Condition=" '$(ShouldExecute)' == '' ">true</ShouldExecute>
        <ShouldClean Condition=" '$(ShouldClean)' == '' ">true</ShouldClean>
        
        <!-- Configurations -->
        <TestConfiguration Condition=" '$(TestConfiguration)' == '' ">release</TestConfiguration>
        <ProductionConfiguration Condition=" '$(ProductionConfiguration)' == '' ">release</ProductionConfiguration>
        <Platform Condition=" '$(Platform)' == '' ">Any CPU</Platform>
        
        <!-- Directory structure -->
        <DirWorkspace Condition=" '$(DirWorkspace)' == '' ">$([System.IO.Path]::GetDirectoryName('$(BuildPropertyFile)'))</DirWorkspace>
        <DirBuild Condition=" '$(DirBuild)' == '' ">$(DirWorkspace)\build</DirBuild>
        <DirBuildDeploy Condition=" '$(DirBuildDeploy)' == '' ">$(DirBuild)\deploy</DirBuildDeploy>
        <DirBuildLogs Condition=" '$(DirBuildLogs)' == '' ">$(DirBuild)\logs</DirBuildLogs>
        <DirBuildTemp Condition=" '$(DirBuildTemp)' == '' ">$(DirBuild)\temp</DirBuildTemp>
        <DirPackages Condition=" '$(DirPackages)' == '' ">$(DirWorkspace)\packages</DirPackages>
        <DirSrc Condition=" '$(DirSrc)' == '' ">$(DirWorkspace)\src</DirSrc>
        <DirTemplates Condition=" '$(DirTemplates)' == '' ">$(DirWorkspace)\templates</DirTemplates>
        <DirMsBuildExtensions Condition=" '$(DirMsBuildExtensions)' == '' ">$(MSBuildProjectDirectory)\extensions</DirMsBuildExtensions>
        
        <!-- Report directories -->
        <DirReportMoma Condition=" '$(DirReportMoma)' == '' ">$(DirBuildLogs)\moma</DirReportMoma>
        
        <!-- Files -->
        <FileVersionMsBuild Condition=" '$(FileVersionMsBuild)' == '' ">$(DirWorkspace)\version.xml</FileVersionMsBuild>
        <FileSemanticVersion Condition=" '$(FileSemanticVersion)' == '' ">$(DirBuildTemp)\semantic_version.json</FileSemanticVersion>
        <FileReleaseNotesShort Condition=" '$(FileReleaseNotesShort)' == '' ">$(DirBuildTemp)\releasenotes_short.md</FileReleaseNotesShort>
        <FileReleaseNotesFull Condition=" '$(FileReleaseNotesFull)' == '' ">$(DirBuildTemp)\releasenotes_full.md</FileReleaseNotesFull>
        <FileTemplateCcm Condition=" '$(FileTemplateCcm)' == '' ">$(DirTemplates)\ccm.xml.in</FileTemplateCcm>
        <FileReportCcm Condition=" '$(FileReportCcm)' == '' ">$(DirBuildLogs)\ccm.xml</FileReportCcm>
        <FileTemplateSourceMonitor Condition=" '$(FileTemplateSourceMonitor)' == '' ">$(DirTemplates)\sourcemonitor.xml.in</FileTemplateSourceMonitor>
        <FileReportSourceMonitor Condition=" '$(FileReportSourceMonitor)' == '' ">$(DirBuildLogs)\sourcemonitor.xml</FileReportSourceMonitor>
        <FileSln Condition=" '$(FileSln)' == '' ">UNDEFINED</FileSln>
        <FileReportMoma Condition=" '$(FileReportMoma)' == '' ">$(DirReportMoma)\moma.html</FileReportMoma>
        <FileProjectFxCop Condition=" '$(FileProjectFxCop)' == '' ">UNDEFINED</FileProjectFxCop>
        <FileReportFxCop Condition=" '$(FileReportFxCop)' == '' ">$(DirBuildLogs)\fxcop.xml</FileReportFxCop>
        <FileTemplateSandcastle Condition=" '$(FileTemplateSandcastle)' == '' ">$(DirTemplates)\sandcastle.shfbproj.in</FileTemplateSandcastle>
        
        <!-- External tools -->
        <ToolsExternalNuGetPath Condition=" '$(ToolsExternalNuGetPath)' == '' ">NuGet.exe</ToolsExternalNuGetPath>
        <ToolsExternalFxCopDir Condition=" '$(ToolsExternalFxCopDir)' == '' "></ToolsExternalFxCopDir>
        
        <!-- Each build file needs to have the paths passed in, to prevent having to provide them in a lengthy line each time we'll store them here -->
        <DefaultPathProperties>DirWorkspace=$(DirWorkspace);DirBuild=$(DirBuild);DirBuildDeploy=$(DirBuildDeploy);DirBuildLogs=$(DirBuildLogs);DirBuildTemp=$(DirBuildTemp);DirPackages=$(DirPackages);DirSrc=$(DirSrc);DirMsBuildExtensions=$(DirMsBuildExtensions)</DefaultPathProperties>
        <DefaultFiles>FileVersionSemantic=&quot;$(FileSemanticVersion)&quot;</DefaultFiles>
        <DefaultSwitches>ShouldDisplayDebugLog=$(ShouldDisplayDebugLog);ShouldExecute=$(ShouldExecute)</DefaultSwitches>
    </PropertyGroup>
    
    <Import Project="$(DirMsBuildExtensions)\SortItemGroupByKey.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\SortItemGroupByKey.msbuild')" />
    
    <Target Name="nBuildKit_Build_Run" DependsOnTargets="_nBuildKit_Build_OrderTargets;_nBuildKit_Build_DisplayInfo">
        <!-- If there is no property file then we die -->
        <Error Text="No build properties file was defined."
               Condition=" '$(BuildPropertyFile)' == 'UNDEFINED' " />
        
        <!-- Execute all the build tasks in the given order -->
        <CallTarget Targets="%(BuildTasksToExecute.TargetToExecute)" />
    </Target>
    
    <Target Name="_nBuildKit_Build_OrderTargets">
        <!-- Generate the task list in the right order -->
        <FindInList List="@(BuildTargets)" ItemSpecToFind="%(BuildStepsToExecute.Identity)">
            <Output TaskParameter="ItemFound" ItemName="UnsortedBuildTasksToExecute" />
        </FindInList>
        <SortItemGroupByKey Items="@(UnsortedBuildTasksToExecute)">
            <Output TaskParameter="SortedItems" ItemName="BuildTasksToExecute" />
        </SortItemGroupByKey>
    </Target>
    
    
    <Target Name="_nBuildKit_Build_DisplayInfo" DependsOnTargets="_nBuildKit_Build_DebugLog">
        <Message Text="Building ..." />
    </Target>
    
    <Target Name="_nBuildKit_Build_DebugLog" Condition="$(ShouldDisplayDebugLog)">
        <!-- Display all the configuration values here -->
        <Message Text="Configuration values:" />
        <Message Text="ShouldClean:             $(ShouldClean)" />
        
        <Message Text="TestConfiguration:       $(TestConfiguration)" />
        <Message Text="ProductionConfiguration: $(ProductionConfiguration)" />
        <Message Text="Platform:                $(Platform)" />
                 
        <Message Text=" " />
        
        <!-- Display the targets that will be executed -->
        <Message Text="Executing targets: @(BuildTasksToExecute->'%(identity)', '; ')" 
                 Condition=" '@(BuildTasksToExecute)' != ''" />
        <Message Text="Executing targets: NONE" 
                 Condition=" '@(BuildTasksToExecute)' == ''" />
                 
        <Message Text=" " />
                 
        <!-- Display the known directories -->
        <Message Text="Project directory structure:"/>
        <Message Text="The workspace is located at:                                      $(DirWorkspace)" />
        <Message Text="The directory containing the build output is located at:          $(DirBuild)" />
        <Message Text="The directory containing the deliverables is located at:          $(DirBuildDeploy)" />
        <Message Text="The directory containing the build logs is located at:            $(DirBuildLogs)" />
        <Message Text="The directory containing the temporary build files is located at: $(DirBuildTemp)" />
        <Message Text="The directory containing the NuGet packages is located at:        $(DirPackages)" />
        <Message Text="The directory containing the source code is located at:           $(DirSrc)" />
        <Message Text="The directory containing the template files is located at:        $(DirTemplates)" />
        <Message Text="The directory containing the nBuildKit scripts is located at:     $(DirMsBuildExtensions)" />
        <Message Text=" " />
        
        <Message Text="Project files:" />
        <Message Text="The MsBuild XML version file is located at:                                  $(FileVersionMsBuild)" 
                 Condition="Exists('$(FileVersionMsBuild)')" />
        <Message Text="The semantic version file is located at:                                     $(FileSemanticVersion)" />
        <Message Text="The file containing the release notes for the current release is located at: $(FileReleaseNotesShort)" />
        <Message Text="The file containing the release notes for all releases is located at:        $(FileReleaseNotesFull)" />
        <Message Text="The CCM template file is located at:                                         $(FileTemplateCcm)" />
        <Message Text="The CCM report file is located at:                                           $(FileReportCcm)" />
        <Message Text="Solution file is located at:                                                 $(FileSln)" />
        <Message Text="The Moma report file is located at:                                          $(FileReportMoma)" />
        <Message Text="The sandcastle template file is located at:                                  $(FileTemplateSandcastle)" />
        <Message Text=" " />
        
        <Message Text="External tools:" />
        <Message Text="NuGet command line executable is located at: $(ToolsExternalNuGetPath)" />
        <Message Text="FxCop command line executable is located at: $(ToolsExternalFxCopDir)" />
        <Message Text=" " />
    </Target>
    
    <!-- Prepare the workspace and create the necessary files for the build -->
    <PropertyGroup>
        <DirMsBuildScripts>$(MSBuildProjectDirectory)</DirMsBuildScripts>
    </PropertyGroup>
    <Target Name="_nBuildKit_Build_Prepare">
        <MsBuild Projects="%(BuildStepsToExecute.PreInvokeScripts)"
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetPrepare)' " />
        
        <MSBuild Projects="$(DirMsBuildScripts)\prepare.workspace.msbuild" 
                 Properties="BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)" />
        <MSBuild Projects="$(DirMsBuildScripts)\prepare.nuget.restore.msbuild"
                 Properties="BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetPrepare)' AND $([System.String]::new('%(BuildStepsToExecute.Steps)').Contains('$(BuildStepsPrepareRestoreNuGet)'))" />
        <MSBuild Projects="$(DirMsBuildScripts)\prepare.getversion.msbuild"
                 Properties="BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)" />
        <MSBuild Projects="$(DirMsBuildScripts)\prepare.gatherreleasenotes.msbuild"
                 Properties="BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetPrepare)' AND $([System.String]::new('%(BuildStepsToExecute.Steps)').Contains('$(BuildStepsPrepareReleaseNotes)'))" />
        <MSBuild Projects="$(DirMsBuildScripts)\prepare.vcsinfo.msbuild"
                 Properties="BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetPrepare)' AND $([System.String]::new('%(BuildStepsToExecute.Steps)').Contains('$(BuildStepsPrepareVcsInfo)'))" />
                 
        <MsBuild Projects="%(BuildStepsToExecute.PostInvokeScripts)"
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetPrepare)' " />
    </Target>
    
    <!-- Perform analysis on the source files -->
    <Target Name="_nBuildKit_Build_Analyze_Source">
        <MsBuild Projects="%(BuildStepsToExecute.PreInvokeScripts)"
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetAnalyzeSource)' " />
        
        <MSBuild Projects="$(DirMsBuildScripts)\analyze.source.ccm.msbuild"
                 Properties="BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetAnalyzeSource)' AND $([System.String]::new('%(BuildStepsToExecute.Steps)').Contains('$(BuildStepsAnalyzeSourceCcm)'))" />
        <MSBuild Projects="$(DirMsBuildScripts)\analyze.source.sourcemonitor.msbuild"
                 Properties="BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetAnalyzeSource)' AND $([System.String]::new('%(BuildStepsToExecute.Steps)').Contains('$(BuildStepsAnalyzeSourceSouceMonitor)'))" />
        
        <MsBuild Projects="%(BuildStepsToExecute.PostInvokeScripts)"
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetAnalyzeSource)' " />
    </Target>
    
    <!-- Build the binaries -->
    <PropertyGroup>
        <MsBuildBuildBinaries>$(DirMsBuildScripts)\build.binaries.msbuild</MsBuildBuildBinaries>
    </PropertyGroup>
    <Target Name="_nBuildKit_Build_Build_Binaries">
        <MsBuild Projects="%(BuildStepsToExecute.PreInvokeScripts)"
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetBuildBinaries)' " />
        
        <MSBuild Projects="$(MsBuildBuildBinaries)" 
                 Properties="Configuration=$(TestConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)" />
        <MSBuild Projects="$(MsBuildBuildBinaries)" 
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)" 
                 Condition=" '$(TestConfiguration)' != '$(ProductionConfiguration)' " />
        
        <MsBuild Projects="%(BuildStepsToExecute.PostInvokeScripts)"
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetBuildBinaries)' " />
    </Target>
    
    <!-- Execute the unit tests -->
    <Target Name="_nBuildKit_Build_Test_Unit">
        <MsBuild Projects="%(BuildStepsToExecute.PreInvokeScripts)"
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetExecuteUnitTests)' " />
        
        <MSBuild Projects="$(DirMsBuildScripts)\test.unit.nunit.msbuild" 
                 Properties="Configuration=$(TestConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetExecuteUnitTests)' AND $([System.String]::new('%(BuildStepsToExecute.Steps)').Contains('$(BuildStepsUnitTestNUnit)'))" />
        <MSBuild Projects="$(DirMsBuildScripts)\test.unit.mstest.msbuild" 
                 Properties="Configuration=$(TestConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)" 
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetExecuteUnitTests)' AND $([System.String]::new('%(BuildStepsToExecute.Steps)').Contains('$(BuildStepsUnitTestMsTest)'))" />
        
        <MsBuild Projects="%(BuildStepsToExecute.PostInvokeScripts)"
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetExecuteUnitTests)' " />
    </Target>
    
    <!-- Perform analysis on the binary files -->
    <Target Name="_nBuildKit_Build_Analyze_Binaries">
        <MsBuild Projects="%(BuildStepsToExecute.PreInvokeScripts)"
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetAnalyzeBinaries)' " />
        
        <MSBuild Projects="$(DirMsBuildScripts)\analyze.binaries.moma.msbuild" 
                 Properties="Configuration=$(TestConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetAnalyzeBinaries)' AND $([System.String]::new('%(BuildStepsToExecute.Steps)').Contains('$(BuildStepsAnalyzeBinariesMoma)'))" />
        <MSBuild Projects="$(DirMsBuildScripts)\analyze.binaries.fxcop.msbuild" 
                 Properties="Configuration=$(TestConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetAnalyzeBinaries)' AND $([System.String]::new('%(BuildStepsToExecute.Steps)').Contains('$(BuildStepsAnalyzeBinariesFxCop)'))" />
        
        <MsBuild Projects="%(BuildStepsToExecute.PostInvokeScripts)"
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetAnalyzeBinaries)' " />
    </Target>
    
    <!-- Build the API documentation -->
    <Target Name="_nBuildKit_Build_Build_ApiDocumentation">
        <MsBuild Projects="%(BuildStepsToExecute.PreInvokeScripts)"
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetBuildApiDocumentation)' " />
        
        <MSBuild Projects="$(DirMsBuildScripts)\build.apidocumentation.sandcastle.msbuild" 
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)" />
        
        <MsBuild Projects="%(BuildStepsToExecute.PostInvokeScripts)"
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetBuildApiDocumentation)' " />
    </Target>    
    
    <!-- Package the binaries -->
    <Target Name="_nBuildKit_Build_Package">
        <MsBuild Projects="%(BuildStepsToExecute.PreInvokeScripts)"
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetPackage)' " />
    
        <!-- Note that NuGet doesn't like putting files starting with 'package' in a nuget package -->
        <MSBuild Projects="$(DirMsBuildScripts)\pack.nuget.msbuild" 
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetPackage)' AND $([System.String]::new('%(BuildStepsToExecute.Steps)').Contains('$(BuildStepsPackNuGet)'))" />
        <MSBuild Projects="$(DirMsBuildScripts)\pack.zip.msbuild" 
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetPackage)' AND $([System.String]::new('%(BuildStepsToExecute.Steps)').Contains('$(BuildStepsPackZip)'))"/>
                 
        <MsBuild Projects="%(BuildStepsToExecute.PostInvokeScripts)"
                 Properties="Configuration=$(ProductionConfiguration);Platform=$(Platform);BuildPropertyFile=$(BuildPropertyFile);$(DefaultSwitches);$(DefaultPathProperties);$(DefaultFiles)"
                 Condition=" '%(BuildStepsToExecute.Identity)' == '$(BuildTargetPackage)' " />
    </Target>
</Project>