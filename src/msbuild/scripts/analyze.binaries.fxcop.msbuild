<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="nBuildKit_Analyze_Binaries_FxCop_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsAnalyzeBinariesFxCop>true</ExistsAnalyzeBinariesFxCop>

        <!-- The full path to the settings file that contains all the settings for the build process -->
        <BuildPropertyFile Condition=" '$(BuildPropertyFile)' == '' ">UNDEFINED</BuildPropertyFile>

        <!--
            Define the DirWorkspace before importing the BuildPropertyFile so that it is defined and can be used by
            the properties in the BuildPropertyFile. Note that we can't define it in the BuildPropertyFile because that
            is imported which means there is no way to get the path of the file.
        -->
        <DirWorkspace Condition=" '$(DirWorkspace)' == '' ">$([System.IO.Path]::GetDirectoryName('$(BuildPropertyFile)'))</DirWorkspace>
    </PropertyGroup>

    <Import Project="$(BuildPropertyFile)"
            Condition="Exists('$(BuildPropertyFile)') AND '$(ExistsSettings)' != 'true' " />

    <PropertyGroup>
        <!-- Build flags -->
        <ShouldDisplayDebugLog Condition=" '$(ShouldDisplayDebugLog)' == '' ">false</ShouldDisplayDebugLog>
        <ShouldExecute Condition=" '$(ShouldExecute)' == '' ">true</ShouldExecute>
        <FxCopWarningsAsErrors Condition=" '$(FxCopWarningsAsErrors)' == '' ">false</FxCopWarningsAsErrors>

        <!-- Build configuration -->
        <Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
        <Platform Condition=" '$(Platform)' == '' ">Any CPU</Platform>
        <PlatformWithoutSpaces>$(Platform.Replace(" ",""))</PlatformWithoutSpaces>

        <!-- Directories -->
        <DirBuild Condition=" '$(DirBuild)' == '' ">$(DirWorkspace)\build</DirBuild>
        <DirBuildBin Condition=" '$(DirBuildBin)' == '' ">$(DirBuild)\bin</DirBuildBin>
        <DirBuildBinPlatformConfig Condition=" '$(DirBuildBinPlatformConfig)' == '' ">$([System.IO.Path]::GetFullPath('$(DirBuildBin)\$(PlatformWithoutSpaces)\$(Configuration)'))</DirBuildBinPlatformConfig>
        <DirBuildLogs Condition=" '$(DirBuildLogs)' == '' ">$(DirBuild)\logs</DirBuildLogs>
        <DirPackages Condition=" '$(DirPackages)' == '' ">$(DirWorkspace)\packages</DirPackages>

        <!-- nBuildKit directories -->
        <DirMsBuildExtensions Condition=" '$(DirMsBuildExtensions)' == '' ">$(MSBuildProjectDirectory)\extensions</DirMsBuildExtensions>
        <DirMsBuildShared Condition=" '$(DirMsBuildShared)' == '' ">$(MSBuildProjectDirectory)</DirMsBuildShared>

        <!-- Files -->
        <FileProjectFxCop Condition=" '$(FileProjectFxCop)' == '' ">UNDEFINED</FileProjectFxCop>
        <FileReportFxCop Condition=" '$(FileReportFxCop)' == '' ">$(DirBuildLogs)\fxcop.xml</FileReportFxCop>

        <!-- External tools -->
        <ToolsExternalFxCopDir Condition=" '$(ToolsExternalFxCopDir)' == '' ">UNDEFINED</ToolsExternalFxCopDir>
    </PropertyGroup>

    <Import Project="$(DirMsBuildShared)\shared.templatetokens.msbuild"
            Condition="Exists('$(DirMsBuildShared)\shared.templatetokens.msbuild') AND '$(ExistsSharedTemplateTokens)' != 'true' " />

    <Import Project="$(DirMsBuildExtensions)\FxCopViaAssemblies.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\FxCopViaAssemblies.msbuild') AND '$(ExistsExtensionsFxCopViaAssemblies)' != 'true' "/>
    <Import Project="$(DirMsBuildExtensions)\FxCopFxCopViaProject.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\FxCopFxCopViaProject.msbuild') AND '$(ExistsExtensionsFxCopViaProject)' != 'true' "/>
    <Import Project="$(DirMsBuildExtensions)\SearchPackagesDirectoryForToolDirectory.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\SearchPackagesDirectoryForToolDirectory.msbuild') AND '$(ExistsExtensionsSearchPackagesDirectoryForToolDirectory)' != 'true' " />
    <Import Project="$(DirMsBuildExtensions)\TemplateText.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\TemplateText.msbuild') AND '$(ExistsExtensionsTemplateText)' != 'true' " />

    <Target Name="nBuildKit_Analyze_Binaries_FxCop_Run"
            DependsOnTargets="_nBuildKit_Analyze_Binaries_FxCop_DisplayInfo">
        <CallTarget Targets="_nBuildKit_Analyze_Binaries_FxCop_Analyze_WithProject"
                    Condition="Exists('$(FileProjectFxCop)')" />
        <CallTarget Targets="_nBuildKit_Analyze_Binaries_FxCop_Analyze_WithAssemblies"
                    Condition="!Exists('$(FileProjectFxCop)') AND '@(FxCopFiles)' != '' " />
        <CallTarget Targets="_nBuildKit_Analyze_Binaries_FxCop_Analyze_OnError"
                    Condition="!Exists('$(FileProjectFxCop)') AND  '@(FxCopFiles)' == '' " />
    </Target>

    <!-- Display info -->
    <Target Name="_nBuildKit_Analyze_Binaries_FxCop_DisplayInfo"
            DependsOnTargets="_nBuildKit_Analyze_Binaries_FxCop_DebugLog">
        <Message Text="Running FxCop ..." />
    </Target>

    <Target Name="_nBuildKit_Analyze_Binaries_FxCop_DebugLog"
            Condition="$(ShouldDisplayDebugLog)"
            DependsOnTargets="_nBuildKit_Analyze_Binaries_FxCop_ReplaceBuildTemplates">
        <Message Text="Project directory structure:" />
        <Message Text="The workspace is located at:                                      $(DirWorkspace)" />
        <Message Text="The directory containing the build output is located at:          $(DirBuild)" />
        <Message Text="The directory containing the generated binaries is located at:    $(DirBuildBinPlatformConfig)" />
        <Message Text="The directory containing the build logs is located at:            $(DirBuildLogs)" />
        <Message Text="The directory containing the NuGet packages is located at:        $(DirPackages)" />
        <Message Text="The directory containing the nBuildKit scripts is located at:     $(DirMsBuildExtensions)" />
        <Message Text=" " />

        <Message Text="The FxCop project file is located at: $(FileProjectFxCop)" />
        <Message Text="The FxCop report file is located at:  $(FileReportFxCopExpanded)" />
        <Message Text=" " />

        <Message Text="FxCop command line executable is located at: $(ToolsExternalFxCopDir)" />
        <Message Text=" " />
    </Target>

    <Target Name="_nBuildKit_Analyze_Binaries_FxCop_ReplaceBuildTemplates" DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize">
        <Message Text="Resolving build templates for: $(FileReportFxCop)" />

        <TemplateText Template="$(FileReportFxCop)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FileReportFxCopExpanded" />
        </TemplateText>
    </Target>

    <PropertyGroup>
        <FileFxCopCmdExe>FxCopCmd.exe</FileFxCopCmdExe>
    </PropertyGroup>
    <Target Name="_nBuildKit_Analyze_Binaries_FxCop_Analyze_WithProject"
            DependsOnTargets="_nBuildKit_Analyze_Binaries_FxCop_ReplaceBuildTemplates">
        <Error Text="The packages directory does not exist. Cannot search for the FxCop executable."
               Condition="!Exists('$(DirPackages)') AND '$(ToolsExternalFxCopDir)' == 'UNDEFINED' AND '$(ShouldExecute)' == 'true' "/>
        <Error Text="The FxCop project file does not exist. Cannot execute analysis of binaries."
               Condition="!Exists('$(FileProjectFxCop)') AND '$(ShouldExecute)' == 'true' "/>

        <CreateProperty Value="$([System.IO.Path]::GetDirectoryName('$(FileReportFxCopExpanded)'))">
            <Output TaskParameter="Value" PropertyName="DirToCreate" />
        </CreateProperty>
        <MakeDir Directories="$(DirToCreate)"
                 Condition="!Exists('$(DirToCreate)') AND '$(ShouldExecute)' == 'true' " />

        <SearchPackagesDirectoryForToolDirectory PackagesDir="$(DirPackages)"
                                                 FileToLocate="$(FileFxCopCmdExe)"
                                                 Condition=" '$(ToolsExternalFxCopDir)' == 'UNDEFINED' AND '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="Path" PropertyName="ToolsExternalFxCopDir" />
        </SearchPackagesDirectoryForToolDirectory>
        <Message Text="The FxCop directory was found at: $(ToolsExternalFxCopDir)"
                 Condition="Exists('$(ToolsExternalFxCopDir)') AND '$(ShouldExecute)' == 'true' " />
        <Error Text="Could not locate the FxCop executable path. Cannot execute analysis of binaries."
               Condition="!Exists('$(ToolsExternalFxCopDir)') AND '$(ShouldExecute)' == 'true' "/>

        <FxCopViaProject FxCopDir="$(ToolsExternalFxCopDir)"
                         ProjectFile="$(FileProjectFxCop)"
                         OutputFile="$(FileReportFxCopExpanded)"
                         WarningsAsErrors="$(FxCopWarningsAsErrors)"
                         Condition=" '$(ShouldExecute)' == 'true' "/>
    </Target>

    <Target Name="_nBuildKit_Analyze_Binaries_FxCop_Analyze_WithAssemblies"
            DependsOnTargets="_nBuildKit_Analyze_Binaries_FxCop_ReplaceBuildTemplates">
        <Error Text="The packages directory does not exist. Cannot search for the FxCop executable."
               Condition="!Exists('$(DirPackages)') AND '$(ToolsExternalFxCopDir)' == 'UNDEFINED' AND '$(ShouldExecute)' == 'true' "/>
        <Error Text="There are no assemblies defined. Cannot execute analysis of binaries."
               Condition=" '@(FxCopFiles)' == '' AND '$(ShouldExecute)' == 'true' "/>

        <CreateProperty Value="$([System.IO.Path]::GetDirectoryName('$(FileReportFxCopExpanded)'))">
            <Output TaskParameter="Value" PropertyName="DirToCreate" />
        </CreateProperty>
        <MakeDir Directories="$(DirToCreate)"
                 Condition="!Exists('$(DirToCreate)') AND '$(ShouldExecute)' == 'true' " />

        <SearchPackagesDirectoryForToolDirectory PackagesDir="$(DirPackages)"
                                                 FileToLocate="$(FileFxCopCmdExe)"
                                                 Condition=" '$(ToolsExternalFxCopDir)' == 'UNDEFINED' AND '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="Path" PropertyName="ToolsExternalFxCopDir" />
        </SearchPackagesDirectoryForToolDirectory>
        <Message Text="The FxCop directory was found at: $(ToolsExternalFxCopDir)"
                 Condition="Exists('$(ToolsExternalFxCopDir)') AND '$(ShouldExecute)' == 'true' " />
        <Error Text="Could not locate the FxCop executable path. Cannot execute analysis of binaries."
               Condition="!Exists('$(ToolsExternalFxCopDir)') AND '$(ShouldExecute)' == 'true' "/>

        <FxCopViaAssemblies FxCopDir="$(ToolsExternalFxCopDir)"
                            OutputFile="$(FileReportFxCopExpanded)"
                            RuleSet="$(FileFxCopRuleSet)"
                            Assemblies="@(FxCopFiles)"
                            ReferenceFiles="@(FxCopReferenceFiles)"
                            ReferenceDirectories="@(FxCopReferenceDirectories)"
                            Dictionary="$(FxCopCustomDictionary)"
                            Culture="$(FxCopCulture)"
                            WarningsAsErrors="$(FxCopWarningsAsErrors)"
                            Condition=" '$(ShouldExecute)' == 'true' "/>
    </Target>

    <Target Name="_nBuildKit_Analyze_Binaries_FxCop_Analyze_OnError">
        <Error Text="There is no FxCop project defined and there are no assemblies defined for analysis. Cannot execute analysis of binaries." />
    </Target>
 </Project>
