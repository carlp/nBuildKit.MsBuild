<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="nBuildKit_Prepare_GetVersion_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsPrepareGetVersion>true</ExistsPrepareGetVersion>

        <!-- The full path to the settings file that contains all the settings for the build process -->
        <BuildPropertyFile Condition=" '$(BuildPropertyFile)' == '' ">UNDEFINED</BuildPropertyFile>

        <!--
            Define the DirWorkspace before importing the BuildPropertyFile so that it is defined and can be used by
            the properties in the BuildPropertyFile. Note that we can't define it in the BuildPropertyFile because that
            is imported which means there is no way to get the path of the file.
        -->
        <DirWorkspace Condition=" '$(DirWorkspace)' == '' ">$([System.IO.Path]::GetDirectoryName('$(BuildPropertyFile)'))</DirWorkspace>
    </PropertyGroup>

    <Import Project="$(BuildPropertyFile)"
            Condition="Exists('$(BuildPropertyFile)') AND '$(ExistsSettings)' != 'true' " />

    <Import Project="$(DirMsBuildExtensions)\CalculateSemanticVersionWithGitHubFlowVersion.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\CalculateSemanticVersionWithGitHubFlowVersion.msbuild') AND '$(ExistsExtensionsCalculateSemanticVersionWithGitHubFlowVersion)' != 'true' " />
    <Import Project="$(DirMsBuildExtensions)\CalculateSemanticVersionWithGitVersion.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\CalculateSemanticVersionWithGitVersion.msbuild') AND '$(ExistsExtensionsCalculateSemanticVersionWithGitVersion)' != 'true' " />
    <Import Project="$(DirMsBuildExtensions)\SearchPackagesDirectoryForToolPath.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\SearchPackagesDirectoryForToolPath.msbuild') AND '$(ExistsExtensionsSearchPackagesDirectoryForToolPath)' != 'true' " />

    <Import Project="$(VersionScriptPath)"
            Condition=" '$(VersionScriptPath)' != '' AND '$(VersionScriptPath)' != 'UNDEFINED' AND Exists('$(VersionScriptPath)')" />
    <Import Project="$(FileVersionMsBuild)"
            Condition="Exists('$(FileVersionMsBuild)') AND ( '$(VersionScriptPath)' == '' OR '$(VersionScriptPath)' == 'UNDEFINED' OR !Exists('$(VersionScriptPath)'))" />

    <Target Name="nBuildKit_Prepare_GetVersion_Run"
            DependsOnTargets="_nBuildKit_Prepare_GetVersion_DisplayInfo"
            Condition="!Exists('$(FileSemanticVersion)')">
        <CallTarget Targets="_nBuildKit_Prepare_GetVersion_GetSemanticVersionFromCustomAlgorithm" />
        <CallTarget Targets="_nBuildKit_Prepare_GetVersion_GetSemanticVersionFromMsBuildFile" />
        <CallTarget Targets="_nBuildKit_Prepare_GetVersion_GetToolPaths" />
        <CallTarget Targets="_nBuildKit_Prepare_GetVersion_GetSemanticVersionViaGitVersion" />
        <CallTarget Targets="_nBuildKit_Prepare_GetVersion_GetSemanticVersionViaGitHubFlowVersion" />
        <CallTarget Targets="_nBuildKit_Prepare_GetVersion_WriteVersionsToFile" />
        <CallTarget Targets="_nBuildKit_Prepare_GetVersion_PushToExternals" />
    </Target>

    <Target Name="_nBuildKit_Prepare_GetVersion_DebugLog"
            Condition="$(ShouldDisplayDebugLog)">
        <Message Text="Project directory structure:"
                 Importance="low"/>
        <Message Text="The workspace is located at:                                       $(DirWorkspace)"
                 Importance="low"/>
        <Message Text="The directory containing the temporary build files is located at:  $(DirBuildTemp)"
                 Importance="low"/>
        <Message Text="The directory containing the NuGet packages is located at:         $(DirPackages)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit scripts is located at:      $(DirMsBuildExtensions)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit templates is located at:    $(DirMsBuildTemplates)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit shared files is located at: $(DirMsBuildShared)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>

        <Message Text="The semantic version file is located at:                           $(FileSemanticVersion)"
                 Importance="low"/>
        <Message Text="The MsBuild XML version file is located at:                        $(FileVersionMsBuild)"
                 Importance="low"
                 Condition="Exists('$(FileVersionMsBuild)')" />
        <Message Text=" "
                 Importance="low"/>

        <Message Text="GitHubFlowVersion command line executable is located at:           $(ToolsExternalGitHubFlowVersionPath)"
                 Importance="low"/>
        <Message Text="GitVersion command line executable is located at:                  $(ToolsExternalGitVersionPath)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>
    </Target>

    <!-- Display info -->
    <Target Name="_nBuildKit_Prepare_GetVersion_DisplayInfo"
            DependsOnTargets="_nBuildKit_Prepare_GetVersion_DebugLog">
        <Message Text="Getting version ..."
                 Importance="normal"/>
    </Target>

    <Target Name="_nBuildKit_Prepare_GetVersion_GetSemanticVersionFromCustomAlgorithm"
            Condition="Exists('$(VersionScriptPath)')">
        <Message Text="Getting version from the custom version algorithm ..."
                 Importance="low"/>

        <CalculateCustomVersion Condition=" '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="VersionMajor" PropertyName="VersionMajor" />
            <Output TaskParameter="VersionMinor" PropertyName="VersionMinor" />
            <Output TaskParameter="VersionPatch" PropertyName="VersionPatch" />
            <Output TaskParameter="VersionBuild" PropertyName="VersionBuild" />
            <Output TaskParameter="VersionPreRelease" PropertyName="VersionPreRelease" />
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
            <Output TaskParameter="VersionSemanticFull" PropertyName="VersionSemanticFull" />
            <Output TaskParameter="VersionSemanticNuGet" PropertyName="VersionSemanticNuGet" />
        </CalculateCustomVersion>
    </Target>

    <Target Name="_nBuildKit_Prepare_GetVersion_GetSemanticVersionFromMsBuildFile"
            Condition="Exists('$(FileVersionMsBuild)') AND !Exists('$(VersionScriptPath)')">
        <Message Text="Getting version from the MsBuild version file ..."
                 Importance="low"/>

        <CreateProperty Value="$(VersionMajor).$(VersionMinor).$(VersionPatch)">
            <Output TaskParameter="Value" PropertyName="VersionSemantic" />
        </CreateProperty>

        <CreateProperty Value="$(VersionMajor).$(VersionMinor).$(VersionPatch)+$(VersionBuild)">
            <Output TaskParameter="Value" PropertyName="VersionSemanticFull" />
        </CreateProperty>

        <CreateProperty Value="$(VersionMajor).$(VersionMinor).$(VersionPatch)-$(VersionPreRelease)$(VersionBuild)"
                        Condition=" '$(VersionPreRelease)' != '' ">
            <Output TaskParameter="Value" PropertyName="VersionSemanticNuGet" />
        </CreateProperty>

        <CreateProperty Value="$(VersionMajor).$(VersionMinor).$(VersionPatch)"
                        Condition=" '$(VersionPreRelease)' == '' ">
            <Output TaskParameter="Value" PropertyName="VersionSemanticNuGet" />
        </CreateProperty>
    </Target>

    <Target Name="_nBuildKit_Prepare_GetVersion_GetToolPaths"
            Condition="!Exists('$(FileVersionMsBuild)') AND !Exists('$(VersionScriptPath)')">
        <Error Text="The packages directory does not exist. Cannot search for the GitVersion or the GitHubFlowVersion executables."
               Condition="!Exists('$(DirPackages)') AND '$(ToolsExternalGitVersionPath)' == 'UNDEFINED' AND '$(ToolsExternalGitHubFlowVersionPath)' == 'UNDEFINED' AND '$(ShouldExecute)' == 'true' "/>

        <SearchPackagesDirectoryForToolPath PackagesDir="$(DirPackages)"
                                            FileToLocate="GitVersion.exe"
                                            Condition=" '$(ToolsExternalGitVersionPath)' == 'UNDEFINED' ">
            <Output TaskParameter="Path" PropertyName="ToolsExternalGitVersionPath" />
        </SearchPackagesDirectoryForToolPath>
        <Message Text="The GitVersion executable was found at: $(ToolsExternalGitVersionPath)"
                 Importance="low"
                 Condition="Exists('$(ToolsExternalGitVersionPath)') AND '$(ShouldExecute)' == 'true' " />

        <SearchPackagesDirectoryForToolPath PackagesDir="$(DirPackages)"
                                            FileToLocate="GitHubFlowVersion.exe"
                                            Condition=" '$(ToolsExternalGitHubFlowVersionPath)' == 'UNDEFINED' ">
            <Output TaskParameter="Path" PropertyName="ToolsExternalGitHubFlowVersionPath" />
        </SearchPackagesDirectoryForToolPath>
        <Message Text="The GitHubFlowVersion executable was found at: $(ToolsExternalGitHubFlowVersionPath)"
                 Importance="low"
                 Condition="Exists('$(ToolsExternalGitHubFlowVersionPath)') AND '$(ShouldExecute)' == 'true' " />
        <Error Text="Could not locate either the GitVersion executable path or the GitHubFlowVersion executable path. Cannot get semantic version."
               Condition="!Exists('$(ToolsExternalGitVersionPath)') AND !Exists('$(ToolsExternalGitHubFlowVersionPath)') AND '$(ShouldExecute)' == 'true' "/>
    </Target>

    <Target Name="_nBuildKit_Prepare_GetVersion_GetSemanticVersionViaGitVersion"
            Condition="!Exists('$(FileVersionMsBuild)') AND !Exists('$(VersionScriptPath)') AND Exists('$(ToolsExternalGitVersionPath)') AND ('$(IsGitWorkspace)' == 'true')">
        <CalculateSemanticVersionWithGitVersion ExePath="$(ToolsExternalGitVersionPath)"
                                                RemoteRepositoryUrl="$(GitRemoteRepository)"
                                                UserName="$(GitUserName)"
                                                Condition=" '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="VersionMajor" PropertyName="VersionMajor" />
            <Output TaskParameter="VersionMinor" PropertyName="VersionMinor" />
            <Output TaskParameter="VersionPatch" PropertyName="VersionPatch" />
            <Output TaskParameter="VersionBuild" PropertyName="VersionBuild" />
            <Output TaskParameter="VersionPreRelease" PropertyName="VersionPreRelease" />
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
            <Output TaskParameter="VersionSemanticFull" PropertyName="VersionSemanticFull" />
            <Output TaskParameter="VersionSemanticNuGet" PropertyName="VersionSemanticNuGet" />
        </CalculateSemanticVersionWithGitVersion>
    </Target>

    <Target Name="_nBuildKit_Prepare_GetVersion_GetSemanticVersionViaGitHubFlowVersion"
            Condition="!Exists('$(FileVersionMsBuild)') AND !Exists('$(VersionScriptPath)') AND !Exists('$(ToolsExternalGitVersionPath)') AND Exists('$(ToolsExternalGitHubFlowVersionPath)') AND ('$(IsGitWorkspace)' == 'true')">
        <CalculateSemanticVersionWithGitHubFlowVersion ExePath="$(ToolsExternalGitHubFlowVersionPath)"
                                                       TempDir="$(DirBuildTemp)"
                                                       Condition=" '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="VersionMajor" PropertyName="VersionMajor" />
            <Output TaskParameter="VersionMinor" PropertyName="VersionMinor" />
            <Output TaskParameter="VersionPatch" PropertyName="VersionPatch" />
            <Output TaskParameter="VersionBuild" PropertyName="VersionBuild" />
            <Output TaskParameter="VersionPreRelease" PropertyName="VersionPreRelease" />
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
            <Output TaskParameter="VersionSemanticFull" PropertyName="VersionSemanticFull" />
            <Output TaskParameter="VersionSemanticNuGet" PropertyName="VersionSemanticNuGet" />
        </CalculateSemanticVersionWithGitHubFlowVersion>
    </Target>

    <Target Name="_nBuildKit_Prepare_GetVersion_WriteVersionsToFile">
        <Message Text="Writing the versions to file ..."
                 Importance="low"/>

        <CreateProperty Value="$([System.IO.Path]::GetDirectoryName('$(FileSemanticVersion)'))">
            <Output TaskParameter="Value" PropertyName="DirToCreate" />
        </CreateProperty>
        <MakeDir Directories="$(DirToCreate)"
                 Condition="!Exists('$(DirToCreate)') AND '$(ShouldExecute)' == 'true' " />

        <CreateProperty Value="0" Condition=" '$(VersionMajor)' == '' ">
            <Output TaskParameter="Value" PropertyName="VersionMajor" />
        </CreateProperty>
        <CreateProperty Value="0" Condition=" '$(VersionMinor)' == '' ">
            <Output TaskParameter="Value" PropertyName="VersionMinor" />
        </CreateProperty>
        <CreateProperty Value="0" Condition=" '$(VersionPatch)' == '' ">
            <Output TaskParameter="Value" PropertyName="VersionPatch" />
        </CreateProperty>
        <CreateProperty Value="0" Condition=" '$(VersionBuild)' == '' ">
            <Output TaskParameter="Value" PropertyName="VersionBuild" />
        </CreateProperty>
        <CreateProperty Value="" Condition=" '$(VersionPreRelease)' == '' ">
            <Output TaskParameter="Value" PropertyName="VersionPreRelease" />
        </CreateProperty>
        <CreateProperty Value="0.0.0" Condition=" '$(VersionSemantic)' == '' ">
            <Output TaskParameter="Value" PropertyName="VersionSemantic" />
        </CreateProperty>
        <CreateProperty Value="0.0.0+0" Condition=" '$(VersionSemanticFull)' == '' ">
            <Output TaskParameter="Value" PropertyName="VersionSemanticFull" />
        </CreateProperty>
        <CreateProperty Value="0.0.0" Condition=" '$(VersionSemanticNuGet)' == '' ">
            <Output TaskParameter="Value" PropertyName="VersionSemanticNuGet" />
        </CreateProperty>

        <ItemGroup>
            <Items_SemanticVersion Include="{" />

            <Items_SemanticVersion Include="    &quot;FullSemVer&quot;: &quot;$(VersionSemanticFull)&quot;," />
            <Items_SemanticVersion Include="    &quot;NuGetSemVer&quot;: &quot;$(VersionSemanticNuGet)&quot;," />
            <Items_SemanticVersion Include="    &quot;SemVer&quot;: &quot;$(VersionSemantic)&quot;," />
            <Items_SemanticVersion Include="    &quot;Major&quot;: &quot;$(VersionMajor)&quot;," />
            <Items_SemanticVersion Include="    &quot;Minor&quot;: &quot;$(VersionMinor)&quot;," />
            <Items_SemanticVersion Include="    &quot;Patch&quot;: &quot;$(VersionPatch)&quot;," />
            <Items_SemanticVersion Include="    &quot;Build&quot;: &quot;$(VersionBuild)&quot;," />
            <Items_SemanticVersion Include="    &quot;PreRelease&quot;: &quot;$(VersionPreRelease)&quot;" />

            <Items_SemanticVersion Include="}" />
        </ItemGroup>

        <WriteLinesToFile File="$(FileSemanticVersion)"
                          Lines="@(Items_SemanticVersion)"
                          Overwrite="true"
                          Condition="!Exists('$(FileSemanticVersion)') AND '$(ShouldExecute)' == 'true' "/>
    </Target>

    <Target Name="_nBuildKit_Prepare_GetVersion_PushToExternals">
        <Message Text="Versions are:"
                 Importance="normal"/>
        <Message Text="Major:          $(VersionMajor)"
                 Importance="normal"/>
        <Message Text="Minor:          $(VersionMinor)"
                 Importance="normal"/>
        <Message Text="Patch:          $(VersionPatch)"
                 Importance="normal"/>
        <Message Text="Build:          $(VersionBuild)"
                 Importance="normal"/>
        <Message Text="PreRelease:     $(VersionPreRelease)"
                 Importance="normal"/>
        <Message Text="Short semantic: $(VersionSemantic)"
                 Importance="normal"/>
        <Message Text="Full semantic:  $(VersionSemanticFull)"
                 Importance="normal"/>
        <Message Text="NuGet semantic: $(VersionSemanticNuGet)"
                 Importance="normal"/>

        <!-- Push to TeamCity -->
        <!-- Note that we only need to push to TeamCity if we're not using GitHubFlowVersion or GitVersion because they already makes it happen -->
        <Message Text="Pushing version number to TeamCity's build number ..."
                 Importance="normal"
                 Condition=" '$(TEAMCITY_VERSION)' != '' AND Exists('$(FileSemanticVersion)') AND Exists('$(FileVersionMsBuild)')" />
        <!-- NOTE: This must always be displayed otherwise TeamCity won't get the message -->
        <Message Text="##teamcity[buildNumber '$(VersionSemanticFull)']"
                 Importance="high"
                 Condition=" '$(TEAMCITY_VERSION)' != '' AND Exists('$(FileSemanticVersion)') AND Exists('$(FileVersionMsBuild)')" />

        <!-- Push to AppVeyor -->
        <!-- Note to make sure that the version that AppVeyor gets is unique we append the build number at the end. -->
        <Message Text="Pushing version number to AppVeyor's build number ..."
                 Importance="normal"
                 Condition=" '$(APPVEYOR_BUILD_NUMBER)' != '' AND Exists('$(FileSemanticVersion)') AND '$(ShouldExecute)' == 'true' " />
        <Exec Command="appveyor UpdateBuild -Version &quot;$(VersionSemanticFull)-$(APPVEYOR_BUILD_NUMBER)&quot;"
              Condition=" '$(APPVEYOR_BUILD_NUMBER)' != '' AND Exists('$(FileSemanticVersion)') AND '$(ShouldExecute)' == 'true' " />
    </Target>
 </Project>