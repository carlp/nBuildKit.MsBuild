<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="nBuildKit_Shared_Prepare_GatherReleaseNotes_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsSharedPrepareGatherReleaseNotes>true</ExistsSharedPrepareGatherReleaseNotes>
    </PropertyGroup>

    <Import Project="$(DirNBuildKitMsBuild)\shared.props"
            Condition="Exists('$(DirNBuildKitMsBuild)\shared.props') AND '$(ExistsSharedSettings)' != 'true' " />

    <Import Project="$(DirNBuildKitMsBuildExtensions)\GetReleaseNotesViaGitReleaseNotes.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\GetReleaseNotesViaGitReleaseNotes.msbuild') AND '$(ExistsGetReleaseNotesViaGitReleaseNotes)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\GetSemanticVersionFromFile.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\GetSemanticVersionFromFile.msbuild') AND '$(ExistsExtensionsGetSemanticVersionFromFile)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\NuGetInstall.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\NuGetInstall.msbuild') AND '$(ExistsExtensionsNuGetInstall)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\SearchPackagesDirectoryForToolPath.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\SearchPackagesDirectoryForToolPath.msbuild') AND '$(ExistsExtensionsSearchPackagesDirectoryForToolPath)' != 'true' " />

    <Target Name="nBuildKit_Shared_Prepare_GatherReleaseNotes_Run"
            DependsOnTargets="_nBuildKit_Shared_Prepare_GatherReleaseNotes_DisplayInfo"
            Condition="!Exists('$(FileReleaseNotesShort)') OR !Exists('$(FileReleaseNotesFull)')">
        <CallTarget Targets="_nBuildKit_Shared_Prepare_GatherReleaseNotes_Gather_FromGitHub"
                    Condition=" '$(YouTrackServer)' == 'UNDEFINED' " />
        <CallTarget Targets="_nBuildKit_Shared_Prepare_GatherReleaseNotes_Gather_FromYouTrack"
                    Condition=" '$(YouTrackServer)' != 'UNDEFINED' " />
    </Target>

    <!-- Display info -->
    <Target Name="_nBuildKit_Shared_Prepare_GatherReleaseNotes_DisplayInfo"
            DependsOnTargets="_nBuildKit_Shared_Prepare_GatherReleaseNotes_DebugLog">
        <Message Text="Gathering release notes ..."
                 Importance="normal"/>
    </Target>

    <Target Name="_nBuildKit_Shared_Prepare_GatherReleaseNotes_DebugLog"
            Condition="$(ShouldDisplayDebugLog)">
        <Message Text="Project directory structure:"
                 Importance="low"/>
        <Message Text="The workspace is located at:                                                 $(DirWorkspace)"
                 Importance="low"/>
        <Message Text="The directory containing the NuGet packages is located at:                   $(DirPackages)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit files is located at:                  $(DirNBuildKitMsBuild)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit scripts is located at:                $(DirNBuildKitMsBuildExtensions)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit templates is located at:              $(DirNBuildKitMsBuildTemplates)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>

        <Message Text="The semantic version file is located at:                                     $(FileSemanticVersion)"
                 Importance="low"/>
        <Message Text="The file containing the release notes for the current release is located at: $(FileReleaseNotesShort)"
                 Importance="low"/>
        <Message Text="The file containing the release notes for all releases is located at:        $(FileReleaseNotesFull)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>

        <Message Text="The YouTrack filter is:                                                      $(IssueFilter)"
                 Importance="low"
                 Condition=" '$(IssueFilter)' != 'UNDEFINED' " />
        <Message Text=" "
                 Importance="low"/>

        <Message Text="GitReleaseNotes command line executable is located at:                       $(ToolsExternalGitReleaseNotesPath)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>
    </Target>

    <Target Name="_nBuildKit_Shared_Prepare_GatherReleaseNotes_GetPrerequisites">
        <GetSemanticVersionFromFile VersionFile="$(FileSemanticVersion)"
                                    Condition="Exists('$(FileSemanticVersion)')">
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
        </GetSemanticVersionFromFile>

        <NuGetInstall NuGetPath="$(ToolsExternalNuGetPath)"
                      PackageName="GitReleaseNotes"
                      PackageDirectory="$(DirPackages)"
                      Condition=" '$(ToolsExternalGitReleaseNotesPath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' "/>
        <SearchPackagesDirectoryForToolPath PackagesDir="$(DirPackages)"
                                            FileToLocate="GitReleaseNotes.exe"
                                            Condition=" '$(ToolsExternalGitReleaseNotesPath)' == 'UNDEFINED' ">
            <Output TaskParameter="Path" PropertyName="ToolsExternalGitReleaseNotesPath" />
        </SearchPackagesDirectoryForToolPath>
        <Message Text="The GitReleaseNote executable was found at: $(ToolsExternalGitReleaseNotesPath)"
                 Importance="low"
                 Condition="Exists('$(ToolsExternalGitReleaseNotesPath)') AND '$(ShouldExecute)' == 'true' " />
        <Error Text="The GitReleaseNote executable does not exist. Cannot generate release notes."
               Condition="!Exists('$(ToolsExternalGitReleaseNotesPath)') AND '$(ShouldExecute)' == 'true' "/>
    </Target>

    <Target Name="_nBuildKit_Shared_Prepare_GatherReleaseNotes_PrepareOutputFiles">
        <CreateProperty Value="$([System.IO.Path]::GetDirectoryName('$(FileReleaseNotesShort)'))">
            <Output TaskParameter="Value" PropertyName="DirToCreate" />
        </CreateProperty>
        <MakeDir Directories="$(DirToCreate)"
                 Condition="!Exists('$(DirToCreate)') AND '$(ShouldExecute)' == 'true' " />

        <CreateProperty Value="$([System.IO.Path]::GetDirectoryName('$(FileReleaseNotesFull)'))">
            <Output TaskParameter="Value" PropertyName="DirToCreate" />
        </CreateProperty>
        <MakeDir Directories="$(DirToCreate)"
                 Condition="!Exists('$(DirToCreate)') AND '$(ShouldExecute)' == 'true' " />
    </Target>

    <Target Name="_nBuildKit_Shared_Prepare_GatherReleaseNotes_Gather_FromGitHub"
            DependsOnTargets="_nBuildKit_Shared_Prepare_GatherReleaseNotes_GetPrerequisites;_nBuildKit_Shared_Prepare_GatherReleaseNotes_PrepareOutputFiles"
            Condition=" '$(YouTrackServer)' == 'UNDEFINED' ">
        <Error Text="The packages directory does not exist. Cannot search for the GitReleaseNotes executable."
               Condition="!Exists('$(DirPackages)') AND '$(ToolsExternalGitReleaseNotesPath)' == 'UNDEFINED' AND '$(ShouldExecute)' == 'true' "/>

        <Message Text="Gathering release note information from GitHub"
                 Importance="normal" />
        <Warning Text="Github username not specified"
                 Condition=" '$(GitHubUserName)' == 'UNDEFINED' " />

        <Message Text="Gathering release notes for current release ..."
                 Importance="normal" />
        <GetReleaseNotesViaGitReleaseNotes ExePath="$(ToolsExternalGitReleaseNotesPath)"
                                           RepositoryName="$(GitHubRepositoryName)"
                                           Version="$(VersionSemantic)"
                                           OutputFile="$(FileReleaseNotesShort)"
                                           GetAllReleaseNotes="false"
                                           Condition=" '$(ShouldExecute)' == 'true' "
                                           ContinueOnError="true" />

        <Message Text="Gathering release notes for all releases ..."
                 Importance="normal"
                 Condition=" '$(IssueTrackerConnection)' != '' " />
        <GetReleaseNotesViaGitReleaseNotes ExePath="$(ToolsExternalGitReleaseNotesPath)"
                                           RepositoryName="$(GitHubRepositoryName)"
                                           Version="$(VersionSemantic)"
                                           OutputFile="$(FileReleaseNotesFull)"
                                           GetAllReleaseNotes="true"
                                           Condition=" '$(ShouldExecute)' == 'true' "
                                           ContinueOnError="true" />
    </Target>

    <Target Name="_nBuildKit_Shared_Prepare_GatherReleaseNotes_Gather_FromYouTrack"
            DependsOnTargets="_nBuildKit_Shared_Prepare_GatherReleaseNotes_GetPrerequisites;_nBuildKit_Shared_Prepare_GatherReleaseNotes_PrepareOutputFiles"
            Condition=" '$(YouTrackServer)' != 'UNDEFINED' ">
        <Error Text="The packages directory does not exist. Cannot search for the GitReleaseNotes executable."
               Condition="!Exists('$(DirPackages)') AND '$(ToolsExternalGitReleaseNotesPath)' == 'UNDEFINED' AND '$(ShouldExecute)' == 'true' "/>

        <Message Text="Gathering release note information from YouTrack"
                 Importance="normal"
                 Condition=" '$(YouTrackServer)' != 'UNDEFINED' " />

        <Warning Text="YouTrack server URI not specified"
                 Condition=" '$(YouTrackServer)' == 'UNDEFINED' " />
        <Warning Text="Issue tracker project ID not specified"
                 Condition=" '$(IssueTrackerProjectId)' == 'UNDEFINED' " />

        <Message Text="Gathering release notes for current release ..."
                 Importance="normal"
                 Condition=" '$(IssueTrackerConnection)' != '' " />
        <GetReleaseNotesViaGitReleaseNotes ExePath="$(ToolsExternalGitReleaseNotesPath)"
                                           RepositoryName="$(GitHubRepositoryName)"
                                           Version="$(VersionSemantic)"
                                           OutputFile="$(FileReleaseNotesShort)"
                                           YouTrackUserName="$(IssueTrackerUserName)"
                                           YouTrackServer="$(YouTrackServer)"
                                           YouTrackProject="$(IssueTrackerProjectId)"
                                           YouTrackFilter="$(IssueFilter)"
                                           GetAllReleaseNotes="false"
                                           Condition=" '$(ShouldExecute)' == 'true' "
                                           ContinueOnError="true" />

        <Message Text="Gathering release notes for all releases ..."
                 Importance="normal"
                 Condition=" '$(IssueTrackerConnection)' != '' " />
        <GetReleaseNotesViaGitReleaseNotes ExePath="$(ToolsExternalGitReleaseNotesPath)"
                                           RepositoryName="$(GitHubRepositoryName)"
                                           Version="$(VersionSemantic)"
                                           OutputFile="$(FileReleaseNotesFull)"
                                           YouTrackUserName="$(IssueTrackerUserName)"
                                           YouTrackServer="$(YouTrackServer)"
                                           YouTrackProject="$(IssueTrackerProjectId)"
                                           YouTrackFilter="$(IssueFilter)"
                                           GetAllReleaseNotes="true"
                                           Condition=" '$(ShouldExecute)' == 'true' "
                                           ContinueOnError="true" />
    </Target>
 </Project>