<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="nBuildKit_Test_Unit_MsTest_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsTestUnitMsTest>true</ExistsTestUnitMsTest>
        
        <!-- The full path to the settings file that contains all the settings for the build process -->
        <BuildPropertyFile Condition=" '$(BuildPropertyFile)' == '' ">UNDEFINED</BuildPropertyFile>
    </PropertyGroup>

    <Import Project="$(BuildPropertyFile)"
            Condition="Exists('$(BuildPropertyFile)') AND '$(ExistsSettings)' != 'true' " />
    
    <PropertyGroup>
        <!-- Build flags -->
        <ShouldDisplayDebugLog Condition=" '$(ShouldDisplayDebugLog)' == '' ">false</ShouldDisplayDebugLog>
        <ShouldExecute Condition=" '$(ShouldExecute)' == '' ">true</ShouldExecute>
    
        <!-- Build configuration -->
        <Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
        <Platform Condition=" '$(Platform)' == '' ">Any CPU</Platform>
        <PlatformWithoutSpaces>$(Platform.Replace(" ",""))</PlatformWithoutSpaces>
    
        <!-- Directories -->
        <DirWorkspace Condition=" '$(DirWorkspace)' == '' ">$([System.IO.Path]::GetDirectoryName('$(BuildPropertyFile)'))</DirWorkspace>
        <DirBuild Condition=" '$(DirBuild)' == '' ">$(DirWorkspace)\build</DirBuild>
        <DirBuildBin Condition=" '$(DirBuildBin)' == '' ">$(DirBuild)\bin</DirBuildBin>
        <DirBuildBinPlatformConfig Condition=" '$(DirBuildBinPlatformConfig)' == '' ">$([System.IO.Path]::GetFullPath('$(DirBuildBin)\$(PlatformWithoutSpaces)\$(Configuration)'))</DirBuildBinPlatformConfig>
        <DirBuildLogs Condition=" '$(DirBuildLogs)' == '' ">$(DirBuild)\logs</DirBuildLogs>
        <DirBuildTemp Condition=" '$(DirBuildTemp)' == '' ">$(DirBuild)\temp</DirBuildTemp>
        <DirPackages Condition=" '$(DirPackages)' == '' ">$(DirWorkspace)\packages</DirPackages>
        <DirReportGeneratorOutput Condition=" '$(DirReportGeneratorOutput)' == '' ">$(DirBuildLogs)\coverage</DirReportGeneratorOutput>
        
        <!-- nBuildKit directories -->
        <DirMsBuildExtensions Condition=" '$(DirMsBuildExtensions)' == '' ">$(MSBuildProjectDirectory)\extensions</DirMsBuildExtensions>
        <DirMsBuildShared Condition=" '$(DirMsBuildShared)' == '' ">$(MSBuildProjectDirectory)</DirMsBuildShared>
        
        <!-- Files -->
        <FileReportMsTest Condition=" '$(FileReportMsTest)' == '' ">$(DirBuildLogs)\mstest.trx</FileReportMsTest>
        <FileReportOpenCoverXml Condition=" '$(FileReportOpenCoverXml)' == '' ">$(DirBuildLogs)\opencover.xml</FileReportOpenCoverXml>
        <FileReportOpenCoverCsv Condition=" '$(FileReportOpenCoverCsv)' == '' ">$(DirBuildLogs)\coverage.csv</FileReportOpenCoverCsv>
        
        <FileReportReportGeneratorXmlSummary>$(DirReportGeneratorOutput)\Summary.xml</FileReportReportGeneratorXmlSummary>
        
        <!-- Unit tests -->
        <UnitTestAssemblyNamePrefix Condition=" '$(UnitTestAssemblyNamePrefix)' == '' " >test.unit</UnitTestAssemblyNamePrefix>
    
        <!-- External tools -->
        <ToolsExternalMsTestPath Condition=" '$(ToolsExternalMsTestPath)' == '' ">C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\MsTest.exe</ToolsExternalMsTestPath>
        <ToolsExternalOpenCoverPath Condition=" '$(ToolsExternalOpenCoverPath)' == '' ">UNDEFINED</ToolsExternalOpenCoverPath>
        <ToolsExternalReportGeneratorPath Condition=" '$(ToolsExternalReportGeneratorPath)' == '' ">UNDEFINED</ToolsExternalReportGeneratorPath>
    </PropertyGroup>
    
    <Import Project="$(DirMsBuildShared)\shared.templatetokens.msbuild" 
            Condition="Exists('$(DirMsBuildShared)\shared.templatetokens.msbuild') AND '$(ExistsSharedTemplateTokens)' != 'true' " />
    
    <Import Project="$(DirMsBuildExtensions)\OpenCover.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\OpenCover.msbuild') AND '$(ExistsExtensionsOpenCover)' != 'true' "/>
    <Import Project="$(DirMsBuildExtensions)\ReportGenerator.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\ReportGenerator.msbuild') AND '$(ExistsExtensionsReportGenerator)' != 'true' "/>
    <Import Project="$(DirMsBuildExtensions)\ReportGeneratorOutputToCsv.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\ReportGeneratorOutputToCsv.msbuild') AND '$(ExistsExtensionsReportGeneratorOutputToCsv)' != 'true' "/> 
    <Import Project="$(DirMsBuildExtensions)\SearchPackagesDirectoryForToolPath.msbuild" 
            Condition="Exists('$(DirMsBuildExtensions)\SearchPackagesDirectoryForToolPath.msbuild') AND '$(ExistsExtensionsSearchPackagesDirectoryForToolPath)' != 'true' " />
    <Import Project="$(DirMsBuildExtensions)\TemplateText.msbuild" 
            Condition="Exists('$(DirMsBuildExtensions)\TemplateText.msbuild') AND '$(ExistsExtensionsTemplateText)' != 'true' " />
            
    <Target Name="nBuildKit_Test_Unit_MsTest_Run" 
            DependsOnTargets="_nBuildKit_Test_Unit_MsTest_DisplayInfo">
        <CallTarget Targets="_nBuildKit_Test_Unit_MsTest_Execute" />
    </Target>
    
    <!-- Display info -->
    <Target Name="_nBuildKit_Test_Unit_MsTest_DisplayInfo" 
            DependsOnTargets="_nBuildKit_Test_Unit_MsTest_DebugLog">
        <Message Text="Running unit tests with MsTest ..." />
    </Target>
    
    <Target Name="_nBuildKit_Test_Unit_MsTest_DebugLog" 
            Condition="$(ShouldDisplayDebugLog)"
            DependsOnTargets="_nBuildKit_Test_Unit_MsTest_ReplaceBuildTemplates">
        <Message Text="Project directory structure:" />
        <Message Text="The workspace is located at:                                                     $(DirWorkspace)" />
        <Message Text="The directory containing the build output is located at:                         $(DirBuild)" />
        <Message Text="The directory containing the generated binaries is located at:                   $(DirBuildBinPlatformConfig)" />
        <Message Text="The directory containing the build logs is located at:                           $(DirBuildLogs)" />
        <Message Text="The directory containing the OpenCover unit test coverage reports is located at: $(DirReportGeneratorOutput)" />
        <Message Text="The directory containing the temporary build files is located at:                $(DirBuildTemp)" />
        <Message Text="The directory containing the NuGet packages is located at:                       $(DirPackages)" />
        <Message Text="The directory containing the nBuildKit scripts is located at:                    $(DirMsBuildExtensions)" />
        <Message Text=" " />
        
        <Message Text="The MsTest report will be located at:                      $(FileReportMsTestExpanded)" />
        <Message Text="The OpenCover XML report will be located at:               $(FileReportOpenCoverXmlExpanded)" />
        <Message Text="The OpenCover CSV report will be located at:               $(FileReportOpenCoverCsvExpanded)" />
        <Message Text="The ReportGenerator XML summary report will be located at: $(FileReportReportGeneratorXmlSummary)" />
        <Message Text=" " />
        
        <Message Text="The MsTest command line executable is located at:      $(ToolsExternalMsTestPath)" />
        <Message Text="OpenCover command line executable is located at:       $(ToolsExternalOpenCoverPath)" />
        <Message Text="ReportGenerator command line executable is located at: $(ToolsExternalReportGeneratorPath)" />
        <Message Text=" " />
    </Target>
    
    <Target Name="_nBuildKit_Test_Unit_MsTest_ReplaceBuildTemplates" 
            DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize">
        <Message Text="Resolving build templates ..." />
        
        <TemplateText Template="$(FileReportMsTest)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FileReportMsTestExpanded" />
        </TemplateText>
        
        <TemplateText Template="$(FileReportOpenCoverXml)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FileReportOpenCoverXmlExpanded" />
        </TemplateText>
        
        <TemplateText Template="$(FileReportOpenCoverCsv)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FileReportOpenCoverCsvExpanded" />
        </TemplateText>
    </Target>
    
    <Target Name="_nBuildKit_Test_Unit_MsTest_Execute"
            DependsOnTargets="_nBuildKit_Test_Unit_MsTest_ReplaceBuildTemplates">
        <Error Text="The packages directory does not exist. Cannot search for the unit test executables."
               Condition="!Exists('$(DirPackages)') AND '$(ShouldExecute)' == 'true' "/>
        <Error Text="Could not locate the MsTest executable path. Cannot execute unit tests."
               Condition="!Exists('$(ToolsExternalMsTestPath)') AND '$(ShouldExecute)' == 'true' "/>
        
        <MakeDir Directories="$(DirBuildTemp)" Condition="!Exists('$(DirBuildTemp)') AND '$(ShouldExecute)' == 'true' " />
        <MakeDir Directories="$(DirBuildLogs)" Condition="!Exists('$(DirBuildLogs)') AND '$(ShouldExecute)' == 'true' " />
        <MakeDir Directories="$(ReportGeneratorOutputDir)" Condition="!Exists('$(ReportGeneratorOutputDir)') AND '$(ShouldExecute)' == 'true' " />
        
        <SearchPackagesDirectoryForToolPath PackagesDir="$(DirPackages)" 
                                            FileToLocate="opencover.console.exe"
                                            Condition=" '$(ToolsExternalOpenCoverPath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' ">
          <Output TaskParameter="Path" PropertyName="ToolsExternalOpenCoverPath" />
        </SearchPackagesDirectoryForToolPath>
        <Error Text="Could not locate the OpenCover executable path. Cannot execute unit tests."
               Condition="!Exists('$(ToolsExternalOpenCoverPath)') AND '$(ShouldExecute)' == 'true' "/>
        
        <SearchPackagesDirectoryForToolPath PackagesDir="$(DirPackages)" 
                                            FileToLocate="ReportGenerator.exe"
                                            Condition=" '$(ToolsExternalReportGeneratorPath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' ">
          <Output TaskParameter="Path" PropertyName="ToolsExternalReportGeneratorPath" />
        </SearchPackagesDirectoryForToolPath>
        <Warning Text="Could not locate the ReportGenerator executable path. Cannot generate the unit test coverage reports."
                 Condition="!Exists('$(ToolsExternalReportGeneratorPath)') AND '$(ShouldExecute)' == 'true' "/>
        
        <ItemGroup Condition=" '@(UnitTestAssemblies)' == '' ">
            <UnitTestAssemblies Include="$(DirBuildBinPlatformConfig)\**\$(UnitTestAssemblyNamePrefix)*.dll" />
        </ItemGroup>
        <ItemGroup Condition=" '@(OpenCoverIgnoreAttributes)' == '' ">
            <OpenCoverIgnoreAttributes Include="System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute" />
            <OpenCoverIgnoreAttributes Include="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
        </ItemGroup>
        <ItemGroup Condition=" '@(OpenCoverFilters)' == '' ">
            <!-- NOTE: Use the ASCII encodings for * (%2A) to avoid MsBuild trying to make sense out of the text -->
            <OpenCoverFilters Include="+[%2A]%2A" />
            <OpenCoverFilters Include="-[NUnit]%2A" />
            <OpenCoverFilters Include="-[NUnit.%2A]%2A" />
        </ItemGroup>
                                  
        <OpenCover OpenCoverExe="$(ToolsExternalOpenCoverPath)"
                   OpenCoverOutput="$(FileReportOpenCoverXmlExpanded)"
                   OpenCoverFilters="@(OpenCoverFilters->'%(Identity)', ' ')"
                   OpenCoverExcludeAttributes="@(OpenCoverIgnoreAttributes)"
                   UnitTestExe="$(ToolsExternalMsTestPath)"
                   UnitTestArguments="@(TestAssemblies->'/testcontainer:%22%22%(FullPath)%22%22', ' ') /resultsfile:&quot;&quot;$(FileReportMsTestExpanded)&quot;&quot;"
                   BinDir="$(DirBuildBinPlatformConfig)" 
                   Condition="Exists('$(ToolsExternalReportGeneratorPath)') AND '$(ShouldExecute)' == 'true' "/>
        
        <ReportGenerator ReportGeneratorExe="$(ToolsExternalReportGeneratorPath)"
                         OpenCoverOutputFile="$(FileReportOpenCoverXmlExpanded)"
                         OutputDir="$(DirReportGeneratorOutput)" 
                         Condition=" '$(ShouldExecute)' == 'true' "/>
                         
        <ReportGeneratorOutputToCsv InputFile="$(FileReportReportGeneratorXmlSummary)"
                                    OutputFile="$(FileReportOpenCoverCsvExpanded)" 
                                    Condition="Exists('$(FileReportReportGeneratorXmlSummary)') AND '$(ShouldExecute)' == 'true' "/>
    </Target>
 </Project>