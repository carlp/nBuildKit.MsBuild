<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="nBuildKit_Tag_Vcs_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsTagVcs>true</ExistsTagVcs>

        <!-- The full path to the settings file that contains all the settings for the build process -->
        <BuildPropertyFile Condition=" '$(BuildPropertyFile)' == '' ">UNDEFINED</BuildPropertyFile>

        <!--
            Define the DirWorkspace before importing the BuildPropertyFile so that it is defined and can be used by
            the properties in the BuildPropertyFile. Note that we can't define it in the BuildPropertyFile because that
            is imported which means there is no way to get the path of the file.
        -->
        <DirWorkspace Condition=" '$(DirWorkspace)' == '' ">$([System.IO.Path]::GetDirectoryName('$(BuildPropertyFile)'))</DirWorkspace>
    </PropertyGroup>

    <Import Project="$(BuildPropertyFile)"
            Condition="Exists('$(BuildPropertyFile)') AND '$(ExistsSettings)' != 'true' " />

    <Import Project="$(DirMsBuildShared)\shared.templatetokens.msbuild"
            Condition="Exists('$(DirMsBuildShared)\shared.templatetokens.msbuild') AND '$(ExistsSharedTemplateTokens)' != 'true' " />

    <Import Project="$(DirMsBuildExtensions)\TemplateText.msbuild"
            Condition="Exists('$(DirMsBuildExtensions)\TemplateText.msbuild') AND '$(ExistsExtensionsTemplateText)' != 'true' " />

    <Target Name="nBuildKit_Tag_Vcs_Run" DependsOnTargets="_nBuildKit_Tag_Vcs_DisplayInfo">
        <CallTarget Targets="_nBuildKit_Tag_Vcs_Git" />
        <CallTarget Targets="_nBuildKit_Tag_Vcs_Tfs" />
    </Target>

    <!-- Display info -->
    <Target Name="_nBuildKit_Tag_Vcs_DisplayInfo" DependsOnTargets="_nBuildKit_Tag_Vcs_DebugLog">
        <Message Text="Tagging release ..." />
    </Target>

    <Target Name="_nBuildKit_Tag_Vcs_DebugLog"
            Condition="$(ShouldDisplayDebugLog)">
        <Message Text="Project directory structure:" />
        <Message Text="The workspace is located at:                                       $(DirWorkspace)" />
        <Message Text="The directory containing the nBuildKit scripts is located at:      $(DirMsBuildExtensions)" />
        <Message Text="The directory containing the nBuildKit templates is located at:    $(DirMsBuildTemplates)" />
        <Message Text="The directory containing the nBuildKit shared files is located at: $(DirMsBuildShared)" />
        <Message Text=" " />

        <Message Text="Git command line executable is located at:                         $(ToolsExternalGitPath)" />
        <Message Text="TFS command line executable is located at:                         $(ToolsExternalTfsPath)" />
        <Message Text=" " />

        <Message Text="The semantic version file is located at:                           $(FileSemanticVersion)" />
        <Message Text=" " />

        <Message Text="The current workspace is a GIT workspace"
                 Condition=" '$(IsGitWorkspace)' == 'true' " />
        <Message Text="The current workspace is a TFS workspace"
                 Condition=" '$(IsTfsWorkspace)' == 'true' " />
        <Warning Text="The current workspace does not have any identifying VCS information. No tags will be applied"
                 Condition=" '$(IsGitWorkspace)' != 'true' AND '$(IsTfsWorkspace)' != 'true' " />
        <Message Text=" " />

        <Message Text="Pushing GIT tags to:                                               $(GitRemoteRepository)"
                 Condition="Exists('$(DirWorkspace)\.git')" />
        <Message Text=" " />
    </Target>

    <Target Name="_nBuildKit_Tag_Vcs_GetVersion">
        <Warning Text="The semantic version file does not exist. Will not be able to get the version."
                 Condition="!Exists('$(FileSemanticVersion)') AND '$(ShouldExecute)' == 'true' " />
        <GetSemanticVersionFromFile VersionFile="$(FileSemanticVersion)"
                                    Condition="Exists('$(FileSemanticVersion)') AND '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
        </GetSemanticVersionFromFile>

        <Message Text="The semantic version is: $(VersionSemantic)" />
    </Target>

    <Target Name="_nBuildKit_Tag_Vcs_Git"
            Condition=" '$(IsGitWorkspace)' == 'true' "
            DependsOnTargets="_nBuildKit_Tag_Vcs_GetVersion">
        <Error Text="The git executable does not exist. Cannot apply tags."
               Condition=" '$(ToolsExternalGitPath)' == '' AND '$(ShouldExecute)' == 'true' "/>

        <Exec Command="&quot;$(ToolsExternalGitPath)&quot; tag -a -m &quot;Tagging $(VersionSemantic)&quot; &quot;$(VersionSemantic)&quot;"
              WorkingDirectory="$(DirWorkspace)"
              Condition=" '$(ShouldExecute)' == 'true' "/>

        <!--
            Push the tags to the remote repository. Note that we suppress all the output because otherwise GIT echo's the repository URL it
            pushes too which may have the GitHub token in there
        -->
        <Exec Command="&quot;$(ToolsExternalGitPath)&quot; push --tags --repo $(GitRemoteRepository) &gt;nul 2&gt;&amp;1"
              WorkingDirectory="$(DirWorkspace)"
              Condition=" '$(ShouldExecute)' == 'true' "/>
    </Target>

    <Target Name="_nBuildKit_Tag_Vcs_Tfs"
            Condition=" '$(IsTfsWorkspace)' == 'true' "
            DependsOnTargets="_nBuildKit_Tag_Vcs_GetVersion">
        <Error Text="The TFS executable does not exist. Cannot apply tags."
               Condition=" '$(ToolsExternalTfsPath)' == '' AND '$(ShouldExecute)' == 'true' "/>

        <Exec Command="&quot;$(ToolsExternalTfsPath)&quot; label $(VersionSemantic) $(DirWorkspace) /recursive"
              Condition=" '$(ShouldExecute)' == 'true' "/>
    </Target>
 </Project>