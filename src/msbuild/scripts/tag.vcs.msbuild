<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="nBuildKit_Tag_Vcs_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <BuildPropertyFile Condition=" '$(BuildPropertyFile)' == '' ">UNDEFINED</BuildPropertyFile>
    </PropertyGroup>

    <Import Project="$(BuildPropertyFile)"
            Condition="Exists('$(BuildPropertyFile)')" />
    
    <PropertyGroup>
        <!-- Build flags -->
        <ShouldDisplayDebugLog Condition=" '$(ShouldDisplayDebugLog)' == '' ">false</ShouldDisplayDebugLog>
        
        <!-- Build configuration -->
        <Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
        <Platform Condition=" '$(Platform)' == '' ">Any CPU</Platform>
        <PlatformWithoutSpaces>$(Platform.Replace(" ",""))</PlatformWithoutSpaces>
        
        <!-- Directories -->
        <DirWorkspace Condition=" '$(DirWorkspace)' == '' ">$(MSBuildProjectDirectory)</DirWorkspace>
        <DirBuild Condition=" '$(DirBuild)' == '' ">$(DirWorkspace)\build</DirBuild>
        <DirBuildTemp Condition=" '$(DirBuildTemp)' == '' ">$(DirBuild)\temp</DirBuildTemp>
        <DirMsBuildExtensions Condition=" '$(DirMsBuildExtensions)' == '' ">$(MSBuildProjectDirectory)\extensions</DirMsBuildExtensions>
        
        <!-- Files -->
        <FileSemanticVersion Condition=" '$(FileSemanticVersion)' == '' ">$(DirBuildTemp)\semantic_version.json</FileSemanticVersion>
        
        <!-- Version number -->
        <VersionSemantic>0</VersionSemantic>
        
        <!-- Repository information -->
        <GitRemoteRepository Condition=" '$(GitRemoteRepository)' == '' ">origin</GitRemoteRepository>
        
        <!-- External tools -->
        <ToolsExternalGitPath Condition=" '$(ToolsExternalGitPath)' == '' ">git.exe</ToolsExternalGitPath>
        <ToolsExternalTfsPath Condition=" '$(ToolsExternalTfsPath)' == '' ">tf.exe</ToolsExternalTfsPath>
    </PropertyGroup>
    
    <Import Project="$(MSBuildProjectDirectory)\shared.templatetext.msbuild" 
            Condition="Exists('$(MSBuildProjectDirectory)\shared.templatetext.msbuild')" />
    
    <Import Project="$(DirMsBuildExtensions)\TemplateText.msbuild" 
            Condition="Exists('$(DirMsBuildExtensions)\TemplateText.msbuild')" />
            
    <Target Name="nBuildKit_Tag_Vcs_Run" DependsOnTargets="_nBuildKit_Tag_Vcs_DisplayInfo">
        <CallTarget Targets="_nBuildKit_Tag_Vcs_DetermineWorkspaceType" />
        <CallTarget Targets="_nBuildKit_Tag_Vcs_Git" />
        <CallTarget Targets="_nBuildKit_Tag_Vcs_Tfs" />
    </Target>
    
    <!-- Display info -->
    <Target Name="_nBuildKit_Tag_Vcs_DisplayInfo" DependsOnTargets="_nBuildKit_Tag_Vcs_DebugLog">
        <Message Text="Tagging release ..." />
    </Target>
    
    <Target Name="_nBuildKit_Tag_Vcs_DebugLog" 
            Condition="$(ShouldDisplayDebugLog)">
        <Message Text="Project directory structure:" />
        <Message Text="The workspace is located at:                                      $(DirWorkspace)" />
        <Message Text="The directory containing the build output is located at:          $(DirBuild)" />
        <Message Text="The directory containing the temporary build files is located at: $(DirBuildTemp)" />
        <Message Text="The directory containing the nBuildKit scripts is located at:     $(DirMsBuildExtensions)" />
        <Message Text=" " />
        
        <Message Text="Git command line executable is located at: $(ToolsExternalGitPath)" />
        <Message Text="TFS command line executable is located at: $(ToolsExternalTfsPath)" />
        <Message Text=" " />
        
        <Message Text="The semantic version file is located at:                                     $(FileSemanticVersion)" />
        <Message Text=" " />
        
        <Message Text="The current workspace is a GIT workspace" Condition="Exists('$(DirWorkspace)\.git')" />
        <Warning Text="The current workspace does not have any identifying VCS information. No tags will be applied" 
                 Condition="!Exists('$(DirWorkspace)\.git')" />
        <Message Text=" " />
        
        <Message Text="Pushing GIT tags to: $(GitRemoteRepository)" Condition="Exists('$(DirWorkspace)\.git')" />
        <Message Text=" " />
    </Target>
    
    <Target Name="_nBuildKit_Tag_Vcs_GetVersion">
        <GetSemanticVersionFromGitHubFlowVersionOutputFile VersionFile="$(FileSemanticVersion)">
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
        </GetSemanticVersionFromGitHubFlowVersionOutputFile>
    </Target>
    
    <PropertyGroup>
        <IsGitWorkspace>false</IsGitWorkspace>
        <IsTfsWorkspace>false</IsTfsWorkspace>
    </PropertyGroup>
    <Target Name="_nBuildKit_Tag_Vcs_DetermineWorkspaceType">
        <CreateProperty Value="true"
                        Condition="Exists('$(DirWorkspace)\.git')">
            <Output TaskParameter="Value" PropertyName="IsGitWorkspace" />
        </CreateProperty>
    </Target>
    
    <Target Name="_nBuildKit_Tag_Vcs_Git" Condition="$(IsGitWorkspace)" DependsOnTargets="_nBuildKit_Tag_Vcs_GetVersion">
        <Exec Command="&quot;$(ToolsExternalGitPath)&quot; tag -a -m &quot;Tagging $(VersionSemantic)&quot; &quot;$(VersionSemantic)&quot;"
              WorkingDirectory="$(DirWorkspace)" />
              
        <!-- 
            Push the tags to the remote repository. Note that we suppress all the output because otherwise GIT echo's the repository URL it
            pushes too which may have the GitHub token in there
        -->
        <Exec Command="&quot;$(ToolsExternalGitPath)&quot; push --tags --repo $(GitRemoteRepository) &gt;nul 2&gt;&amp;1"
              WorkingDirectory="$(DirWorkspace)" />
    </Target>
    
    <Target Name="_nBuildKit_Tag_Vcs_Tfs" Condition="$(IsTfsWorkspace)" DependsOnTargets="_nBuildKit_Tag_Vcs_GetVersion">
        <Exec Command="&quot;$(ExeTfsClient)&quot; label $(VersionSemantic) $(DirWorkspace) /recursive" />
    </Target>
 </Project>