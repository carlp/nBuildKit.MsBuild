<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsSharedTemplateTokens>true</ExistsSharedTemplateTokens>
    </PropertyGroup>

    <PropertyGroup>
        <!-- Build flags -->
        <ShouldExecute Condition=" '$(ShouldExecute)' == '' ">true</ShouldExecute>

        <!-- Build configuration -->
        <Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
        <Platform Condition=" '$(Platform)' == '' ">Any CPU</Platform>
        <PlatformWithoutSpaces Condition=" '$(PlatformWithoutSpaces)' == '' ">$(Platform.Replace(" ",""))</PlatformWithoutSpaces>

        <!-- Directories -->
        <DirBuild Condition=" '$(DirBuild)' == '' ">$(DirWorkspace)\build</DirBuild>
        <DirBuildTemp Condition=" '$(DirBuildTemp)' == '' ">$(DirBuild)\temp</DirBuildTemp>
        <DirNBuildKitMsBuildExtensions Condition=" '$(DirNBuildKitMsBuildExtensions)' == '' ">$(MSBuildProjectDirectory)\extensions</DirNBuildKitMsBuildExtensions>

        <!-- Files -->
        <FileSemanticVersion Condition=" '$(FileSemanticVersion)' == '' ">$(DirBuildTemp)\semantic_version.json</FileSemanticVersion>
        <FileReleaseNotesShort Condition=" '$(FileReleaseNotesShort)' == '' ">$(DirBuildTemp)\releasenotes_short.md</FileReleaseNotesShort>
        <FileReleaseNotesFull Condition=" '$(FileReleaseNotesFull)' == '' ">$(DirBuildTemp)\releasenotes_full.md</FileReleaseNotesFull>
        <FileVcsInfo Condition=" '$(FileVcsInfo)' == '' ">$(DirBuildTemp)\vcs.info.json</FileVcsInfo>
    </PropertyGroup>

    <Import Project="$(DirNBuildKitMsBuildExtensions)\GetSemanticVersionFromFile.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\GetSemanticVersionFromFile.msbuild') AND '$(ExistsExtensionsGetSemanticVersionFromFile)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\GetVcsInfoFromFile.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\GetVcsInfoFromFile.msbuild') AND '$(ExistsExtensionsGetVcsInfoFromFile)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\TemplateText.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\TemplateText.msbuild') AND '$(ExistsExtensionsTemplateText)' != 'true' " />

    <Target Name="nBuildKit_Shared_TemplateTokens_Initialize">
        <CallTarget Targets="nBuildKit_Shared_TemplateTokens_Initialize_GetPropertyValues" />
        <CallTarget Targets="nBuildKit_Shared_TemplateTokens_Initialize_StandardParameters" />
        <CallTarget Targets="nBuildKit_Shared_TemplateTokens_Initialize_SpecialVersionParameters" />
    </Target>

    <Target Name="nBuildKit_Shared_TemplateTokens_Initialize_GetPropertyValues">
        <GetSemanticVersionFromFile VersionFile="$(FileSemanticVersion)"
                                    Condition="Exists('$(FileSemanticVersion)') AND '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="VersionMajor" PropertyName="VersionMajor" />
            <Output TaskParameter="VersionMinor" PropertyName="VersionMinor" />
            <Output TaskParameter="VersionPatch" PropertyName="VersionPatch" />
            <Output TaskParameter="VersionBuild" PropertyName="VersionBuild" />
            <Output TaskParameter="VersionPreRelease" PropertyName="VersionPreRelease" />
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
            <Output TaskParameter="VersionSemanticFull" PropertyName="VersionSemanticFull" />
            <Output TaskParameter="VersionSemanticNuGet" PropertyName="VersionSemanticNuGet" />
        </GetSemanticVersionFromFile>

        <CreateProperty Value="$([System.IO.File]::ReadAllText('$(FileReleaseNotesShort)'))"
                        Condition="Exists('$(FileReleaseNotesShort)') AND '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="Value" PropertyName="ReleaseNotesShort" />
        </CreateProperty>

        <CreateProperty Value="$([System.IO.File]::ReadAllText('$(FileReleaseNotesFull)'))"
                        Condition="Exists('$(FileReleaseNotesFull)') AND '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="Value" PropertyName="ReleaseNotesFull" />
        </CreateProperty>

        <GetVcsInfoFromFile InfoFile="$(FileVcsInfo)"
                            Condition="Exists('$(FileVcsInfo)')">
            <Output TaskParameter="Revision" PropertyName="VcsRevision" />
            <Output TaskParameter="Branch" PropertyName="VcsBranch" />
        </GetVcsInfoFromFile>
    </Target>

    <Target Name="nBuildKit_Shared_TemplateTokens_Initialize_StandardParameters"
            DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize_GetPropertyValues">
        <ItemGroup>
            <!-- Versions -->
            <TemplateTokens Include="VersionMajor">
                <ReplacementValue>$(VersionMajor)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="VersionMinor">
                <ReplacementValue>$(VersionMinor)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="VersionPatch">
                <ReplacementValue>$(VersionPatch)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="VersionBuild">
                <ReplacementValue>$(VersionBuild)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="VersionPreRelease">
                <ReplacementValue>$(VersionPreRelease)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="VersionSemantic">
                <ReplacementValue>$(VersionSemantic)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="VersionSemanticFull">
                <ReplacementValue>$(VersionSemanticFull)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="VersionSemanticNuGet">
                <ReplacementValue>$(VersionSemanticNuGet)</ReplacementValue>
            </TemplateTokens>

            <!-- Build setup -->
            <TemplateTokens Include="Configuration">
                <ReplacementValue>$(Configuration)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="Platform">
                <ReplacementValue>$(Platform)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="PlatformWithoutSpaces">
                <ReplacementValue>$(PlatformWithoutSpaces)</ReplacementValue>
            </TemplateTokens>

            <!-- VCS information -->
            <TemplateTokens Include="VcsRevision">
                <ReplacementValue>$(VcsRevision)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="VcsBranch">
                <ReplacementValue>$(VcsBranch)</ReplacementValue>
            </TemplateTokens>

            <!-- Release notes -->
            <TemplateTokens Include="ReleaseNotesShort">
                <ReplacementValue>$(ReleaseNotesShort)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="ReleaseNotesFull">
                <ReplacementValue>$(ReleaseNotesFull)</ReplacementValue>
            </TemplateTokens>

            <!-- Time & date -->
            <TemplateTokens Include="Now">
                <ReplacementValue>$([System.DateTime]::Now.ToString("o"))</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="Date">
                <ReplacementValue>$([System.DateTime]::Now.ToString("yyyy-MM-dd"))</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="DayOfMonth">
                <ReplacementValue>$([System.DateTime]::Now.ToString("dd"))</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="Month">
                <ReplacementValue>$([System.DateTime]::Now.ToString("MM"))</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="Year">
                <ReplacementValue>$([System.DateTime]::Now.ToString("yyyy"))</ReplacementValue>
            </TemplateTokens>

            <!-- Product information -->
            <TemplateTokens Include="ProductName">
                <ReplacementValue>$(ProductName)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="ProductNameInFilePath">
                <ReplacementValue>$(ProductNameInFilePath)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="ProductDescription">
                <ReplacementValue>$(ProductDescription)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="ProductNamespace">
                <ReplacementValue>$(ProductNamespace)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="ProductStartingYear">
                <ReplacementValue>$(ProductStartingYear)</ReplacementValue>
            </TemplateTokens>

            <TemplateTokens Include="CompanyName">
                <ReplacementValue>$(CompanyName)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="CompanyNameInFilePath">
                <ReplacementValue>$(CompanyNameInFilePath)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="CompanyUrl">
                <ReplacementValue>$(CompanyUrl)</ReplacementValue>
            </TemplateTokens>

            <TemplateTokens Include="CopyrightShort">
                <ReplacementValue>$(CopyrightShort)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="CopyrightLong">
                <ReplacementValue>$(CopyrightLong)</ReplacementValue>
            </TemplateTokens>

            <!-- File paths -->
            <TemplateTokens Include="FileReleaseNotesShort">
                <ReplacementValue>$(FileReleaseNotesShort)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="FileReleaseNotesFull">
                <ReplacementValue>$(FileReleaseNotesFull)</ReplacementValue>
            </TemplateTokens>

            <!-- Directory paths -->
            <TemplateTokens Include="DirWorkspace">
                <ReplacementValue>$(DirWorkspace)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="DirBin">
                <ReplacementValue>$(DirBuildBinPlatformConfig)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="DirDeploy">
                <ReplacementValue>$(DirBuildDeploy)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="DirLogs">
                <ReplacementValue>$(DirBuildLogs)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="DirSrc">
                <ReplacementValue>$(DirSrc)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="DirTemp">
                <ReplacementValue>$(DirBuildTemp)</ReplacementValue>
            </TemplateTokens>

            <TemplateTokens Include="DirNBuildKit">
                <ReplacementValue>$(DirNBuildKitMsBuild)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="DirNBuildKitExtensions">
                <ReplacementValue>$(DirNBuildKitMsBuildExtensions)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="DirNBuildKitTemplates">
                <ReplacementValue>$(DirNBuildKitMsBuildTemplates)</ReplacementValue>
            </TemplateTokens>

            <TemplateTokens Include="VersionNBuildKit">
                <ReplacementValue>$(NBuildKitVersion)</ReplacementValue>
            </TemplateTokens>
        </ItemGroup>
    </Target>

    <Target Name="nBuildKit_Shared_TemplateTokens_Initialize_SpecialVersionParameters"
            DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize_StandardParameters"
            Outputs="%(TemplateVersion.Identity)">
        <!--
            Transform the template text in the version number into a string without template parameters
            in it and assign it to the requested property.
        -->
        <TemplateText Template="%(TemplateVersion.Template)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="TemplateVersionWithReplacedParameters" />
        </TemplateText>

        <!--
            Add the new value to the list of template tokens under the given name.
        -->
        <!--
            Implementation note:
            Because of the overriding approach used for the TemplateVersion ItemGroup there may be duplicates
            in the list so we have to filter those out by throwing away values that already exist in the new list.
        -->
        <CreateItem
            Include="%(TemplateVersion.Identity)"
            AdditionalMetadata="ReplacementValue=$(TemplateVersionWithReplacedParameters)"
            Condition="!$([System.String]::new('@(TemplateTokens)').Contains('%(TemplateVersion.Identity)'))">
           <Output
               TaskParameter="Include"
               ItemName="TemplateTokens"/>
        </CreateItem>
    </Target>
</Project>