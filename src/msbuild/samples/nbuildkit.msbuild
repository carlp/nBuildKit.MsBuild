<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="Help"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Directories -->
        <!--
            The workspace directory is defined as the directory that contains the 'settings.props' file.
            Given that the current file has to live in the same directory as the 'settings.props' file that
            means that the workspace directory is the 'MsBuildProjectDirectory' for the current file.
        -->
        <DirWorkspace>$(MSBuildProjectDirectory)</DirWorkspace>
        <!-- The default directory that the NuGet packages are expanded into -->
        <DirDefaultPackages>$(DirWorkspace)\packages</DirDefaultPackages>

        <!-- Files -->
        <!--
            The file that contains all the properties for the build and deploy processes.
        -->
        <BuildPropertyFile>$(DirWorkspace)\settings.props</BuildPropertyFile>
        <!--
            The file that contains all the NuGet packages that are used by the non-compilation parts
            of the build and deploy process. NuGet package files that are used by the compilation parts
            of the build process are expected to be handled by the compilation process.
        -->
        <NuGetPackageFile>$(DirWorkspace)\packages.config</NuGetPackageFile>
        <!--
            The file that contains all the NuGet configuration settings for the current project. This file
            is used to determine where the package directory is located if no such directory is defined.
        -->
        <FileNugetConfig>$(DirWorkspace)\nuget.config</FileNugetConfig>

        <!-- External tools -->
        <!-- The full path to the NuGet command line application. Expected to be found via the PATH environment variable. -->
        <ToolsExternalNuGetPath Condition=" '$(ToolsExternalNuGetPath)' == '' ">NuGet.exe</ToolsExternalNuGetPath>
    </PropertyGroup>

    <!--
        Display the help text for the current script and then exit.
    -->
    <Target Name="Help">
        <Message Text="nBuildKit - Build system" />
        <Message Text="Copyright 2013 nBuildKit. Apache License, Version 2.0" />
        <Message Text="" />
        <Message Text="The following targets exist:" />
        <Message Text="" />
        <Message Text="- Build: Executes the build sequence. Build steps are as defined by the 'BuildStepsToExecute' in the 'settings.props' file." />
        <Message Text="- Deploy: Executes the deploy sequence. Deploy steps are as defined by the 'DeployStepsToExecute' in the 'settings.props' file." />
        <Message Text="- Help: Displays this text." />
    </Target>

    <!--
        Invoke the build steps as defined by the 'settings.props' file by invoking the nBuildKit 'build.msbuild'
        script and passing the path to the 'settings.props' file and the version of nBuildKit that is going to
        be used to execute the build.
    -->
    <Target Name="Build"
            DependsOnTargets="_RestoreGlobalNugetPackages;_LocateNBuildKit">
        <MSBuild
            BuildInParallel="False"
            Projects="$(DirNBuildKit)\build.msbuild"
            Properties="BuildPropertyFile=$(BuildPropertyFile);NBuildKitVersion=$(NBuildKitVersion)"
            RebaseOutputs="False"
            RemoveProperties=""
            RunEachTargetSeparately="True"
            SkipNonexistentProjects="False"
            StopOnFirstFailure="True"
            TargetAndPropertyListSeparators=""
            Targets=""
            ToolsVersion="$(MSBuildToolsVersion)"
            UnloadProjectsOnCompletion="False"
            UseResultsCache="True">
        </MSBuild>
    </Target>

    <!--
        Invoke the deploy steps as defined by the 'settings.props' file by invoking the nBuildKit 'deploy.msbuild'
        script and passing the path to the 'settings.props' file and the version of nBuildKit that is going to
        be used to execute the deploy.
    -->
    <Target Name="Deploy"
            DependsOnTargets="_RestoreGlobalNugetPackages;_LocateNBuildKit">
        <MSBuild
            BuildInParallel="False"
            Projects="$(DirNBuildKit)\deploy.msbuild"
            Properties="BuildPropertyFile=$(BuildPropertyFile);NBuildKitVersion=$(NBuildKitVersion)"
            RebaseOutputs="False"
            RemoveProperties=""
            RunEachTargetSeparately="True"
            SkipNonexistentProjects="False"
            StopOnFirstFailure="True"
            TargetAndPropertyListSeparators=""
            Targets=""
            ToolsVersion="$(MSBuildToolsVersion)"
            UnloadProjectsOnCompletion="False"
            UseResultsCache="True">
        </MSBuild>
    </Target>

    <!--
        Restore all the packages that are used by the non-compilation part of the build and deploy process. This is required
        so that we can be sure that the nBuildKit main package is extacted to the package directory.
    -->
    <Target Name="_RestoreGlobalNugetPackages" DependsOnTargets="_LocatePackagesDir">
        <Exec Command="&quot;$(ToolsExternalNuGetPath)&quot; restore &quot;$(NuGetPackageFile)&quot; -NoCache -NonInteractive -Verbosity detailed -PackagesDirectory &quot;$(DirPackages)&quot;"
              Condition="Exists('$(NuGetPackageFile)')" />
    </Target>

    <!--
        Get the full path to the nBuildkit package directory so that we can invoked the build scripts from there.
    -->
    <Target Name="_LocateNBuildKit"
            DependsOnTargets="_LocatePackagesDir">
        <!-- Get the version of nBuildKit that is expected from the global packages file -->
        <XmlPeek XmlInputPath="$(NuGetPackageFile)"
                 Query="//package[@id='nBuildKit.MsBuild']/@version"
                 Condition="Exists('$(NuGetPackageFile)')">
            <Output TaskParameter="Result" ItemName="VersionNBuildKit" />
        </XmlPeek>
        <Message Text="Version: @(VersionNBuildKit)" />

        <CreateProperty Value="%(VersionNBuildKit.Identity)">
            <Output TaskParameter="Value" PropertyName="NBuildKitVersion" />
        </CreateProperty>

        <!--
            If the packages directory exists then we assume that nBuildKit is in there. If that is not the case we'll get a
            non-existing path but that will lead to an error.
        -->
        <CreateProperty Value="$(DirPackages)\nBuildKit.MsBuild.$(NBuildKitVersion)\build" Condition="Exists('$(DirPackages)') AND !Exists('$(DirNBuildKit)')">
            <Output TaskParameter="Value" PropertyName="DirNBuildKit" />
        </CreateProperty>

        <Error Text="Unable to find the nBuildKit directory."
               Condition="!Exists('$(DirNBuildKit)')" />
    </Target>

    <!--
        Get the full path to the packages directory.
    -->
    <Target Name="_LocatePackagesDir">
        <!-- Determine if a packages folder exists at the same level as this script. If so use that  -->
        <CreateProperty Value="$(DirDefaultPackages)" Condition="Exists('$(DirDefaultPackages)')">
            <Output TaskParameter="Value" PropertyName="DirPackages" />
        </CreateProperty>

        <!-- Get the location of the packages directory from the local nuget.config file -->
        <XmlPeek XmlInputPath="$(FileNugetConfig)"
                 Query="//add[@key='repositorypath']/@value"
                 Condition="!Exists('$(DirPackages)')">
            <Output TaskParameter="Result" ItemName="DirNuGetPackages" />
        </XmlPeek>

        <!-- If the DirNuGetPackages has a root (i.e. a drive letter) then we assume it is an absolute path. Just use it that way. -->
        <CreateProperty Value="$([System.IO.Path]::GetFullPath('%(DirNuGetPackages.Identity)'))" Condition=" '$(DirNuGetPackages)' != '' AND $([System.IO.Path]::IsPathRooted('%(DirNuGetPackages.Identity)'))">
            <Output TaskParameter="Value" PropertyName="DirPackages" />
        </CreateProperty>

        <!-- If the DirNuGetPackages has no root (i.e. no drive letter) then we assume it is a relative path. Base it on the directory that the nuget.config file is in. -->
        <CreateProperty Value="$([System.IO.Path]::GetFullPath('$(DirWorkspace)\%(DirNuGetPackages.Identity)'))" Condition=" '@(DirNuGetPackages)' != '' AND !$([System.IO.Path]::IsPathRooted('%(DirNuGetPackages.Identity)'))">
            <Output TaskParameter="Value" PropertyName="DirPackages" />
        </CreateProperty>

        <Message Text="Package directory at: $(DirPackages)"
                 Condition=" '$(DirPackages)' != '' " />

        <!-- No packages folder found. Note this and move on -->
        <Warning Text="Unable to find the packages folder."
                 Condition=" '$(DirPackages)' == '' " />
    </Target>
</Project>