<!--
     Copyright 2013 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'
         ToolsVersion="4.0">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsExtensionsVsTestCoverageOutputToXml>true</ExistsExtensionsVsTestCoverageOutputToXml>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>
    </PropertyGroup>

    <UsingTask TaskName="VsTestCoverageOutputToXml"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MsBuildTasksAssembly)">
        <ParameterGroup>
            <InputFile ParameterType="System.String" Required="true" />
            <BinDirectory ParameterType="System.String" Required="true" />
            <OutputFile ParameterType="System.String" Required="true" />
            <VisualStudioDirectory ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Data" />
            <Reference Include="System.Xml" />
            <Reference Include="$(ToolsExternalVisualStudioDir)\Common7\IDE\PrivateAssemblies\Microsoft.VisualStudio.Coverage.Analysis.dll"/>
            <Using Namespace="Microsoft.VisualStudio.Coverage.Analysis" />
            <Code Type="Class" Language="cs">
                <![CDATA[
                    using System;
                    using System.IO;
                    using Microsoft.Build.Framework;
                    using Microsoft.Build.Utilities;
                    using Microsoft.VisualStudio.Coverage.Analysis;

                    public sealed class VsTestCoverageOutputToXml : Microsoft.Build.Utilities.Task
                    {
                        [Microsoft.Build.Framework.Required]
                        public string InputFile
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public string BinDirectory
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public string OutputFile
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public string VisualStudioDirectory
                        {
                            get;
                            set;
                        }

                        public override bool Execute()
                        {
                            try
                            {
                                var searchPath = System.IO.Path.Combine(VisualStudioDirectory, @"Common7\IDE\PrivateAssemblies");
                                SetupAdditionalAssemblySearchPaths(searchPath);
                                CopySymbolsFile(searchPath);
                                ConvertCoverageFile();
                            }
                            catch (System.Exception e)
                            {
                                Log.LogError(
                                    string.Format(
                                        "Converting the VsTest coverage failed with an exception. Exception was: {0}",
                                        e));
                            }

                            // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                            // from a task's constructor or property setter. As long as this task is written to always log an error
                            // when it fails, we can reliably return HasLoggedErrors.
                            return !Log.HasLoggedErrors;
                        }

                        private void SetupAdditionalAssemblySearchPaths(string searchPath)
                        {
                            // The appbase for the MsBuild assembly load is the MsBuild folder (logically) which means
                            // the .NET assembly loader won't look in the VS directory for the assembly it needs, eventhough
                            // the compiler had no issues searching there.
                            //
                            // So we'll have to do this the nasty way ...
                            System.AppDomain.CurrentDomain.AssemblyResolve +=
                                (sender, e) =>
                                {
                                    Log.LogMessage(
                                        MessageImportance.Low,
                                        string.Format(
                                            "Entering custom assembly resolve function. Searching for {0}",
                                            e.Name));

                                    var assemblySearchPath = System.IO.Path.Combine(
                                        searchPath,
                                        string.Format(
                                            "{0}.dll",
                                            e.Name.Split(',')[0]));
                                    if (System.IO.File.Exists(assemblySearchPath))
                                    {
                                        Log.LogMessage(
                                            MessageImportance.Low,
                                            string.Format(
                                                "Found {0} at {1}",
                                                e.Name,
                                                assemblySearchPath));
                                        return System.Reflection.Assembly.LoadFrom(assemblySearchPath);
                                    }

                                    Log.LogMessage(
                                        MessageImportance.Low,
                                        string.Format(
                                            "Did not find {0} at {1}",
                                            e.Name,
                                            assemblySearchPath));

                                    return null;
                                };
                        }

                        private void CopySymbolsFile(string searchPath)
                        {
                            var symbolsAssemblyDefaultPath = System.IO.Path.Combine(searchPath, @"Microsoft.VisualStudio.Coverage.Symbols.dll");
                            var symbolsAssemblyLocalPath = System.IO.Path.Combine(BinDirectory, @"Microsoft.VisualStudio.Coverage.Symbols.dll");
                            if (!System.IO.File.Exists(symbolsAssemblyLocalPath))
                            {
                                Log.LogMessage(
                                    MessageImportance.Low,
                                    string.Format(
                                        "Copying {0} to {1}",
                                        symbolsAssemblyDefaultPath,
                                        symbolsAssemblyLocalPath));
                                System.IO.File.Copy(symbolsAssemblyDefaultPath, symbolsAssemblyLocalPath);
                            }
                        }

                        private void ConvertCoverageFile()
                        {
                            Log.LogMessage(
                                    MessageImportance.Low,
                                    string.Format(
                                        "Converting VsTest coverage file {0} to {1}",
                                        InputFile,
                                        OutputFile));
                            using (CoverageInfo info = CoverageInfo.CreateFromFile(
                                InputFile,
                                new string[] { BinDirectory },
                                new string[] { }))
                            {
                                CoverageDS data = info.BuildDataSet();
                                data.WriteXml(OutputFile);
                            }
                        }
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>