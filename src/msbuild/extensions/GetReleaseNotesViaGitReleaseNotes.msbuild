<!--
     Copyright 2013 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'
         ToolsVersion="4.0">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsGetReleaseNotesViaGitReleaseNotes>true</ExistsGetReleaseNotesViaGitReleaseNotes>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>

        <MsBuildUtilitiesAssembly>$(MSBuildToolsPath)\Microsoft.Build.Utilities.v$(MSBuildToolsVersion).dll</MsBuildUtilitiesAssembly>
        <MsBuildUtilitiesAssembly Condition="!Exists('$(MsBuildUtilitiesAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Utilities.Core.dll</MsBuildUtilitiesAssembly>
    </PropertyGroup>

    <UsingTask TaskName="GetReleaseNotesViaGitReleaseNotes"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MsBuildTasksAssembly)">
        <ParameterGroup>
            <ExePath ParameterType="System.String" Required="true" />
            <RepositoryName ParameterType="System.String" Required="true" />
            <YouTrackUserName ParameterType="System.String" Required="false" />
            <YouTrackServer ParameterType="System.String" Required="false" />
            <YouTrackProject ParameterType="System.String" Required="false" />
            <YouTrackFilter ParameterType="System.String" Required="false" />
            <Version ParameterType="System.String" Required="true" />
            <OutputFile ParameterType="System.String" Required="true" />
            <GetAllReleaseNotes ParameterType="System.Boolean" Required="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Xml" />
            <Reference Include="$(MSBuildToolsPath)\Microsoft.Build.Framework.dll"/>
            <Reference Include="$(MsBuildUtilitiesAssembly)"/>
            <Code Type="Class" Language="cs">
                <![CDATA[
                    using System;
                    using System.Collections.Generic;
                    using System.Linq;
                    using System.IO;
                    using System.Runtime.InteropServices;
                    using System.Xml;
                    using Microsoft.Build.Framework;
                    using Microsoft.Build.Utilities;

                    public sealed class GetReleaseNotesViaGitReleaseNotes : Microsoft.Build.Utilities.Task
                    {
                        /// <summary>
                        /// Set the window's error mode for this process. Be very careful with this --- this is a process wide
                        /// setting, so in a multi-threaded situation it can do crazy things!
                        /// Code pulled from: http://msdn.microsoft.com/en-us/magazine/cc163866.aspx
                        /// </summary>
                        public struct ChangeErrorMode : IDisposable
                        {
                            /// <summary>
                            /// Error modes that can be enabled or disabled.
                            /// </summary>
                            [Flags]
                            public enum ErrorModes
                            {
                                Default = 0x0,
                                FailCriticalErrors = 0x1,
                                NoGpFaultErrorBox = 0x2,
                                NoAlignmentFaultExcept = 0x4,
                                NoOpenFileErrorBox = 0x8000
                            }

                            private int _oldMode;

                            /// <summary>
                            /// Set the new error mode. When Dispose is called it will reset
                            /// to the original value (use the "using" statement).
                            /// </summary>
                            /// <param name="mode"></param>
                            public ChangeErrorMode(ErrorModes mode)
                            {
                                _oldMode = SetErrorMode((int)mode);
                            }

                            void IDisposable.Dispose() { SetErrorMode(_oldMode); }

                            [DllImport("kernel32.dll")]
                            private static extern int SetErrorMode(int newMode);
                        }


                        [Microsoft.Build.Framework.Required]
                        public string ExePath
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public string RepositoryName
                        {
                            get;
                            set;
                        }

                        public string YouTrackUserName
                        {
                            get;
                            set;
                        }

                        public string YouTrackServer
                        {
                            get;
                            set;
                        }

                        public string YouTrackProject
                        {
                            get;
                            set;
                        }

                        public string YouTrackFilter
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public string Version
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public string OutputFile
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public bool GetAllReleaseNotes
                        {
                            get;
                            set;
                        }

                        public override bool Execute()
                        {
                            var builder = new System.Text.StringBuilder();
                            {
                                builder.Append("/Token %GitHubToken% ");
                                builder.Append(string.Format("/Repo \"{0}\" ", RepositoryName));
                                builder.Append(string.Format("/Version \"{0}\" ", Version));
                                builder.Append(string.Format("/OutputFile \"{0}\" ", OutputFile));

                                if (!string.IsNullOrEmpty(YouTrackUserName))
                                {
                                    builder.Append("/IssueTracker YouTrack ");
                                    builder.Append(string.Format("/UserName \"{0}\" ", YouTrackUserName));
                                    builder.Append("/Password %IssueTrackerPassword% ");
                                    builder.Append(string.Format("/YouTrackServer \"{0}\" ", YouTrackServer));
                                    builder.Append(string.Format("/ProjectId \"{0}\" ", YouTrackProject));
                                    builder.Append(string.Format("/YouTrackFilter \"{0}\" ", YouTrackFilter));
                                }
                                else
                                {
                                    builder.Append("/IssueTracker GitHub ");
                                }

                                if (GetAllReleaseNotes)
                                {
                                    builder.Append("/AllTags ");
                                }
                            }

                            var arguments = builder.ToString();
                            Log.LogMessage(MessageImportance.Low, ExePath);
                            Log.LogMessage(MessageImportance.Low, arguments);

                            var info = new System.Diagnostics.ProcessStartInfo
                            {
                                FileName = ExePath,
                                Arguments = System.Environment.ExpandEnvironmentVariables(arguments),
                                UseShellExecute = false,
                                RedirectStandardOutput = true,
                                RedirectStandardError = true,
                            };

                            var text = new System.Text.StringBuilder();
                            var process = new System.Diagnostics.Process();
                            process.StartInfo = info;
                            process.OutputDataReceived +=
                                (s, e) =>
                                {
                                    if (!string.IsNullOrWhiteSpace(e.Data))
                                    {
                                        Log.LogMessage(MessageImportance.Low, e.Data);
                                    }
                                };
                            process.ErrorDataReceived +=
                                (s, e) =>
                                {
                                    if (!string.IsNullOrWhiteSpace(e.Data))
                                    {
                                        Log.LogError(e.Data);
                                    }
                                };

                            lock (this)
                            {
                                using (ChangeErrorMode newnewerr = new ChangeErrorMode(ChangeErrorMode.ErrorModes.FailCriticalErrors | ChangeErrorMode.ErrorModes.NoGpFaultErrorBox))
                                {
                                    process.Start();

                                    process.BeginOutputReadLine();
                                    process.BeginErrorReadLine();
                                    process.WaitForExit();
                                }
                            }

                            if (process.ExitCode != 0)
                            {
                                Log.LogError(
                                    string.Format(
                                        "{0} exited with a non-zero exit code. Exit code was: {1}",
                                        System.IO.Path.GetFileName(process.StartInfo.FileName),
                                        process.ExitCode));
                                return false;
                            }

                            // All lines in the short release notes start with a single space. When we try to read the
                            // content of the files into a MsBuild property the starting whitespace on the first line
                            // gets stripped.
                            if (!GetAllReleaseNotes)
                            {
                                var strippedLines = new System.Collections.Generic.List<string>();
                                var lines = File.ReadLines(OutputFile).ToArray();
                                foreach(var line in lines)
                                {
                                    strippedLines.Add(line.Trim());
                                }

                                File.WriteAllLines(OutputFile, strippedLines.ToArray());
                            }

                            // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                            // from a task's constructor or property setter. As long as this task is written to always log an error
                            // when it fails, we can reliably return HasLoggedErrors.
                            return !Log.HasLoggedErrors;
                        }
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>