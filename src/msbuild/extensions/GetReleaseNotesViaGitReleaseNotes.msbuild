<!--
     Copyright 2013 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'
         ToolsVersion="4.0">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsGetReleaseNotesViaGitReleaseNotes>true</ExistsGetReleaseNotesViaGitReleaseNotes>
    </PropertyGroup>

    <UsingTask TaskName="GetReleaseNotesViaGitReleaseNotes"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll">
        <ParameterGroup>
            <ExePath ParameterType="System.String" Required="true" />
            <RepositoryName ParameterType="System.String" Required="true" />
            <YouTrackUserName ParameterType="System.String" Required="false" />
            <YouTrackServer ParameterType="System.String" Required="false" />
            <YouTrackProject ParameterType="System.String" Required="false" />
            <YouTrackFilter ParameterType="System.String" Required="false" />
            <Version ParameterType="System.String" Required="true" />
            <OutputFile ParameterType="System.String" Required="true" />
            <GetAllReleaseNotes ParameterType="System.Boolean" Required="true" />
        </ParameterGroup>
        <Task>
            <Code Type="Method" Language="cs">
                <![CDATA[
                    public override bool Execute()
                    {
                        var builder = new System.Text.StringBuilder();
                        {
                            builder.Append("/Token %GitHubToken% ");
                            builder.Append(string.Format("/Repo \"{0}\" ", RepositoryName));
                            builder.Append(string.Format("/Version \"{0}\" ", Version));
                            builder.Append(string.Format("/OutputFile \"{0}\" ", OutputFile));

                            if (!string.IsNullOrEmpty(YouTrackUserName))
                            {
                                builder.Append("/IssueTracker YouTrack ");
                                builder.Append(string.Format("/UserName \"{0}\" ", YouTrackUserName));
                                builder.Append("/Password %IssueTrackerPassword% ");
                                builder.Append(string.Format("/YouTrackServer \"{0}\" ", YouTrackServer));
                                builder.Append(string.Format("/ProjectId \"{0}\" ", YouTrackProject));
                                builder.Append(string.Format("/YouTrackFilter \"{0}\" ", YouTrackFilter));
                            }
                            else
                            {
                                builder.Append("/IssueTracker GitHub ");
                            }

                            if (GetAllReleaseNotes)
                            {
                                builder.Append("/AllTags ");
                            }
                        }

                        var arguments = builder.ToString();
                        Log.LogMessage(MessageImportance.Low, ExePath);
                        Log.LogMessage(MessageImportance.Low, arguments);

                        var info = new System.Diagnostics.ProcessStartInfo
                        {
                            FileName = ExePath,
                            Arguments = System.Environment.ExpandEnvironmentVariables(arguments),
                            UseShellExecute = false,
                            RedirectStandardOutput = true,
                            RedirectStandardError = true,
                        };

                        var text = new System.Text.StringBuilder();
                        var process = new System.Diagnostics.Process();
                        process.StartInfo = info;
                        process.OutputDataReceived +=
                            (s, e) =>
                            {
                                if (!string.IsNullOrWhiteSpace(e.Data))
                                {
                                    Log.LogMessage(MessageImportance.Low, e.Data);
                                }
                            };
                        process.ErrorDataReceived +=
                            (s, e) =>
                            {
                                if (!string.IsNullOrWhiteSpace(e.Data))
                                {
                                    Log.LogError(e.Data);
                                }
                            };
                        process.Start();

                        process.BeginOutputReadLine();
                        process.BeginErrorReadLine();
                        process.WaitForExit();

                        if (process.ExitCode != 0)
                        {
                            Log.LogError("Failed to get semantic version information");
                            return false;
                        }

                        // All lines in the short release notes start with a single space. When we try to read the
                        // content of the files into a MsBuild property the starting whitespace on the first line
                        // gets stripped.
                        if (!GetAllReleaseNotes)
                        {
                            var strippedLines = new System.Collections.Generic.List<string>();
                            var lines = File.ReadLines(OutputFile).ToArray();
                            foreach(var line in lines)
                            {
                                strippedLines.Add(line.Trim());
                            }

                            File.WriteAllLines(OutputFile, strippedLines.ToArray());
                        }

                        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                        // from a task's constructor or property setter. As long as this task is written to always log an error
                        // when it fails, we can reliably return HasLoggedErrors.
                        return !Log.HasLoggedErrors;
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>