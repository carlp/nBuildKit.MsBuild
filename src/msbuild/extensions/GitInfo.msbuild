<!-- 
     Copyright 2013 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' 
         ToolsVersion="4.0">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsExtensionsGitInfo>true</ExistsExtensionsGitInfo>
    </PropertyGroup>
    
    <UsingTask TaskName="GitInfo" 
               TaskFactory="CodeTaskFactory" 
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <GitExecutablePath ParameterType="System.String" Required="true" />
            <LocalPath ParameterType="System.String" Required="true" />
            <CurrentRevision ParameterType="System.String" Output="true" />
            <CurrentBranch ParameterType="System.String" Output="true" />
        </ParameterGroup>
        <Task>
            <Code Type="Method" Language="cs">
                <![CDATA[
                    public override bool Execute()
                    {
                        // Get the current revision
                        {
                            var info = new System.Diagnostics.ProcessStartInfo
                                    {
                                        FileName = GitExecutablePath,
                                        Arguments = "rev-parse HEAD",
                                        WorkingDirectory = LocalPath,
                                        UseShellExecute = false,
                                        RedirectStandardOutput = true,
                                        RedirectStandardError = true,
                                    };
                            
                            var text = new System.Text.StringBuilder();
                            var process = new System.Diagnostics.Process();
                            process.StartInfo = info;
                            process.OutputDataReceived += 
                                (s, e) => 
                                { 
                                    text.Append(e.Data);
                                };
                            process.ErrorDataReceived += 
                                (s, e) => 
                                { 
                                    if (!string.IsNullOrWhiteSpace(e.Data))
                                    {
                                        Log.LogError(e.Data); 
                                    }
                                };
                            process.Start();

                            process.BeginOutputReadLine();
                            process.BeginErrorReadLine();
                            process.WaitForExit();
                            
                            CurrentRevision = text.ToString().Trim();
                        }
                        
                        // Get the current branch
                        {
                            var info = new System.Diagnostics.ProcessStartInfo
                                    {
                                        FileName = "git",
                                        Arguments = "rev-parse --abbrev-ref HEAD",
                                        WorkingDirectory = LocalPath,
                                        UseShellExecute = false,
                                        RedirectStandardOutput = true,
                                        RedirectStandardError = true,
                                    };
                            
                            var text = new System.Text.StringBuilder();
                            var process = new System.Diagnostics.Process();
                            process.StartInfo = info;
                            process.OutputDataReceived += 
                                (s, e) => 
                                { 
                                    text.Append(e.Data);
                                };
                            process.ErrorDataReceived += 
                                (s, e) => 
                                { 
                                    if (!string.IsNullOrWhiteSpace(e.Data))
                                    {
                                        Log.LogError(e.Data); 
                                    }
                                };
                            process.Start();

                            process.BeginOutputReadLine();
                            process.BeginErrorReadLine();
                            process.WaitForExit();
                            
                            CurrentBranch = text.ToString().Trim();
                        }
                        
                        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged 
                        // from a task's constructor or property setter. As long as this task is written to always log an error
                        // when it fails, we can reliably return HasLoggedErrors.
                        return !Log.HasLoggedErrors;
                    }
                ]]>  
            </Code>
        </Task>
    </UsingTask>
</Project>