<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <Import Project="$(MSBuildThisFileDirectory)transform.version.msbuild" />

    <PropertyGroup>
        <!--
            The highest version of the configuration scripts that is expected.
        -->
        <VersionSettingsExpected>$(VersionTransformLatestMajor).$(VersionTransformLatestMinor)</VersionSettingsExpected>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>
    </PropertyGroup>

    <!--
        Define the expected locations of the settings files so that we can copy / transform them later on.
    -->
    <ItemGroup>
        <SettingsFilesToBeTransformed Include="$(DirLocalUserSettings)\*.settings.props" />
        <SettingsFilesToBeTransformed Include="$(DirLocalUserSettings)\settings.props" />
        <SettingsFilesToBeTransformed Include="$(DirLocalUserSettings)\entrypoint.msbuild" />
    </ItemGroup>

    <Target
        Name="_Custom_TransformConfigurations"
        Outputs="%(SettingsFilesToBeTransformed.FullPath)">

        <Message
            Text="Upgrading the nBuildKit user settings files to the latest version" />

        <PropertyGroup>
            <FilePathToTransform>%(SettingsFilesToBeTransformed.FullPath)</FilePathToTransform>
            <FileNameToTransform>%(SettingsFilesToBeTransformed.FileName)</FileNameToTransform>
            <FileNameConfigurationOutput>$(FileNameToTransform)</FileNameConfigurationOutput>
        </PropertyGroup>

        <XmlPeek
            Condition="Exists('$(FileUserConfiguration)')"
            Namespaces="&lt;Namespace Prefix='x' Uri='http://schemas.microsoft.com/developer/msbuild/2003' /&gt;"
            Query="/x:Project/x:PropertyGroup/x:NBuildKitConfigurationVersion/text()"
            XmlInputPath="$(FileUserConfiguration)">
            <Output
                ItemName="VersionExistingConfigurationFile"
                TaskParameter="Result" />
        </XmlPeek>
        <PropertyGroup>
            <IsUpToDate Condition=" '$(VersionExistingConfigurationFile)' == '$(VersionSettingsExpected)' ">true</IsUpToDate>
            <IsUpToDate Condition=" '$(IsUpToDate)' == '' ">false</IsUpToDate>
        </PropertyGroup>

        <XmlPeek
            Condition=" '$(IsUpToDate)' == 'false' "
            Namespaces="&lt;Namespace Prefix='x' Uri='http://schemas.microsoft.com/developer/msbuild/2003' /&gt;"
            Query="/x:Project/x:PropertyGroup/x:NBuildKitConfigurationVersion/text()"
            XmlInputPath="$(FilePathToTransform)" >
            <Output
                ItemName="VersionConfigurationFile"
                TaskParameter="Result" />
        </XmlPeek>

        <TransformConfiguration_FindXsltFiles
            Condition=" '$(IsUpToDate)' == 'false' "
            Directory="$(MSBuildThisFileDirectory)"
            FileName="$(FileNameConfigurationOutput).xsl"
            Version="@(VersionConfigurationFile)" >
            <Output
                ItemName="TransformationsToApply"
                TaskParameter="Result" />
        </TransformConfiguration_FindXsltFiles>

        <XslTransformation
            Condition=" '$(IsUpToDate)' == 'false' AND @(TransformationsToApply) != '' "
            OutputPaths="$(FilePathToTransform)"
            UseTrustedSettings="true"
            XmlInputPaths="$(FilePathToTransform)"
            XslInputPath="%(TransformationsToApply.FullPath)" />
    </Target>

    <UsingTask
        AssemblyFile="$(MsBuildTasksAssembly)"
        TaskFactory="CodeTaskFactory"
        TaskName="TransformConfiguration_FindXsltFiles" >
        <ParameterGroup>
            <Directory ParameterType="System.String" Required="true" />
            <FileName ParameterType="System.String" Required="true" />
            <Version ParameterType="System.String" Required="true" />
            <Result
                ParameterType="Microsoft.Build.Framework.ITaskItem[]"
                Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System.Linq" />
            <Code
                Language="cs"
                Type="Method">
                <![CDATA[
                    public override bool Execute()
                    {
                        var minimumPath = System.IO.Path.Combine(Directory, Version);
                        Result = System.IO.Directory.EnumerateFiles(Directory, FileName, SearchOption.AllDirectories)
                            .Where(
                                p => string.Compare(
                                    System.IO.Path.GetDirectoryName(p),
                                    minimumPath,
                                    System.StringComparison.OrdinalIgnoreCase) > 0)
                            .OrderBy(p => System.IO.Path.GetDirectoryName(p))
                            .Select(p => new TaskItem(p))
                            .ToArray();

                        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                        // from a task's constructor or property setter. As long as this task is written to always log an error
                        // when it fails, we can reliably return HasLoggedErrors.
                        return !Log.HasLoggedErrors;
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>
