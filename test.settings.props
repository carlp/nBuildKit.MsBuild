<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="Run"
    ToolsVersion="11.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <VersionNBuildKitOldestSupported>0.9.0</VersionNBuildKitOldestSupported>
    </PropertyGroup>


    <!--
        **** PREPARE - WORKSPACE ****
    -->
        <!--
        The list of all files that should be deleted prior to starting the test process.

        If the deletion process fails the test will continue and a warning will be printed.
    -->
    <ItemGroup Condition=" '$(ShouldLoadFilesToDelete)' == 'true' ">
        <!--
        <FilesToDelete Include="" />
        -->
    </ItemGroup>

    <!--
        The list of all directories that should be deleted prior to starting the test process.
        Deleting the directories will also delete all the files contained in these directories.

        If the deletion process fails the test will continue and a warning will be printed.
    -->
    <ItemGroup Condition=" '$(ShouldLoadDirectoriesToDelete)' == 'true' ">
        <!--
        <DirectoriesToDelete Include="" />
        -->
    </ItemGroup>


    <!--
        **** PREPARE - COPY FILES ****
    -->
    <ItemGroup Condition=" '$(ShouldLoadNuGetFilesToCopy)' == 'true' ">
        <!--
        <NuGetFilesToCopy Include="My.Cool.NuGet.Package">
            <Include>**/*.*</Include>
            <Destinations>$(DirBuildTemp)</Destinations>
        </NuGetFilesToCopy>
        -->
    </ItemGroup>
    <ItemGroup Condition=" '$(ShouldLoadHttpFilesToCopy)' == 'true' AND '@(HttpFilesToCopy)' == '' ">
        <!--
        <HttpFilesToCopy Include="">
            <Destination></Destination>
            <Unzip></Unzip>
        </HttpFilesToCopy>
        -->
    </ItemGroup>
    <ItemGroup Condition=" '$(ShouldLoadFilesToCopy)' == 'true' ">
        <!--
        <FilesToCopy Include="">
            <Destination></Destination>
        </FilesToCopy>
        -->
    </ItemGroup>
    <ItemGroup Condition=" '$(ShouldLoadArchiveFilesToCopy)' == 'true' ">
        <!--
        <ArchiveFilesToCopy Include="">
            <Destination></Destination>
        </ArchiveFilesToCopy>
        -->
    </ItemGroup>


    <!--
        **** PREPARE - GENERATE FILES ****
    -->
    <!--
        The list of all files that should be generated and their template files.

        The template file may contain zero or more template parameters as indicated at the top of this
        file. By default template parameters must be enclosed in '${}'. By providing a value for
        'Expression' it is possible to use a custom regular expression to search for elements to replace,
        e.g. $TOKEN$. Note that elements in the regular expession might need to be converted in a suitable
        format because XML doesn't like < and > and MsBuild doesn't like $ (%24), * (%2A), ? (%3F).

        Only the 'Template' value is required.

        Additional parameters can be provided through the 'TemplateTokens' ItemGroup below.
    -->
    <ItemGroup Condition=" '$(ShouldLoadTestFilesToGenerate)' == 'true' ">
        <!--<TestFilesToGenerate
            Condition=" '$(DirBuildTemp)' != '' "
            Include="$(DirBuildTemp)\MyFile.txt">
            <<Encoding>UTF-8</Encoding>
            <Expression>(MyRegex)</Expression>
            <ReplacementValue>MyAdditionalTemplateValue</ReplacementValue>
            <Template>$(DirTemplates)\MyOtherTemplatefile.txt</Template>
            <Token>MyAdditionalTemplateParameter</Token>
        </TestFilesToGenerate>-->
    </ItemGroup>


    <!--
        **** INTEGRATION - PESTER ****
    -->
    <PropertyGroup>
        <!--
            The full path to the file into which Pester will write the test results.
        -->
        <FileTestReport>$(DirBuildLogs)\$(NameTestRepository).xml</FileTestReport>

        <!--
            Defines the active branch in the remote repository on which the test will be executed.
        -->
        <BranchActiveTest>feature/inprogress</BranchActiveTest>

        <!--
             The full path to the directory into which the bare repository will be cloned. $(DirTestLocal) will be
             provided as a property on the test step.
        -->
        <DirTestRepository>$(DirTestLocal)\repo</DirTestRepository>
        <!--
             The full path to the directory into which the working version of the repository will be cloned.
             $(DirTestLocal) will be  provided as a property on the test step.
        -->
        <DirTestWorkspace>$(DirTestLocal)\workspace</DirTestWorkspace>
        <!--
             The full path to the directory into which the temporary files and directories for the test can
             be dropped. $(DirTestLocal) will be provided as a property on the test step.
        -->
        <DirTestTemp>$(DirTestLocal)\temp</DirTestTemp>

        <!--
             The full path to the directory into which the artefacts will be published after the build.
             $(DirTestLocal) will be provided as a property on the test step.
        -->
        <DirTestDropArtefacts>$(DirTestLocal)\drop\artefacts</DirTestDropArtefacts>
        <!--
             The full path to the directory into which nuget packages will be published after the build.
             $(DirTestLocal) will be provided as a property on the test step.
        -->
        <DirTestDropNuGet>$(DirTestLocal)\drop\nuget</DirTestDropNuGet>
        <!--
             The full path to the directory into which nuget symbol packages will be published after the build.
             $(DirTestLocal) will be  provided as a property on the test step.
        -->
        <DirTestDropSymbols>$(DirTestLocal)\drop\symbols</DirTestDropSymbols>
    </PropertyGroup>
    <!--
        The list of all arguments that should be passed to the Pester test.

        The value elements may contain zero or more template parameters as indicated at the top of this
        file. Template parameters must be enclosed in '${}'.
    -->
    <ItemGroup Condition=" '$(ShouldLoadPesterTestArguments)' == 'true' ">
        <PesterTestArguments Include="nbuildkitminimumversion">
            <Value>${VersionSemantic}</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="nbuildkitmaximumversion">
            <Value>${VersionMajorNext}.0.0</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="localNuGetFeed">
            <Value>$(DirBuildDeploy)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="remoteRepositoryUrl">
            <Value>http://github.com/$(GitHubUserName)/$(NameTestRepository)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="activeBranch">
            <Value>$(BranchActiveTest)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="repositoryLocation">
            <Value>$(DirTestRepository)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="workspaceLocation">
            <Value>$(DirTestWorkspace)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="nugetPath">
            <Value>$(DirTestDropNuGet)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="symbolsPath">
            <Value>$(DirTestDropSymbols)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="artefactsPath">
            <Value>$(DirTestDropArtefacts)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="logLocation">
            <Value>$(DirBuildLogs)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="tempLocation">
            <Value>$(DirTestTemp)</Value>
        </PesterTestArguments>
    </ItemGroup>


    <!--
        **** TEST STEPS ****
    -->
    <PropertyGroup>
        <!-- Indicate if an error in the pre-step actions should fail the deploy -->
        <!-- <FailTestOnPreStepFailure>false</FailTestOnPreStepFailure> -->

        <!-- Indicate if an error in the post-step actions should fail the deploy -->
        <!-- <FailTestOnPostStepFailure>false</FailTestOnPostStepFailure> -->

        <!-- Indicate if an error in the pre-step actions should immediately stop the deploy -->
        <!-- <StopTestOnPreStepFailure>false</StopTestOnPreStepFailure> -->

        <!-- Indicate if an error in the post-step actions should immediately stop the deploy -->
        <!-- <StopTestOnPostStepFailure>false</StopTestOnPostStepFailure> -->
    </PropertyGroup>

    <!--
         A list of all additional scripts and their targets that should be executed before each of the selected deploy steps. Globally defined
         pre-steps will be executed prior to the presteps of the individual steps.

        The metadata to the script that is about to be executed is passed to each pre-step under the following properties:

        - StepDescription : The full description of the step to be executed.
        - StepId          : The ID of the step. In general the name of the property that references the step file.
        - StepName        : The name of the step.
        - StepPath        : The full path to the script file for the step.

        Additionally all the standard properties as seen below and the properties for the given deploy step are passed in.
    -->
    <ItemGroup Condition=" '$(ShouldLoadTestPreStepsToExecute)' == 'true' ">
        <!--
        <TestPreStepsToExecute Include="">
            <Properties>
            </Properties>
        </TestPreStepsToExecute>
        -->
    </ItemGroup>

    <!--
        A list of all additional scripts and their targets that should be executed after each of the selected deploy steps. Globally defined
         post-steps will be executed after the poststeps of the individual steps.

        The metadata to the script that is about to be executed is passed to each pre-step under the following properties:

        - StepDescription : The full description of the step to be executed.
        - StepId          : The ID of the step. In general the name of the property that references the step file.
        - StepName        : The name of the step.
        - StepPath        : The full path to the script file for the step.

        Additionally all the standard properties as seen below and the properties for the given deploy step are passed in.
    -->
    <ItemGroup Condition=" '$(ShouldLoadTestPostStepsToExecute)' == 'true' ">
        <!--
        <TestPostStepsToExecute Include="">
            <Properties>
            </Properties>
        </TestPostStepsToExecute>
        -->
    </ItemGroup>

    <!--
        The following ItemGroup defines which steps are taken during the test process. The order of the items in the item group
        determines in which order the test steps are executed.

        Each test step can define the following items:
        - Properties                                     - The semi-colon separated set of properties that should be passed to the script.
                                                           Properties are written as 'key=value'.
        - Groups                                         - All the groups that a given step belongs to. The user can elect to only run test steps for a given group.
        - PreSteps                                       - A semi-colon separated list of all additional scripts and their targets that should be executed before
                                                           the selected test step.
        - PostSteps                                      - A semi-colon separated list of all additional scripts and their targets that should be executed after
                                                           the selected test step.

        The metadata to the script that is about to be executed is passed to each pre-step under the following properties:

        - StepDescription : The full description of the step to be executed.
        - StepId          : The ID of the step. In general the name of the property that references the step file.
        - StepName        : The name of the step.
        - StepPath        : The full path to the script file for the step.

        Additionally all the standard properties as seen below and the properties for the given test step are passed in.

        The following ItemGroup defines which steps are taken during the test process. The order of the items in the item group
        determines in which order the test steps are executed.

        Additional test steps can be defined by providing the path to the MsBuild script that should be executed
        for that step, e.g. adding a test step that points to the 'c:\stuff\MyCoolScript.msbuild' will execute
        that script.

        Any properties defined by the 'Properties' section are pushed up.
    -->
    <ItemGroup Condition=" '$(ShouldLoadTestStepsToExecute)' == 'true' ">
        <TestStepsToExecute Include="$(TestStepsPrepareWorkspace)">
            <Properties>
            </Properties>
            <Groups>
                clean;
                prepare;
                prepare.clean;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>

        <TestStepsToExecute Include="$(TestStepsPrepareRestoreNuGet)">
            <Properties>
            </Properties>
            <Groups>
                prepare;
                prepare.restore;
                prepare.restore.nuget;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>

        <!--
            The following steps need to be executed on the original branch (i.e. the branch we are interested in
            building.
        -->
        <TestStepsToExecute Include="$(TestStepsPrepareVcsBranch)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareVcsInfo)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareGetIssueIds)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>

        <!--
            All steps from here on may be executed on a different branch than the orginal branch we we started the
            build on because we might have done some merging.
        -->
        <TestStepsToExecute Include="$(TestStepsPrepareGetVersion)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>

        <!--
        <TestStepsToExecute Include="$(TestStepsPrepareReleaseNotes)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareVcsInfo)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        -->

        <TestStepsToExecute Include="$(TestStepsPrepareCopyNuGet)">
            <Properties>
            </Properties>
            <Groups>
                CopyFiles;
                Prepare;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareCopyHttp)">
            <Properties>
            </Properties>
            <Groups>
                prepare;
                prepare.copy;
                prepare.copy.url;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareCopyFiles)">
            <Properties>
            </Properties>
            <Groups>
                CopyFiles;
                Prepare;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareCopyArchive)">
            <Properties>
            </Properties>
            <Groups>
                prepare;
                prepare.copy;
                prepare.copy.archive;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>

        <TestStepsToExecute Include="$(TestStepsPrepareGenerateFiles)">
            <Properties>
            </Properties>
            <Groups>
                Generate;
                Prepare;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsIntegrationPester)">
            <Properties>
                DirTestLocal=$(DirBuildTestLatestCSharp);
                NameTestRepository=Test.Integration.Latest.MsBuild.CSharp;
                ScriptTest=$(DirTest)\latest.csharp.tests.ps1;
            </Properties>
            <Groups>
                Test.CSharp;
                Test.Latest;
                Test.CSharp.Latest;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsIntegrationPester)">
            <Properties>
                DirTestLocal=$(DirBuildTestOldestCSharp);
                NameTestRepository=Test.Integration.Oldest.MsBuild.CSharp;
                ScriptTest=$(DirTest)\oldest.csharp.tests.ps1;
            </Properties>
            <Groups>
                Test.CSharp;
                Test.Oldest;
                Test.CSharp.Oldest;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsIntegrationPester)">
            <Properties>
                DirTestLocal=$(DirBuildTestLatestVBNet);
                NameTestRepository=Test.Integration.Latest.MsBuild.VbNet;
                ScriptTest=$(DirTest)\latest.vbnet.tests.ps1;
            </Properties>
            <Groups>
                Test.VBNet;
                Test.Latest;
                Test.VBNet.Latest;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsIntegrationPester)">
            <Properties>
                DirTestLocal=$(DirBuildTestOldestVBNet);
                NameTestRepository=Test.Integration.Oldest.MsBuild.VBNet;
                ScriptTest=$(DirTest)\oldest.vbnet.tests.ps1;
            </Properties>
            <Groups>
                Test.VBNet;
                Test.Oldest;
                Test.VBNet.Oldest;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
    </ItemGroup>

    <!--
        Define the scripts that should be executed when any one of the test steps fails.

        Steps can be defined by providing the path to the MsBuild script that should be executed
        for that step, e.g. adding a test step that points to the 'c:\stuff\MyCoolScript.msbuild' will execute
        that script.

        Any properties defined by the 'Properties' section are pushed up.
    -->
    <ItemGroup Condition=" '$(ShouldLoadTestFailureStepsToExecute)' == 'true' ">
        <!--
        <TestFailureStepsToExecute Include="">
            <Properties>
            </Properties>
        </TestFailureStepsToExecute>
        -->
    </ItemGroup>






    <!--
        *************************************
        *                                   *
        *     SHARED TOOLS                  *
        *                                   *
        *************************************
    -->

    <!-- Overrides for the tools paths -->
    <PropertyGroup>
        <!-- Currently there are no test specific tools -->
    </PropertyGroup>





    <!--
        *****************************************
        *                                       *
        *     NBUILDKIT SPECIFIC SETTINGS       *
        *                                       *
        *****************************************
    -->

    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsTestSettings>true</ExistsTestSettings>

        <!-- Defines the version number of the configuration file -->
        <NBuildKitConfigurationVersion>0.9</NBuildKitConfigurationVersion>
    </PropertyGroup>
</Project>
