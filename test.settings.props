<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="Run"
    ToolsVersion="11.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <VersionNBuildKitOldestSupported>0.9.0</VersionNBuildKitOldestSupported>
    </PropertyGroup>

    <!--
        The following ItemGroup defines which steps are taken during the test process. The order of the items in the item group
        determines in which order the test steps are executed.

        The following test steps are by default provided through the given properties:
        $(TestStepsPrepareWorkspace)     - Clears the existing build artifacts from the workspace and creates the required directories. Clearing the
                                           existing build artifacts is only executed if the $(ShouldClean) property is set to 'true'.
        $(TestStepsBuildTargetsAssembly) - Builds Visual Studio projects that contain MsBuild Tasks. Separate from building the standard Visual Studio
                                           solutions so that it is possible to build MsBuild tasks that will be used in the build process.
        $(TestStepsGenerateTargetsFile)  - Generates a targets file for use with an MsBuild tasks assembly.
        $(TestStepsPrepareRestoreNuGet)  - Restores the NuGet packages as specified in the '$(DirWorkspace)\packages.config' file. Additionally
                                           also restores the NuGet packages as specified in the nBuildKit specific 'packages.config' files.
        $(TestStepsPrepareVcsBranch)     - When building from a GIT repository on Jenkins ensures that the current checkout has the same branch
                                           name as the remote tracking branch.
        $(TestStepsPrepareGetVersion)    - Gathers version information and stores it in a temporary file for use by the rest of the test process.
                                           Currently supported methods of gathering version information are using (in order):
                                           - The version defined by a custom MsBuild task which is defined in a file of which the path is stored
                                             in the 'ScriptGetVersion' property. The task should output:
                                             - VersionMajor
                                             - VersionMinor
                                             - VersionPatch
                                             - VersionBuild
                                             - VersionPreRelease
                                             - VersionSemantic
                                             - VersionSemanticFull
                                             - VersionSemanticNuget
                                           - The version stored in an 'version.xml' file which contains an MsBuild property group with
                                             the properties:
                                             - BuildNumber
                                             - VersionMajor
                                             - VersionMinor
                                             - VersionPatch
                                             - VersionBuild
                                             - VersionPreRelease
                                             - The GitVersion tool (https://github.com/ParticularLabs/GitVersion)
                                             - The GitHubFlowVersion tool (https://github.com/JakeGinnivan/GitHubFlowVersion)
        $(TestStepsPrepareGetIssueIds)   - Gets the issue IDs from the commits on the current branch and stores them in a temp file for later use.
        $(TestStepsPrepareReleaseNotes)  - Gathers the release notes and stores them for later use during the test process. Release notes
                                           are retrieved with the GitReleaseNotes tool (https://github.com/GitTools/GitReleaseNotes) which
                                           currently allows gathering release notes from GitHub, Jira and YouTrack
        $(TestStepsPrepareVcsInfo)       - Stores the Version Control System (VCS) information in a file for later use.
                                           Currently supported version control systems is GIT
        $(TestStepsPrepareGenerateFiles) - Generates one or more files from a set of template files.
        $(TestStepsIntegrationPester)    - Runs Pester on a specified test script file.

        Additional test steps can be defined by providing the path to the MsBuild script that should be executed
        for that step, e.g. adding a test step that points to the 'c:\stuff\MyCoolScript.msbuild' will execute
        that script.

        Each script has the following properties passed to it:
        $(ShouldDisplayDebugLog)          - A flag indicating whether or not to display debug log information, usually at the start of the script execution.
        $(NBuildKitVersion)               - The full version of the nBuildKit library that is executing the build.
        $(DirNBuildKitMsBuild)            - The full path to the directory that contains the nBuildKit scripts.
        $(DirNBuildKitMsBuildShared)      - The full path to the directory that contains the shared nBuildkit scripts.
        $(DirNBuildKitMsBuildExtensions)  - The full path to the directory that contains the nBuildKit extension scripts.
        $(DirNBuildKitMsBuildTemplates)   - The full path to the directory that contains the nBuildKit templates.
    -->
    <ItemGroup>
        <TestStepsToExecute Include="$(TestStepsPrepareWorkspace)">
            <Properties>
            </Properties>
            <Groups>
                Clean;
            </Groups>
        </TestStepsToExecute>

        <TestStepsToExecute
            Condition="!Exists('$(FileNBuildKitExtensionsImport)')"
            Include="$(TestStepsBuildTargetsAssembly)">
            <Properties>
            </Properties>
            <Groups>
                Bootstrap;
            </Groups>
        </TestStepsToExecute>
        <TestStepsToExecute
            Condition="!Exists('$(FileNBuildKitExtensionsImport)')"
            Include="$(TestStepsGenerateTargetsFile)">
            <Properties>
            </Properties>
            <Groups>
                Bootstrap;
            </Groups>
        </TestStepsToExecute>

        <TestStepsToExecute Include="$(TestStepsPrepareRestoreNuGet)">
            <Properties>
                StageSpecificNuGetPackageFilesToRestore=$(DirNBuildKitMsBuild)\test\packages.config
            </Properties>
            <Groups>
                NuGet;
                Prepare;
                Restore;
            </Groups>
        </TestStepsToExecute>

        <!--
            The following steps need to be executed on the original branch (i.e. the branch we are interested in
            building.
        -->
        <TestStepsToExecute Include="$(TestStepsPrepareVcsBranch)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareVcsInfo)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareGetIssueIds)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
        </TestStepsToExecute>

        <!--
            All steps from here on may be executed on a different branch than the orginal branch we we started the
            build on because we might have done some merging.
        -->
        <TestStepsToExecute Include="$(TestStepsPrepareGetVersion)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
        </TestStepsToExecute>

        <!--
        <TestStepsToExecute Include="$(TestStepsPrepareReleaseNotes)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareVcsInfo)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
        </TestStepsToExecute>
        -->
        <TestStepsToExecute Include="$(TestStepsPrepareGenerateFiles)">
            <Properties>
            </Properties>
            <Groups>
                Generate;
                Prepare;
            </Groups>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsIntegrationPester)">
            <Properties>
                DirTestLocal=$(DirBuildTestLatestCSharp);
                NameTestRepository=Test.Integration.Latest.MsBuild.CSharp;
                ScriptTest=$(DirTest)\latest.csharp.tests.ps1;
            </Properties>
            <Groups>
                Test.CSharp;
                Test.Latest;
                Test.CSharp.Latest;
            </Groups>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsIntegrationPester)">
            <Properties>
                DirTestLocal=$(DirBuildTestOldestCSharp);
                NameTestRepository=Test.Integration.Oldest.MsBuild.CSharp;
                ScriptTest=$(DirTest)\oldest.csharp.tests.ps1;
            </Properties>
            <Groups>
                Test.CSharp;
                Test.Oldest;
                Test.CSharp.Oldest;
            </Groups>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsIntegrationPester)">
            <Properties>
                DirTestLocal=$(DirBuildTestLatestVBNet);
                NameTestRepository=Test.Integration.Latest.MsBuild.VbNet;
                ScriptTest=$(DirTest)\latest.vbnet.tests.ps1;
            </Properties>
            <Groups>
                Test.VBNet;
                Test.Latest;
                Test.VBNet.Latest;
            </Groups>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsIntegrationPester)">
            <Properties>
                DirTestLocal=$(DirBuildTestOldestVBNet);
                NameTestRepository=Test.Integration.Oldest.MsBuild.VBNet;
                ScriptTest=$(DirTest)\oldest.vbnet.tests.ps1;
            </Properties>
            <Groups>
                Test.VBNet;
                Test.Oldest;
                Test.VBNet.Oldest;
            </Groups>
        </TestStepsToExecute>
    </ItemGroup>

    <!--
        Define the scripts that should be executed when any one of the test steps fails.

        Steps can be defined by providing the path to the MsBuild script that should be executed
        for that step, e.g. adding a test step that points to the 'c:\stuff\MyCoolScript.msbuild' will execute
        that script.

        Each script has the following properties passed to it:
        $(ShouldDisplayDebugLog)         - A flag indicating whether or not to display debug log information, usually at the start of the script execution.
        $(NBuildKitVersion)              - The full version of the nBuildKit library that is executing the build.
        $(DirNBuildKitMsBuild)           - The full path to the directory that contains the nBuildKit scripts.
        $(DirNBuildKitMsBuildShared)     - The full path to the directory that contains the shared nBuildkit scripts.
        $(DirNBuildKitMsBuildExtensions) - The full path to the directory that contains the nBuildKit extension scripts.
        $(DirNBuildKitMsBuildTemplates)  - The full path to the directory that contains the nBuildKit templates.

        Additionally any properties defined by the 'Properties' section are also pushed up.
    -->
    <ItemGroup>
        <!--
        <TestFailureStepsToExecute Include="">
            <Properties>
            </Properties>
        </TestFailureStepsToExecute>
        -->
    </ItemGroup>


    <!--
        **** PREPARE - WORKSPACE ****
    -->
        <!--
        The list of all files that should be deleted prior to starting the test process.

        If the deletion process fails the test will continue and a warning will be printed.
    -->
    <ItemGroup>
        <!--
        <TestFilesToDelete Include="" />
        -->
    </ItemGroup>

    <!--
        The list of all directories that should be deleted prior to starting the test process.
        Deleting the directories will also delete all the files contained in these directories.

        If the deletion process fails the test will continue and a warning will be printed.
    -->
    <ItemGroup>
        <!--
        <TestDirectoriesToDelete Include="" />
        -->
    </ItemGroup>

    <!--
        The list of all files that should be copied prior to starting the tests.
    -->
    <ItemGroup>
        <!--
        <TestFilesToCopy Include="$(DirTestOldestVbNet)\**\*.*"
                         Exclude="$(DirTestOldestVbNet)\environment.props;$(DirTestOldestVbNet)\**\packages.config;$(DirTestOldestVbNet)\**\*.vbproj"
                         Condition="Exists('$(DirTestOldestVbNet)')">
            <TargetDirectory>$(DirBuildTestOldestVbNet)</TargetDirectory>
        </TestFilesToCopy>
        -->
    </ItemGroup>


    <!--
        **** PREPARE - GENERATE FILES ****
    -->
    <!--
        The list of all files that should be generated and their template files.

        The template file may contain zero or more template parameters as indicated at the top of this
        file. By default template parameters must be enclosed in '${}'. By providing a value for
        'Expression' it is possible to use a custom regular expression to search for elements to replace,
        e.g. $TOKEN$. Note that elements in the regular expession might need to be converted in a suitable
        format because XML doesn't like < and > and MsBuild doesn't like $ (%24), * (%2A), ? (%3F).

        Only the 'Template' value is required.

        Additional parameters can be provided through the 'TemplateTokens' ItemGroup below.
    -->
    <ItemGroup>
        <!--
        <TestFilesToGenerate Include="$(DirBuildTestLatestCSharp)\tools\environment.props">
            <Encoding>UTF-8</Encoding>
            <Expression>(MyRegex)</Expression>
            <ReplacementValue>$(DirBuildDeploy)</ReplacementValue>
            <Template>$(DirTestLatestCSharp)\tools\environment.props</Template>
            <Token>LocalNuGetRepository</Token>
        </TestFilesToGenerate>
        -->
    </ItemGroup>


    <!--
        **** INTEGRATION - PESTER ****
    -->
    <PropertyGroup>
        <!--
            The full path to the file into which Pester will write the test results.
        -->
        <FileTestReport Condition=" '$(FileTestReport)' == '' ">$(DirBuildLogs)\$(NameTestRepository).xml</FileTestReport>

        <!--
            Defines the active branch in the remote repository on which the test will be executed.
        -->
        <BranchActiveTest Condition=" '$(BranchActiveTest)' == '' ">feature/nbuildkit_${VersionSemantic}</BranchActiveTest>

        <!--
             The full path to the directory into which the bare repository will be cloned. $(DirTestLocal) will be
             provided as a property on the test step.
        -->
        <DirTestRepository>$(DirTestLocal)\repo</DirTestRepository>
        <!--
             The full path to the directory into which the working version of the repository will be cloned.
             $(DirTestLocal) will be  provided as a property on the test step.
        -->
        <DirTestWorkspace>$(DirTestLocal)\workspace</DirTestWorkspace>
        <!--
             The full path to the directory into which the temporary files and directories for the test can
             be dropped. $(DirTestLocal) will be provided as a property on the test step.
        -->
        <DirTestTemp>$(DirTestLocal)\temp</DirTestTemp>

        <!--
             The full path to the directory into which the artefacts will be published after the build.
             $(DirTestLocal) will be provided as a property on the test step.
        -->
        <DirTestDropArtefacts>$(DirTestLocal)\drop\artefacts</DirTestDropArtefacts>
        <!--
             The full path to the directory into which nuget packages will be published after the build.
             $(DirTestLocal) will be provided as a property on the test step.
        -->
        <DirTestDropNuGet>$(DirTestLocal)\drop\nuget</DirTestDropNuGet>
        <!--
             The full path to the directory into which nuget symbol packages will be published after the build.
             $(DirTestLocal) will be  provided as a property on the test step.
        -->
        <DirTestDropSymbols>$(DirTestLocal)\drop\symbols</DirTestDropSymbols>
    </PropertyGroup>
    <!--
        The list of all arguments that should be passed to the Pester test.

        The value elements may contain zero or more template parameters as indicated at the top of this
        file. Template parameters must be enclosed in '${}'.
    -->
    <ItemGroup>
        <PesterTestArguments Include="nbuildkitminimumversion">
            <Value>${VersionSemantic}</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="nbuildkitmaximumversion">
            <Value>${VersionMajorNext}.0.0</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="localNuGetFeed">
            <Value>$(DirBuildDeploy)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="remoteRepositoryUrl">
            <Value>http://github.com/$(GitHubUserName)/$(NameTestRepository)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="activeBranch">
            <Value>$(BranchActiveTest)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="repositoryLocation">
            <Value>$(DirTestRepository)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="workspaceLocation">
            <Value>$(DirTestWorkspace)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="nugetPath">
            <Value>$(DirTestDropNuGet)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="symbolsPath">
            <Value>$(DirTestDropSymbols)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="artefactsPath">
            <Value>$(DirTestDropArtefacts)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="logLocation">
            <Value>$(DirBuildLogs)</Value>
        </PesterTestArguments>
        <PesterTestArguments Include="tempLocation">
            <Value>$(DirTestTemp)</Value>
        </PesterTestArguments>
    </ItemGroup>






    <!--
        *************************************
        *                                   *
        *     SHARED TOOLS                  *
        *                                   *
        *************************************
    -->

    <!-- Overrides for the tools paths -->
    <PropertyGroup>
        <!-- Currently there are no test specific tools -->
    </PropertyGroup>





    <!--
        *****************************************
        *                                       *
        *     NBUILDKIT SPECIFIC SETTINGS       *
        *                                       *
        *****************************************
    -->

    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsTestSettings>true</ExistsTestSettings>

        <!-- Defines the version number of the configuration file -->
        <NBuildKitConfigurationVersion>1.0</NBuildKitConfigurationVersion>
    </PropertyGroup>
</Project>
