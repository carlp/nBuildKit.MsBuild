<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="11.0"
         DefaultTargets="Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <VersionNBuildKitOldestSupported>0.8.0</VersionNBuildKitOldestSupported>
    </PropertyGroup>

    <!--
        The following ItemGroup defines which steps are taken during the test process. The order of the items in the item group
        determines in which order the test steps are executed.

        The following default steps are always executed:
        - Clearing the existing build artifacts from the workspace and creation of the required directories. Clearing the
          existing build artifacts is only executed if the $(ShouldClean) property is set to 'true'.
        - Restoring the NuGet packages as specified in the '$(DirWorkspace)\packages.config' file. Additionally also restores the
          NuGet packages as specified in the nBuildKit specific 'packages.config' files.

        The following test steps are by default provided through the given properties:
        $(TestStepsPrepareVcsBranch)     - When building from a GIT repository on Jenkins ensures that the current checkout has the same branch
                                           name as the remote tracking branch.
        $(TestStepsPrepareGetVersion)    - Gathers version information and stores it in a temporary file for use by the rest of the test process.
                                           Currently supported methods of gathering version information are using (in order):
                                           - The version defined by a custom MsBuild task which is defined in a file of which the path is stored
                                             in the 'ScriptGetVersion' property. The task should output:
                                             - VersionMajor
                                             - VersionMinor
                                             - VersionPatch
                                             - VersionBuild
                                             - VersionPreRelease
                                             - VersionSemantic
                                             - VersionSemanticFull
                                             - VersionSemanticNuget
                                           - The version stored in an 'version.xml' file which contains an MsBuild property group with
                                             the properties:
                                             - BuildNumber
                                             - VersionMajor
                                             - VersionMinor
                                             - VersionPatch
                                             - VersionBuild
                                             - VersionPreRelease
                                             - The GitVersion tool (https://github.com/ParticularLabs/GitVersion)
                                             - The GitHubFlowVersion tool (https://github.com/JakeGinnivan/GitHubFlowVersion)
        $(TestStepsPrepareGetIssueIds)   - Gets the issue IDs from the commits on the current branch and stores them in a temp file for later use.
        $(TestStepsPrepareReleaseNotes)  - Gathers the release notes and stores them for later use during the test process. Release notes
                                           are retrieved with the GitReleaseNotes tool (https://github.com/GitTools/GitReleaseNotes) which
                                           currently allows gathering release notes from GitHub, Jira and YouTrack
        $(TestStepsPrepareVcsInfo)       - Stores the Version Control System (VCS) information in a file for later use.
                                           Currently supported version control systems is GIT
        $(TestStepsPrepareGenerateFiles) - Generates one or more files from a set of template files.

        Additional test steps can be defined by providing the path to the MsBuild script that should be executed
        for that step, e.g. adding a test step that points to the 'c:\stuff\MyCoolScript.msbuild' will execute
        that script.

        Each script has the following properties passed to it:
        $(ShouldDisplayDebugLog)          - A flag indicating whether or not to display debug log information, usually at the start of the script execution.
        $(NBuildKitVersion)               - The full version of the nBuildKit library that is executing the build.
        $(DirNBuildKitMsBuild)            - The full path to the directory that contains the nBuildKit scripts.
        $(DirNBuildKitMsBuildShared)      - The full path to the directory that contains the shared nBuildkit scripts.
        $(DirNBuildKitMsBuildExtensions)  - The full path to the directory that contains the nBuildKit extension scripts.
        $(DirNBuildKitMsBuildTemplates)   - The full path to the directory that contains the nBuildKit templates.
    -->
    <ItemGroup>
        <TestStepsToExecute Include="$(TestStepsPrepareWorkspace)">
            <Properties>
            </Properties>
            <Groups>
                Clean;
            </Groups>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareRestoreNuGet)">
            <Properties>
                StageSpecificNuGetPackageFilesToRestore=$(DirNBuildKitMsBuild)\test\packages.config
            </Properties>
            <Groups>
                NuGet;
                Prepare;
                Restore;
            </Groups>
        </TestStepsToExecute>

        <!--
            The following steps need to be executed on the original branch (i.e. the branch we are interested in
            building.
        -->
        <TestStepsToExecute Include="$(TestStepsPrepareVcsBranch)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareVcsInfo)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareGetIssueIds)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
        </TestStepsToExecute>

        <!--
            All steps from here on may be executed on a different branch than the orginal branch we we started the
            build on because we might have done some merging.
        -->
        <TestStepsToExecute Include="$(TestStepsPrepareGetVersion)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
        </TestStepsToExecute>

        <!--
        <TestStepsToExecute Include="$(TestStepsPrepareReleaseNotes)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareVcsInfo)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
        </TestStepsToExecute>
        -->
        <TestStepsToExecute Include="$(TestStepsPrepareGenerateFiles)">
            <Properties>
            </Properties>
            <Groups>
                Generate;
                Prepare;
            </Groups>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(DirWorkspace)\test.execute.nbuildkit.csharp.msbuild">
            <Properties>
            </Properties>
            <Groups>
                Test.CSharp;
            </Groups>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(DirWorkspace)\test.execute.nbuildkit.vbnet.msbuild">
            <Properties>
            </Properties>
            <Groups>
                Test.VBNet;
            </Groups>
        </TestStepsToExecute>
    </ItemGroup>

    <!--
        Define the scripts that should be executed when any one of the test steps fails.

        Steps can be defined by providing the path to the MsBuild script that should be executed
        for that step, e.g. adding a test step that points to the 'c:\stuff\MyCoolScript.msbuild' will execute
        that script.

        Each script has the following properties passed to it:
        $(ShouldDisplayDebugLog)         - A flag indicating whether or not to display debug log information, usually at the start of the script execution.
        $(NBuildKitVersion)              - The full version of the nBuildKit library that is executing the build.
        $(DirNBuildKitMsBuild)           - The full path to the directory that contains the nBuildKit scripts.
        $(DirNBuildKitMsBuildShared)     - The full path to the directory that contains the shared nBuildkit scripts.
        $(DirNBuildKitMsBuildExtensions) - The full path to the directory that contains the nBuildKit extension scripts.
        $(DirNBuildKitMsBuildTemplates)  - The full path to the directory that contains the nBuildKit templates.

        Additionally any properties defined by the 'Properties' section are also pushed up.
    -->
    <ItemGroup>
        <!--
        <TestFailureStepsToExecute Include="">
            <Properties>
            </Properties>
        </TestFailureStepsToExecute>
        -->
    </ItemGroup>


    <!--
        **** PREPARE - WORKSPACE ****
    -->
        <!--
        The list of all files that should be deleted prior to starting the test process.

        If the deletion process fails the test will continue and a warning will be printed.
    -->
    <ItemGroup>
        <!--
        <TestFilesToDelete Include="" />
        -->
    </ItemGroup>

    <!--
        The list of all directories that should be deleted prior to starting the test process.
        Deleting the directories will also delete all the files contained in these directories.

        If the deletion process fails the test will continue and a warning will be printed.
    -->
    <ItemGroup>
        <!--
        <TestDirectoriesToDelete Include="" />
        -->
    </ItemGroup>

    <!--
        The list of all files that should be copied prior to starting the tests.
    -->
    <ItemGroup>
        <TestFilesToCopy Include="$(DirTestLatestCSharp)\**\*.*;$(DirTest)\nbuildkit.msbuild.tests.snk"
                         Exclude="$(DirTestLatestCSharp)\environment.props;$(DirTestLatestCSharp)\**\packages.config;$(DirTestLatestCSharp)\**\*.csproj"
                         Condition="Exists('$(DirTestLatestCSharp)')">
            <TargetDirectory>$(DirBuildTestLatestCSharp)</TargetDirectory>
        </TestFilesToCopy>
        <TestFilesToCopy Include="$(DirTestOldestCSharp)\**\*.*;$(DirTest)\nbuildkit.msbuild.tests.snk"
                         Exclude="$(DirTestOldestCSharp)\environment.props;$(DirTestOldestCSharp)\**\packages.config;$(DirTestOldestCSharp)\**\*.csproj"
                         Condition="Exists('$(DirTestOldestCSharp)')">
            <TargetDirectory>$(DirBuildTestOldestCSharp)</TargetDirectory>
        </TestFilesToCopy>

        <TestFilesToCopy Include="$(DirTestLatestVbNet)\**\*.*"
                         Exclude="$(DirTestLatestVbNet)\environment.props;$(DirTestLatestVbNet)\**\packages.config;$(DirTestLatestVbNet)\**\*.vbproj"
                         Condition="Exists('$(DirTestLatestVbNet)')">
            <TargetDirectory>$(DirBuildTestLatestVbNet)</TargetDirectory>
        </TestFilesToCopy>
        <TestFilesToCopy Include="$(DirTestOldestVbNet)\**\*.*"
                         Exclude="$(DirTestOldestVbNet)\environment.props;$(DirTestOldestVbNet)\**\packages.config;$(DirTestOldestVbNet)\**\*.vbproj"
                         Condition="Exists('$(DirTestOldestVbNet)')">
            <TargetDirectory>$(DirBuildTestOldestVbNet)</TargetDirectory>
        </TestFilesToCopy>
    </ItemGroup>


    <!--
        **** PREPARE - GENERATE FILES ****
    -->
    <!--
        The list of all files that should be generated and their template files.

        The template file may contain zero or more template parameters as indicated at the top of this
        file. Template parameters must be enclosed in '${}'.

        Additional parameters can be provided through the 'TemplateTokens' ItemGroup below.
    -->
    <ItemGroup>
        <TestFilesToGenerate Include="$(DirBuildTestLatestCSharp)\environment.props">
            <Template>$(DirTestLatestCSharp)\environment.props</Template>
            <Token>LocalNuGetRepository</Token>
            <ReplacementValue>$(DirBuildDeploy)</ReplacementValue>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestCSharp)\packages.config">
            <Template>$(DirTestLatestCSharp)\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestCSharp)\src\nBuildKit.Test.CSharp.Console\nBuildKit.Test.CSharp.Console.csproj">
            <Template>$(DirTestLatestCSharp)\src\nBuildKit.Test.CSharp.Console\nBuildKit.Test.CSharp.Console.csproj</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestCSharp)\src\nBuildKit.Test.CSharp.Console\packages.config">
            <Template>$(DirTestLatestCSharp)\src\nBuildKit.Test.CSharp.Console\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestCSharp)\src\nBuildKit.Test.CSharp.Library\nBuildKit.Test.CSharp.Library.csproj">
            <Template>$(DirTestLatestCSharp)\src\nBuildKit.Test.CSharp.Library\nBuildKit.Test.CSharp.Library.csproj</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestCSharp)\src\nBuildKit.Test.CSharp.Library\packages.config">
            <Template>$(DirTestLatestCSharp)\src\nBuildKit.Test.CSharp.Library\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestCSharp)\src\nBuildKit.Test.CSharp.Wpf\nBuildKit.Test.CSharp.Wpf.csproj">
            <Template>$(DirTestLatestCSharp)\src\nBuildKit.Test.CSharp.Wpf\nBuildKit.Test.CSharp.Wpf.csproj</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestCSharp)\src\nBuildKit.Test.CSharp.Wpf\packages.config">
            <Template>$(DirTestLatestCSharp)\src\nBuildKit.Test.CSharp.Wpf\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestCSharp)\src\Test.Unit.Library\Test.Unit.Library.csproj">
            <Template>$(DirTestLatestCSharp)\src\Test.Unit.Library\Test.Unit.Library.csproj</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestCSharp)\src\Test.Unit.Library\packages.config">
            <Template>$(DirTestLatestCSharp)\src\Test.Unit.Library\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>

        <TestFilesToGenerate Include="$(DirBuildTestOldestCSharp)\environment.props">
            <Template>$(DirTestOldestCSharp)\environment.props</Template>
            <Token>LocalNuGetRepository</Token>
            <ReplacementValue>$(DirBuildDeploy)</ReplacementValue>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestCSharp)\packages.config">
            <Template>$(DirTestOldestCSharp)\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestCSharp)\src\nBuildKit.Test.CSharp.Console\nBuildKit.Test.CSharp.Console.csproj">
            <Template>$(DirTestOldestCSharp)\src\nBuildKit.Test.CSharp.Console\nBuildKit.Test.CSharp.Console.csproj</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestCSharp)\src\nBuildKit.Test.CSharp.Console\packages.config">
            <Template>$(DirTestOldestCSharp)\src\nBuildKit.Test.CSharp.Console\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestCSharp)\src\nBuildKit.Test.CSharp.Library\nBuildKit.Test.CSharp.Library.csproj">
            <Template>$(DirTestOldestCSharp)\src\nBuildKit.Test.CSharp.Library\nBuildKit.Test.CSharp.Library.csproj</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestCSharp)\src\nBuildKit.Test.CSharp.Library\packages.config">
            <Template>$(DirTestOldestCSharp)\src\nBuildKit.Test.CSharp.Library\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestCSharp)\src\nBuildKit.Test.CSharp.Wpf\nBuildKit.Test.CSharp.Wpf.csproj">
            <Template>$(DirTestOldestCSharp)\src\nBuildKit.Test.CSharp.Wpf\nBuildKit.Test.CSharp.Wpf.csproj</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestCSharp)\src\nBuildKit.Test.CSharp.Wpf\packages.config">
            <Template>$(DirTestOldestCSharp)\src\nBuildKit.Test.CSharp.Wpf\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestCSharp)\src\Test.Unit.Library\Test.Unit.Library.csproj">
            <Template>$(DirTestOldestCSharp)\src\Test.Unit.Library\Test.Unit.Library.csproj</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestCSharp)\src\Test.Unit.Library\packages.config">
            <Template>$(DirTestOldestCSharp)\src\Test.Unit.Library\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>

        <TestFilesToGenerate Include="$(DirBuildTestLatestVbNet)\environment.props">
            <Template>$(DirTestLatestVbNet)\environment.props</Template>
            <Token>LocalNuGetRepository</Token>
            <ReplacementValue>$(DirBuildDeploy)</ReplacementValue>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestVbNet)\packages.config">
            <Template>$(DirTestLatestVbNet)\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestVbNet)\src\nBuildKit.Test.VbNet.Console\nBuildKit.Test.VbNet.Console.vbproj">
            <Template>$(DirTestLatestVbNet)\src\nBuildKit.Test.VbNet.Console\nBuildKit.Test.VbNet.Console.vbproj</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestVbNet)\src\nBuildKit.Test.VbNet.Console\packages.config">
            <Template>$(DirTestLatestVbNet)\src\nBuildKit.Test.VbNet.Console\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestVbNet)\src\nBuildKit.Test.VbNet.Library\nBuildKit.Test.VbNet.Library.vbproj">
            <Template>$(DirTestLatestVbNet)\src\nBuildKit.Test.VbNet.Library\nBuildKit.Test.VbNet.Library.vbproj</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestVbNet)\src\nBuildKit.Test.VbNet.Library\packages.config">
            <Template>$(DirTestLatestVbNet)\src\nBuildKit.Test.VbNet.Library\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestVbNet)\src\nBuildKit.Test.VbNet.Wpf\nBuildKit.Test.VbNet.Wpf.vbproj">
            <Template>$(DirTestLatestVbNet)\src\nBuildKit.Test.VbNet.Wpf\nBuildKit.Test.VbNet.Wpf.vbproj</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestVbNet)\src\nBuildKit.Test.VbNet.Wpf\packages.config">
            <Template>$(DirTestLatestVbNet)\src\nBuildKit.Test.VbNet.Wpf\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestVbNet)\src\Test.Unit.Library\Test.Unit.Library.vbproj">
            <Template>$(DirTestLatestVbNet)\src\Test.Unit.Library\Test.Unit.Library.vbproj</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestLatestVbNet)\src\Test.Unit.Library\packages.config">
            <Template>$(DirTestLatestVbNet)\src\Test.Unit.Library\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>

        <TestFilesToGenerate Include="$(DirBuildTestOldestVbNet)\environment.props">
            <Template>$(DirTestOldestVbNet)\environment.props</Template>
            <Token>LocalNuGetRepository</Token>
            <ReplacementValue>$(DirBuildDeploy)</ReplacementValue>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestVbNet)\packages.config">
            <Template>$(DirTestOldestVbNet)\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestVbNet)\src\nBuildKit.Test.VbNet.Console\nBuildKit.Test.VbNet.Console.vbproj">
            <Template>$(DirTestOldestVbNet)\src\nBuildKit.Test.VbNet.Console\nBuildKit.Test.VbNet.Console.vbproj</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestVbNet)\src\nBuildKit.Test.VbNet.Console\packages.config">
            <Template>$(DirTestOldestVbNet)\src\nBuildKit.Test.VbNet.Console\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestVbNet)\src\nBuildKit.Test.VbNet.Library\nBuildKit.Test.VbNet.Library.vbproj">
            <Template>$(DirTestOldestVbNet)\src\nBuildKit.Test.VbNet.Library\nBuildKit.Test.VbNet.Library.vbproj</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestVbNet)\src\nBuildKit.Test.VbNet.Library\packages.config">
            <Template>$(DirTestOldestVbNet)\src\nBuildKit.Test.VbNet.Library\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestVbNet)\src\nBuildKit.Test.VbNet.Wpf\nBuildKit.Test.VbNet.Wpf.vbproj">
            <Template>$(DirTestOldestVbNet)\src\nBuildKit.Test.VbNet.Wpf\nBuildKit.Test.VbNet.Wpf.vbproj</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestVbNet)\src\nBuildKit.Test.VbNet.Wpf\packages.config">
            <Template>$(DirTestOldestVbNet)\src\nBuildKit.Test.VbNet.Wpf\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestVbNet)\src\Test.Unit.Library\Test.Unit.Library.vbproj">
            <Template>$(DirTestOldestVbNet)\src\Test.Unit.Library\Test.Unit.Library.vbproj</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
        <TestFilesToGenerate Include="$(DirBuildTestOldestVbNet)\src\Test.Unit.Library\packages.config">
            <Template>$(DirTestOldestVbNet)\src\Test.Unit.Library\packages.config</Template>
            <Encoding>UTF-8</Encoding>
        </TestFilesToGenerate>
    </ItemGroup>


    <!--
        **** REPORT FILES ****
    -->
    <PropertyGroup>
        <FileReportVerificationLatestBuildCSharp>$(DirBuildLogs)\verification.latest.build.csharp.xml</FileReportVerificationLatestBuildCSharp>
        <FileReportVerificationOldestBuildCSharp>$(DirBuildLogs)\verification.oldest.build.csharp.xml</FileReportVerificationOldestBuildCSharp>
        <FileReportVerificationLatestBuildVbNet>$(DirBuildLogs)\verification.latest.build.vbnet.xml</FileReportVerificationLatestBuildVbNet>
        <FileReportVerificationOldestBuildVbNet>$(DirBuildLogs)\verification.oldest.build.vbnet.xml</FileReportVerificationOldestBuildVbNet>
    </PropertyGroup>





    <!--
        *************************************
        *                                   *
        *     SHARED TOOLS                  *
        *                                   *
        *************************************
    -->

    <!-- Overrides for the tools paths -->
    <PropertyGroup>
        <!-- Currently there are no test specific tools -->
    </PropertyGroup>





    <!--
        *****************************************
        *                                       *
        *     NBUILDKIT SPECIFIC SETTINGS       *
        *                                       *
        *****************************************
    -->

    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsTestSettings>true</ExistsTestSettings>
    </PropertyGroup>
</Project>
