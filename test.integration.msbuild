<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="nBuildKit_Test_Integration_Run"
    ToolsVersion="11.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsTestPrepareWorkspace>true</ExistsTestPrepareWorkspace>
    </PropertyGroup>

    <Import
        Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importtestsharedsettings.props') AND '$(ExistsSharedImportTestSharedSettings)' != 'true' "
        Project="$(DirNBuildKitMsBuildShared)\shared.importtestsharedsettings.props" />

    <Import
        Condition="Exists('$(FileNBuildKitExtensionsImport)') AND '$(ExistsNBuildKitExtensions)' != 'true' "
        Project="$(FileNBuildKitExtensionsImport)" />

    <Target
        DependsOnTargets="_nBuildKit_Test_Integration_DisplayInfo"
        Name="nBuildKit_Test_Integration_Run">
        <CallTarget Targets="nBuildKit_Test_Integration_Run" />
    </Target>

    <Target
        Condition="$(ShouldDisplayDebugLog)"
        Name="_nBuildKit_Test_Integration_DebugLog">
        <Message
            Importance="low"
            Text="Configuration values:" />
        <Message
            Importance="low"
            Text="ShouldClean:             $(ShouldClean)" />
        <Message
            Importance="low"
            Text=" " />

        <Message
            Importance="low"
            Text="Project directory structure:" />
        <Message
            Importance="low"
            Text="The workspace is located at:                                       $(DirWorkspace)" />
        <Message
            Importance="low"
            Text="The directory containing the build output is located at:           $(DirBuild)" />
        <Message
            Importance="low"
            Text="The directory containing the deliverables is located at:           $(DirBuildDeploy)" />
        <Message
            Importance="low"
            Text="The directory containing the build logs is located at:             $(DirBuildLogs)" />
        <Message
            Importance="low"
            Text="The directory containing the temporary build files is located at:  $(DirBuildTemp)" />
        <Message
            Importance="low"
            Text="The directory containing the C# test files is located at:          $(DirTestLocal)" />
        <Message
            Importance="low"
            Text="The directory containing the NuGet packages is located at:         $(DirPackages)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit files is located at:        $(DirNBuildKitMsBuild)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit scripts is located at:      $(DirNBuildKitMsBuildExtensions)" />
        <Message
            Importance="low"
            Text="The directory containing the nBuildKit templates is located at:    $(DirNBuildKitMsBuildTemplates)" />
    </Target>

    <!-- Display info -->
    <Target
        DependsOnTargets="_nBuildKit_Test_Integration_DebugLog"
        Name="_nBuildKit_Test_Integration_DisplayInfo">
        <Message
            Importance="normal"
            Text="Testing C# packages ..." />
    </Target>

    <Target Name="_nBuildKit_Test_Integration_GetToolPaths">
        <NuGetInstall
            Condition=" '$(ToolsExternalPesterPath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' "
            NuGetExecutablePath="$(ToolsExternalNuGetPath)"
            PackageDirectory="$(DirPackages)"
            PackageName="Pester"
            PackageVersion="$(ToolsExternalPesterVersion)"
            Sources="@(NuGetSources)" />
        <SearchPackagesDirectoryForToolDirectory
            Condition=" '$(ToolsExternalPesterPath)' == 'UNDEFINED' AND  '$(ShouldExecute)' == 'true' "
            FileToLocate="Pester.psm1"
            PackagesDirectory="$(DirPackages)">
            <Output
                PropertyName="ToolsExternalPesterPath"
                TaskParameter="Path" />
        </SearchPackagesDirectoryForToolDirectory>
        <Message
            Condition="Exists('$(ToolsExternalPesterPath)') AND '$(ShouldExecute)' == 'true' "
            Text="The Pester module was found at: $(ToolsExternalPesterPath)" />
        <Error
            Condition="!Exists('$(ToolsExternalPesterPath)') AND '$(ShouldExecute)' == 'true' "
            Text="Could not locate the Pester module path. Cannot execute pester tests." />
    </Target>

    <Target Name="_nBuildKit_Test_Integration_GetPrerequisites">
        <GetSemanticVersionFromFile
            Condition="Exists('$(FileSemanticVersion)')"
            VersionFile="$(FileSemanticVersion)">
            <Output
                PropertyName="VersionMajorNext"
                TaskParameter="VersionMajorNext" />
            <Output
                PropertyName="VersionSemantic"
                TaskParameter="VersionSemantic" />
        </GetSemanticVersionFromFile>
    </Target>

    <Target
        DependsOnTargets="_nBuildKit_Test_Integration_GetToolPaths;_nBuildKit_Test_Integration_GetPrerequisites"
        Name="nBuildKit_Test_Integration_Run">
        <PropertyGroup>
            <BranchActiveTest Condition=" '$(BranchActiveTest)' == '' ">feature/nbuildkit_$(VersionSemantic)</BranchActiveTest>

            <DirTestRepository>$(DirTestLocal)\repo</DirTestRepository>
            <DirTestWorkspace>$(DirTestLocal)\workspace</DirTestWorkspace>
            <DirTestTemp>$(DirTestLocal)\temp</DirTestTemp>

            <DirTestDropArtefacts>$(DirTestLocal)\drop\artefacts</DirTestDropArtefacts>
            <DirTestDropNuGet>$(DirTestLocal)\drop\nuget</DirTestDropNuGet>
            <DirTestDropSymbols>$(DirTestLocal)\drop\symbols</DirTestDropSymbols>
        </PropertyGroup>

        <MakeDir
            Condition="!Exists('$(DirTestDropArtefacts)')"
            Directories="$(DirTestDropArtefacts)" />
        <MakeDir
            Condition="!Exists('$(DirTestDropNuGet)')"
            Directories="$(DirTestDropNuGet)" />
        <MakeDir
            Condition="!Exists('$(DirTestDropSymbols)')"
            Directories="$(DirTestDropSymbols)" />

        <TemplateText
            Template="$(FileTestReport)"
            Tokens="@(TemplateTokens)">
            <Output
                PropertyName="FileReportPesterXmlExpanded"
                TaskParameter="Result" />
        </TemplateText>

        <ItemGroup>
            <TestBuildArguments Include="nbuildkitminimumversion">
                <Value>$(VersionSemantic)</Value>
            </TestBuildArguments>
            <TestBuildArguments Include="nbuildkitmaximumversion">
                <Value>$(VersionMajorNext).0.0</Value>
            </TestBuildArguments>
            <TestBuildArguments Include="localNuGetFeed">
                <Value>$(DirBuildDeploy)</Value>
            </TestBuildArguments>
            <TestBuildArguments Include="remoteRepositoryUrl">
                <Value>http://github.com/$(GitHubUserName)/$(NameTestRepository)</Value>
            </TestBuildArguments>
            <TestBuildArguments Include="activeBranch">
                <Value>$(BranchActiveTest)</Value>
            </TestBuildArguments>
            <TestBuildArguments Include="repositoryLocation">
                <Value>$(DirTestRepository)</Value>
            </TestBuildArguments>
            <TestBuildArguments Include="workspaceLocation">
                <Value>$(DirTestWorkspace)</Value>
            </TestBuildArguments>
            <TestBuildArguments Include="nugetPath">
                <Value>$(DirTestDropNuGet)</Value>
            </TestBuildArguments>
            <TestBuildArguments Include="symbolsPath">
                <Value>$(DirTestDropSymbols)</Value>
            </TestBuildArguments>
            <TestBuildArguments Include="artefactsPath">
                <Value>$(DirTestDropArtefacts)</Value>
            </TestBuildArguments>
            <TestBuildArguments Include="logLocation">
                <Value>$(DirBuildLogs)</Value>
            </TestBuildArguments>
            <TestBuildArguments Include="tempLocation">
                <Value>$(DirTestTemp)</Value>
            </TestBuildArguments>
        </ItemGroup>
        <InvokePesterOnFile
            IgnoreErrors="false"
            PesterModulePath="$(ToolsExternalPesterPath)"
            PowershellExePath="$(ToolsExternalPowershellPath)"
            ReportFile="$(FileReportPesterXmlExpanded)"
            TemporaryDirectory="$(DirBuildTemp)"
            TestArguments="@(TestBuildArguments)"
            TestFile="$(ScriptTest)" />
    </Target>
 </Project>